%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Adobe Illustrator Artwork
%%Creator: Adobe Illustrator(R) 24.2
%%For:  
%%CreationDate: 4/21/2022
%%BoundingBox: 0 0 608 400
%%HiResBoundingBox: 0 0 607.7173 400
%%CropBox: 0 0 607.7173 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 24.2.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 24.2.0 x490 R agm 4.7767 ct 5.4352%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 84 8%%BeginData: 16174 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FD8AFFA8FD6BFFA8FD93FFA8FD6BFFA8FD93FFA8FD0BFFCBCBFD53
%A8FD0BFFA8FD20FFA8CBA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF
%A9FFA8FFA8A8A8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FF
%A8CBA8FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA9CBA8CB
%A2A8FD1FFFA8FD0BFFFD54A8A2FD0BFFA8FD20FFA8FFA9FFA8FFA9FFA8FF
%A9FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFA8A8A8FFA9FFA8FFA9FFA8FFA9FF
%A8FFA9FFA8FFA9FFA8FFA9FFA8CBA8FFA8FFA9FFA8FFA9FFA8FFA9FFA8FF
%A9FFA8FFA9FFA8FFCBFFA8CBA8A8FD1FFFA8FD0BFFA8A8A8CBA8A8A8CBA8
%A8A8CBA8A8A8CBA8A8A8CBA8A8A8CBFD07A8CBA8A8A8CBA8A8A8CBA8A8A8
%CBA8A8A8CBA8A8A8CBFD07A8CBA8A8A8CBA8A8A8CBA8A8A8CBA8A8A8CBA8
%A8A8CBFD05A8FD0BFFA8FD12FFCBFD0DFFA8A9A8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A8A2A9FD19FFA8FFA8FFA8FFA8FFA8FFA8FFA8FD05FF
%FD04A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8
%A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2
%A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A8A8A2A8A2A8A8FD05FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FD06FFCBFFA8FFFFFFA8FFFFFFA8FFCBFFA9FD06
%FFCBA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFF
%A8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FF
%CBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFCBFFA8FFA8FD07FFCBFFA8FFFFFF
%A8FFFFFFA8FFCBFFA9FD04FFA8CBA8A8A2A8A8A8A2A8A8A8A2A8A8CBFD06
%FFA8A8FD4CFFA8A8A8FD05FFA8CBA8A8A2A8A8A8A2A8A8A8A2A8A8CBFD1B
%FFA8FFFFFFFD07A8FFCAC9C2C9C9CFFD20FFA8FFA8FFA8FFA9FD11FFA9FF
%FFFFA8FD30FFA8A8FFFFA8A87EA87EA87EA8A8C9C2C9C2C8C9FD17FFA8A8
%A8CBA8FFA8FFA8A8A8FFA8A8A8FD0FFFA8FFA8FFA8FFA8A8A8FD30FFA8FF
%FFFFA8A8A8A9A8A8A8FFFD04C9C8CFFD18FFA8FFA8FFFFA8A8FFA8FFA9A8
%7DA8A9FFFFFFA8A8FD08FFA9FFA9FFA8FFA9FFA8FD30FFA8A8A8A9A8CBA8
%A8A8CBA8A8A8CBA8A8A8CAA8A9A8FFA8CAA8FFA8A9A8FFA8A9A8FD07FFFD
%09A8CBFD04A8A1A7A1FD0CA8FFFFFFA8FFA8FFA8FFA8A8A8FD2FFFCBA8FF
%FFFFCBFFFFFFA9FFFFFFA9FFFFFFA9FFFFFFA9FFC9C9C2CAFFA858A8FD0A
%FFA8FFA9FFA8FFA8FFA8FFCBFFC3FD04C9FFA8FFA8FFA8FFA8FFA9FD05FF
%A8FFA9FFA8FFA8FFA9FD18FFA8FFA8A8A8A9FD05A8FD0BFFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FFA8FD08FFC9C2C9C9FF7D837DFD11FFA8A9FFFFCAC9C2
%C9C2C9CAFFA8A9A8CBA8FD05FFA8FFA8CBA8FFA8FFA8A8A8FFA8FD18FFA9
%A87DA8A2A87EA87EA8FD0CFFA8FD05FFA8FFA8FFFFFFA8FD09FFC9837CCF
%FD16FFA8FFFFFFFD04C9C2FFFFFFA8FFA8FD09FFA9FFFFFFCBFFA8FD1CFF
%7DA27DA87DA27DA8A8FD0BFFA8A8FFFFA8FFA8CBA8A8A8FFA8A8A8FD07FF
%CFC9587DC9FFA8FFA8FD11FFA8CBFFFFCAC9C2C9C2C9CAFFA8CBA8FFA8FD
%05FFA8FFA8FFA8FFA8FFA8A8A8FD1AFFA8A87EA8A2A8A2A87DA8FD0CFFA8
%FFA8FFFFFFA8FFA8FFFFFFA8FD09FFC2C9A0C9FD14FF7DFFA8FFFFFFC9C9
%C2C9C9FFA9FFA8FFA8FD07FFA8FFA9FFA8FFCBFFA8FD1BFFA97DA8A9FFA8
%A27DA8A2FD0BFFFD05A8CBA8A8A8CAA8A8A8A9A8A8A8CBA8A8A8CBA8CAA7
%CAA8A8A8CBA8A8A8CBA8FD05FFFD04A8527D27F877CBFD06A8A2A8A8A8A2
%FD07A8A2FFFFFFA8FFA8FFA8FFA8A8A8FD05FFA9CBA8FFA8A9A8FD0EFFA8
%FD05FFA9FD0FFFA8FD06FFCAC9C9C9FD1DFFCBFF52FD04F8FFFFFFA8FFCB
%FFA9FFCBFFA8FFCBFFA8FFCBFFA8FFFFFFCBFFA9FFA8FFCBFFA8FD07FFA2
%A8A2A87EA8A8FD16FFA8FD0BFFA8A8FFFFA8FFFFFFC9C9C2C9FD0CFFCBFF
%FFFFA8FD0EFF5220F8F8F8A8FD17FFA8FFA8FFA8FFA8A8A8FD05FFA9A87D
%A87DA27DFD10FFA8FFFFFFA8FD0EFFCBA8FFFFFFA8FFFFCA7CA7C9FD0DFF
%A8FFCBFFA8FD0DFF769A76764BA8FD18FFA9FFFFFFA9FFA8FFA9FD05FFA8
%A8A2FFFFA8A8FD22FFA8A8A8FFA8CBFFFFC97D58C9FD0CFFA8A8FFFFA8A8
%A8CAA1A1A8FD07FFA8A09AA09A4BA8FD15FFA8FFA8FFA8FFA8FFA8A8A8FF
%A8FFFFFFA8FD2AFFA8FFFFFFA8FFFFC9A0C9C9FD0DFFA8FFCBFFA8FFC2BC
%B5CFFD08FF7D9A9A5152FD19FFCBFD05FFA8FD30FFA8A8A8FFA8A8A8CBA8
%CAA7CAA8A9A8CBA8A9A8CBA8A9A8FFA8A8A8CBA8A9A19A9ABC9ACBA8FD06
%FFA8A0A07C83CAFD15FFA9FFA8FFA8FFA8FFA8A8A8FD24FFA8FFA8FFA8FF
%A8A8A8FFFFFFA8FFA8FFFFFFA8FFFFFFA9FFCBFFA8FFCBFFA8FFCBFFA8FF
%FFFFA8FFFFCA75769AC2A1FD05FFCF7C51CEC8A02DC8C8CFFD18FFA9FFFF
%FFA8FD24FFA8A87DA27DA84CF8F8F852FFA8A8FD1BFF837DC399BCC2C2C2
%C9C9CAC2C22DA0C1C89F519FC2C1C9FFFFFF52277DFD14FFA8A8A8FD24FF
%A2A87EA87DFD04F876A8FFA8FD1BFFF8F827C9C2C8C2C8C2C8C9C8A058A0
%C8C2A051C8C2C8C1CFFF7DF8F8F8A8FD06FFAFFFA8FFA8FFA8FD07FFA8FD
%24FFA8A8A2A8CBFFF82720756FA8A8A8FFFFA8FFA9FFA8FFA8FFA8FFA8FF
%A8FD0BFF7D4BF8F82ECFC1C2C2C8C2C8C27C2EC2C1C87B58C1C8C2C2C2FF
%F8F84B4BA1FD05FFA8A8A1A87EA87EA87DFD05FFA8A8A8FD28FF59279AC3
%9A9A7CA9A8FFFFFFA8FFFFFFA8FFFFFFA8FFA8A8A8FD0AFFA14B76202776
%C9C2C8C2C8C2C851A8A8C8A05851C9C9C9C2C8CA764BC36FCAFD05FFC2B5
%BCA1A9A8CBA8A9A8FD05FFA8FFFF7D27FD20FFA8FFA8FF7DF8F8759AA075
%F8F8A8CBFFA8FFA8FFA8FFA8FFA8FFA8FFA8CAA8FD09FFA06F75A12027A7
%C8C1C2C1C89F7CA8CAA07C75A0C2C8C1C8C1CFA8C3769AA8FD04FFCA999A
%4BA1CAFFA8FFA8C3A0FFFFFFA8A8A8FFF8F827FD23FF52F8F8F8A09A7620
%F853FFFFFFCBFFFFFFCBFFFFFFCBFFFFC8C6CFFD0AFF4B764BF8F827CAC9
%C2C8C2C858C3C2C3C2C8C2C8C2C8C2C8A7AFA19A76FD05FFA19A76769AFD
%04FFCABC9A9ACAFFFFA8FFFF5220F852FD22FFF8F84AA59FC29FC7507DFF
%FFA8FFA8FFA8FFA8FFA8FFA8FFA7C8A7FD09FFA17676764420F8A8FFFFCA
%CFA8764BC2BCC2C2C8C2C2C2C8752D2D7CA17D52A8FFFFA8C36F9993CAA9
%FFA8FFA8C3BC6FA0FFA8A8A8FFA09F20F87DFD20FFA9279FC7C7C7C1C7C1
%C7C7CFFD0DFFA87676A1FD06FFC96FC1C8C8999A996F27FD05FF52769AC3
%C2C8C2C8C2C87B2E2D522D5851512D7DFFFF9AC2BBC3A9FFFFFFA8FFC9C2
%9FC8FFFFA8FFFFC299C24BA8FD20FFCF9FC79FC79EC79FC79FC19FC9FD04
%FFA9FFA8FD04FFA74A4B2776A1CAA1CA9A9A6F999FC1C1996F9A934B84FF
%FFFFA85876CA7D7C7BA075A0A7582D512D512D512D2D267DA7A09AA1A8FF
%A8FFA8FFA9C99EC79ECFA9A8A8FFA19A9AA1CAFD20FFFD04C7C1C7C7C7C1
%C79FC7C0C9CACFCACAC3C2A1A1C3FFCAA0767D769A9399A0A0939A99C8C1
%C7999A999A6FFD05FF515858582D582D582D7D2D582D582D582D582D582D
%7C9AC39ACAFD04FFCBFFC9C7C1C7C7CAA7CFCFC975C3CFFD20FFC9C79FC7
%9FC79FC79FC79EC79FC798C79FC79FC39A6F4AA1A8FFA8A775756F9A6F9A
%6F9A6FFD04C1C2A19A6F99A1FFA8CBA8A87DA77DA87DA87DA8582D2D522D
%512D522D512D5276C39AC2A1FFA8FFA8CBA8CA9FC79F9F9FC79EC79F9A99
%C79FC9CFFD1DFFC8C1C79FC7C1C79FC7C7C79FC1C7C79FC7C7C8BCC3C2C3
%A8FFA8FFA8CB9A996F9A999A6F9AC1C7C1C7C8A16F9A93A1A8FFA8CBA8FF
%A8FFA8FFA8FFA88351522D5858522D582D522DA1A0C39ACAA8CBA8FFA8CB
%A8C8C1C79FC7C7C79FC79FC7C1C7C0C7CAFD1CFF9FC79FC199C19FC19EC7
%9FC19FC79FC79EC79EC3A1CAFD07A8A175996F996F996FFD04C1A06F996F
%999AFD0CA8A9A1C29A76767C2D2D2D582D529AC39AA0A1A9FD05A8A9A0C7
%9FC79EC79FC79EC79FC79EC79EC7A7FD1AFFCFFD05C7C1C79FC7C7C79FC7
%C7C7C1C7C1C8A8FFA8CBA8CBA8CBA8FFA8CBA1A8A1A1A1A0C1C7C1C2999A
%999A93A1A8CBA8CBA8FFA8CBA8CBA8CBA8CA9AC39AC3A0A07658585876C3
%A0C39ACBA8CBA8CBA8CBA8FFA6C7C1FD07C7C1C7C7C7C1C7CFFD1AFF9EC7
%9FC79FC79FC79FC79FC19FC79EC79FC9FD07A8FFFD07A8FFA8A875C1C1C1
%6F9A6F9A6F99A1A9A8CBFD07A8FFA8A8A1C29AA09AC39AC39AA17CA19AC3
%A0FD06A8CBA8A8A8A9A6C79EC8A0C99FC79FC79E9F7BC79EC8FD1AFFC89E
%C7C7C79FC7C7C79FC39ACAA7CAA7A8A8CBA8A8A8CBA8A8A8FFA8A8A8CBA8
%A8A8FFA89AC1C8999A6F9A999A75CAA8A8A8CBA8A8A8CBA8A8A8FFA8A8A1
%C39AC39AC3A0C39AC3A0A0A1CAA8A9A8CBA8A8A8CBA8A8A8A9A8C8BBBCB5
%BCC1C79F9F7BA5C7C79FFD1AFFCFC89EC79FC79EC79EC19AA075A17DA8A8
%A9FD07A8A9FD07A8CBA8A875C1999A6F996F9A6FA1FD0BA8A9FD04A89FC2
%9FC29FC2A0A19A766FC1C1C8A1FD0AA8A9A7BB93BB99A09FA59FC79EC79E
%C7A8FD1BFFC99FFD05C7C1C3A09A999A9AA1A1CAA8CBA8CBA8A9A8FFA8A9
%A8CBA8CBA8A852582D9A999A999A9976A8FFA8A9A8FFA8A9A8CBA8A9A8FF
%A8A9A8C8C1C7C1C8C1C7C2A075A0C1C8C1C7C2CAA8A9A8FFA8A9A8CBA8C9
%BBBC9AC3BCC2C7C7C1FD04C7FD1CFFA1937599999F9F9A9AC29A9A6F9A6F
%996FA1FD05A8CBFD05A8CB7D582D515176759A759A6F512EFD0CA8CBFD04
%A8FD09C1C7FD07C1FD08A8A9A6BB93C2BCC3A0C79FC79EC79ECFFD1CFFC9
%6F9A939A6F9A6F9A6F9A999A6F9A999A6FA1A8A8A8A9A8CBA8CBA8CB7D58
%2D525176769A757651522D58A8A9A8A9A8A9A8CBA8A8A8A9A8CBA8CBA8C8
%C1C8C1C7C1C8C1C7C1C8C1C7C1C8C1C1C1CAA9A9A8CBA8A9A9C9C0BBBCC3
%C2C89FC7C7C7C8CFFD1DFFA1936F9A6F996F9A6F996F9A6F996F9A6F996F
%A8A8A8A2CBFD04A8582D2D512D764B767551FD052DA8A8A8A2A9FD06A8A2
%CBA8A8A8A9A0C1C0FD0FC19FCAA8A8A8A9A8A175C19FC79FC79E9F9FCFCF
%FD20FF9A9A939A6F9A999A6F9A999A999A999A999AA1FFA8CBA8CBA8FFA8
%582D582D58757651582D582D522D7CA8CBA8CBA8CBA8CBA8A9A8CBA8CBA8
%CBA8FFC9C8C1C7C1C8C1C7C1C8C1C7C1C8C1C7C1C7C1CAA8FFA19A6FA199
%9A99C29FA099A0A9FD1EFFA8FFA8A8A1A19A9A6F9A759A6F9AA19A6F9A6F
%9A6F9AA8A8A8FFFD04A82D2D2D522D512D522D2D517C2D5883CBA8A8A8CB
%FD07A8FFA8A8A8FFA8AFA8CAA7C9C2C8C2C8C8FD0AC1A876996F999AA16F
%9A6F9A769976A8A8FD1CFFA9A9A8FFA8FFA9FFA8FFA1A09A9AA1C3999A6F
%9A999A6FFD04A8FFA8CB7D582D522D582D522D582D5251A8A9FFA8A9A8A8
%A8CBA8A8A8CBA8A8A8FFA8A8A8A9A8CBA8FFA8C8C1C8C1C8C8C8C1C7C1C8
%C1C8C1C1999A6F9A99999AA0999A6FA19AA0A8FD20FFA8FFA8FFA8A8A8A1
%6F996F9A75996F996F9A6F9976A9A8A9FD04A82D512D512D512D512D512D
%2D7DA8A2FD0CA8A9FD04A87DA8A8A9A8A89FFD04C1C8C2FD04C1C8C2C16F
%9A6F996F9A6F9A759A6F996F9A9AFD20FFA8FD05FFA8A8999A999A99A199
%9A999A999A6FA1A8A9A8FFA8CBA8582D582D582D582D582D582DFD04A8CB
%A8A9A8FFA8A9A8CBA8A9A8FFA8CBA8A8A8A9A8FFA8C8C1C8C1C7C1C8C8C7
%C1C9C8C1999A999A999A999A9A9A999A999A93A1FD20FFA8A8FFFFFFA8A9
%A1996F9A6F999A9A6F9A6F9A6F996FA8A8CBFD04A82D512D512D522D512D
%522D2D7DA8A2FD0CA8CBFD04A87DA8A8CBA8A9A0FD06C1C8C1C8C2C19F9A
%6F9A6F996F9A75A06F9A6F9A6F999AFD20FFA8FD05FFA89A939A6F9A999A
%9A9A999A6F9A999AA1CBA8CBA8CBA8582D582D522D582D522D582DFD06A8
%A9A8A9A8CBA8A8A8A9A8CBA8CBA8A8A8A9A8CBA8C9C1C7C1C8C1C1C1CAC8
%C1C1C2939A6F9A99A06F9A9A9A6F9A999A6FA1FD20FFA8A8FFFFFFAFA16F
%9A6F996F9A6F9A6F9A6F996F9A6FA1A8CBFD04A8512D2D512D512D512D51
%2D527DA87DA8A8A8A2A9FD06A8A2CBFD04A87DA8A2CBA8A8A0FD07C1A8A8
%9FCA76996F996F9AA1A1769A6F996F9A6F9976FD20FFA8FFA8FFA8FF7D9A
%999A6F9A999AA19A999A999A999A9ACBA8CBA8CBA8582D582D582D582D58
%2D582DFD04A8A9A8CBA8CBA8CBA8A9A8CBA8CBA8FFA8A8A2A8A8A87EC9C1
%C7C1C8C1C7C1CBA8A9A8A8999A999A999A9AA89A9A999A999A93A1FD20FF
%FD07A89AC2999A6F99A1A86F9A6F9A6F9A6F9AA2FFA8A8A8A958522D522D
%512D522D512D517DA87DFD04A8CBFD07A8FFFD04A8A2A8A2FFA8A8A1FD06
%C1C2FD04A8A29A6F9A6F9A6F9AA19A6F9A6F9A6F9AA1FD20FFA8FD05FF9A
%BBC2C3C2C39AA8A8A16F9A999A6F9A99A8A8FFA8A8A8CBA8767576757675
%76757D7DFD04A8CBA8A8A8CBA8A8A8CBA8A8A8FFA8A97EFD04A8FFA8CAC2
%C8C2C8C1C7C2A8A8CBA8A99A9A999A6F9A99A19A9A999A6F9A9ACAA8FD1E
%FFA8A8FD04FFA1B593BC9AC2A0A8A8A9A1936F9A6F996F99A1FFFD06A86F
%766F76759A6F9AA1FFA8A87DFD0CA8A9FD04A8A2A8A8A9A8A8A7C1C1C8C1
%C8C1C2FD05A8A16F9A6F996F99769A6F9A6F996F9AA8A8FD1FFFA8FFFFFF
%CABBB5BCB5BCC2C3A1FFA8A8A0C29AC29ACAA8A8A8FFA8A9A8FFA8766F9A
%759A769A76A8A8FFA8A8A8FFA8A9A8FFA8A9A8CBA8A9A8FFA8A9A2CBA8A9
%A8FFA8CAA0C8C1C29FA0C8CBA8CBA8A9A89A999A6F9A99A0999A999A999A
%99FFA8FD1EFFA8A8FD04FF9ABCA1BC93BBBBC2A8A9A8CABCC3C2C3A0CAA8
%AFFD05A8C8999999C1999A75A0A1FFA8A8A2FD0CA8CBFD07A8CBFD04A852
%7C52522DFD06A8A976996F9999C79F9A6F9A6F9A6F9AA8A8FD1FFFA8FD05
%FFA2CAB5BBB5BBB5C3A8AFA0BBBCC2C2C2BCC3A8AFA8CBA8C9C0FD04C1C7
%C1C2C1C9A9A9A8A8A8A9A8A9A8A9A8CBA8A8A8A9A8CBA8A8A2A9A8A9A8CB
%A8CBA8582D582D5852A8A8CBA8A9A9A875C2FD04C7999A6F9A999A75FFA8
%FD1EFFA8FD05FFA8A8A2C393B593BB93A8A8BC93B593BB93BB92BB9AA8A8
%C9C9C998C19FC2C2C9C1C1A0FFA8A8A2A8A8A8A2A9FD06A8A2CBA8A87DA8
%A8A8A2CBFD04A82D512D582D2D51A77DA8A2A9A8A8A6C89EC79E9A6F996F
%9A6F99A8A9A8FD1DFFCBFD06FFA8CBA9CA9ABBB5BBA1FFBBBB9AC2B5BBB5
%BCB5BBA0C8C1C8C2C1C1C1C8CFC8C7C1C9A9CBA8CBA2A9A8CBA8CBA8CBA8
%A9A8CBA8CBA8A8A8CBA8CBA8FFA8FF7D512D582D582D582D587DCBA9CBA6
%C7C7C79F7C759A999A999A6FFFA9FD1EFFA2FD05FFA8A8A8CBA8A8A1BCB4
%C3A8BCB5A1A1BB93BB93BC99C198C19EC19FFD04C1C7C1C1A0CBA8A8A2FD
%04A8CBFD07A8FFA8A87DA8A2A87EA8A2A8A27D52582D582D2D2D512D2D7D
%FFA0C7C0A5512D2D9A6F9A6F9A6F99A1A8A8FD1DFFA8A8CBFD04A8A2A8A2
%A87EA9A8C3A1A9A8CAA8A8A8CAA8A9A1C1C1C1C0FD04C1C7C1C1C1C7C1A7
%7EA8A2A87DA9A8A8A8CBA8A8A8CBA8A8A8FFA8A87EA8A2A8A8A8A2A8A2A8
%A2A8A8A87D7D585851A8A7C79F7B2D587DA89A9A999A6F9A93A1A8FD1EFF
%A8FFA8FFFFFFFD06A8A2FD04A8A9FD08A8A0C9A1A7A0C9A1C89FC1C1C2A0
%A8A8A9FD04A87EFD0AA8A9A8A87DFD04A8CBFD06A87DA9A8CBA8A8A2A8A8
%A774512D7D7DA9A89A6F9A6F996F93A1FFA8FD1CFFA8CBFD06FFA8A9A8FF
%A8A8A8CBA8A9A8FFA8A9A8CBA8A8A8FFA8A9A8FFA8AFA8A8A8CAA8FFA8A9
%A8FFA8CBA2A8A8A9A8FFA8A9A8CBA8A9A8FFA8A8A8CBA8A9A8FFA8A9A8CB
%A8A8A8FFA8A9A8FFA8CBA7587DFD04A8FF9A99939A6F9A6FC3FFA9FD0FFF
%A8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFFD06A8A2FD0CA8CBFD08
%A87EA9FD05A8A9FD04A87DFD0AA8A9A8A87DFD04A8A9FD06A87EFD0AA8CB
%A8A87DA8A8A1769F999F99A0A8FF7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA9FFA8FFA8FFA8A8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A9A8FFA8FFA8FFA8CBA8FFA8
%A8A8FFA8CBA8FFA8CBA8FFA8CBA8A8A8CBA8FFA8CBA8FFA8CBA8A8A8FFA8
%FFA8CBA8FFA8FFA8FFA8A8A8FFA9CFC8C7C7C7A6FFFFA8A8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FFA8FFA8FF
%A8FFA8FF7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF
%A8FFA8FFA8FFA8A9A2FFA8FFA8FFA8FFA8FFA8FFA8A8A2FFA8FFA8FFA8FF
%A8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A8A8FFA7C89FC79FC7C0C8A8FF
%A2A9A8FFA8FFA8FFA8FFA8FFA8FFA8FFFFCBFFFFFFCBFFFFFFCBFFFFFFA8
%FFFFFFCBFFFFFFCBFFFFFFA9A8FFFFCBFFFFFFCBFFFFFFCBFD09FFA8FD05
%FFCBFFFFFFCBFFCBA8CBFFFFFFCBFFFFFFCBFFFFFFA8FFFFFFCBFFFFFFCB
%FD05FFA8FD05FFCBFFFFFFCBFFA8FFC8C7C7C7C1C79FA57CFFFFA8A8FFFF
%FFCBFFFFFFCBFFFFFFCBFFFFA8FFA8FFA8FFA8FFA8FFA8FFA8A8A8FFA8FF
%A8FFA8FFA8FFA8FF7EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8A8
%A8FFA8FFA8CBA8FFA8CBA8FFA2A9A8FFA8CBA8FFA8CBA8FFA8A8A8FFA8CB
%A8FFA8CBA8FFA8FFA8A8A8FFA8FFA8FFA8FFA8FFA8A9A8C79E9F7B572D51
%2D58A8FFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FD04FFA8FFFFFFA8FFA9FF
%A8FFA8FFA8FFA9FFA8FFA8FFA8FFA9CBA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA9A7
%51582D5858837DA8A8FFA8FFA9FFA8FFA9FFA8FFA9FFA8FFFFFFA8A8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FFA8FFA8A7A7AFA8FFCBFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8
%FFA8FFA8FD04FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF
%FFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFFFFCBFFFF
%FFCBFFFFFFCBFFFFFFCBFFFFFFA9FD07FFCBFFFFFFCBFFFFFFCBFFFFFFCB
%FFFFFFCBFFFFFFCBA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8
%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF
%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 6.0-c002 79.164460, 2020/05/12-16:04:17        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/postscript"
   xmp:CreatorTool="Adobe Illustrator 24.2 (Windows)"
   xmp:CreateDate="2022-04-21T17:39:43+03:00"
   xmp:ModifyDate="2022-04-21T17:39:43+03:00"
   xmp:MetadataDate="2022-04-21T17:39:43+03:00"
   xmpMM:OriginalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
   xmpMM:DocumentID="xmp.did:68184791-c627-1340-a204-7e48a1c66557"
   xmpMM:InstanceID="xmp.iid:68184791-c627-1340-a204-7e48a1c66557"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Basic RGB"
   illustrator:CreatorSubTool="Adobe Illustrator"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 15.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">shablon_dlya_rabot</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="168"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAqAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FVF/wDeuP8A1ThV&#xA;WwK7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FVGT/emL5NhV&#xA;WwK7FXYq7FVF/wDeuP8A1ThVWwK7FUv1y/ls7QNDtI7cQx3psTXCAkJGmpXTKGfUGRj1XidvuGSp&#xA;NN/pCf8A6uTf8A39MaV36Qn/AOrk3/AN/TGld+kJ/wDq5N/wDf0xpXfpCf8A6uTf8A39MaV36Qn/&#xA;AOrk3/AN/TGlU31S+EoVb1mQ0q9CKfRSuNLSp+kJ/wDq5N/wDf0xpXfpCf8A6uTf8A39MaV36Qn/&#xA;AOrk3/AN/TGld+kJ/wDq5N/wDf0xpXfpCf8A6uTf8A39MaV36QuP+rk3/AN/TGlU4dUvXr6l60dO&#xA;mxav3Y0tKn6Qn/6uTf8AAN/TGld+kJ/+rk3/AADf0xpXfpCf/q5N/wAA39MaV36Qn/6uTf8AAN/T&#xA;Gld+kJ/+rk3/AADf0xpVkup3iAGO+aQ13HEj9YxpaV9A1u/l1M2dzJ6yOpKMQAVIFewGJCkMnyDF&#xA;2KqMn+9MXybCqtgV2KtMyqpZjQDqcVQ5v4q/ZP4YaVTa7QzLJQ0UEEfPGlVPr8f8rfhjSq8cqSLy&#xA;U7YFSnzPG7WKMoqEcFvYEEVyUUhJYLoJEq/WXSn7IQED6cklU+uL/wAtb/8AADFad9cX/lrf/gBi&#xA;tO+uL/y1v/wAxWnfXF/5a3/4AYrTvri/8tb/APADFaQ0swa6WT1WalP3nEAintilE/XF/wCWt/8A&#xA;gBiinfXF/wCWt/8AgBitO+uL/wAtb/8AADFad9cX/lrf/gBitO+uL/y1v/wAxWmjeCh/0t/+AGK0&#xA;h7OYR8qzNFWn2VDV+/FKJ+uL/wAtb/8AADFFO+uL/wAtb/8AADFad9cX/lrf/gBitO+uL/y1v/wA&#xA;xWnfXF/5a3/4AYrShd3AkjCidpd68SoUYq35ajeTXvUQVSJG5t2FV4/rxlyUszZlVSzGgHU5WxQ5&#xA;v4q/ZP4YaVTa7Qyo/E0UGo+eNKqfX4/5W/DGlV45UkXkp2wKp3du88XBJDEa15ABvwOEKlz6Lfk/&#xA;DqJUeBhQ/wBMPEm1v6E1L/q5n/kQn9ceJbbGiajX4tSJHgIUH8TjxLaPsrSW3Dc5jMWp1ULSnywE&#xA;oRJAIodweowKxzy9b28090JYkkC04hlDU3PSuSLIoafzFp0c0ka6XEwRioY8RWhp04HJcK0sHmXT&#xA;qiukxAdyCp/40x4fNaTDU9R0yynWFdPilJUMSQqgV6fstmt1Ou8KXDVuZp9EckeK6b0m/wBNv7ho&#xA;Dp8UTBeQNFYGh3/ZXxw6bXeLKqpdTozijd2m36O0/wD5Zov+AX+mZ1uDbv0dp/8AyzRf8Av9MbW3&#xA;fo7T/wDlmi/4Bf6Y2tu/R2n/APLNF/wC/wBMbW3fo7T/APlmi/4Bf6Y2toe5XSLdgsltHyIrQRqd&#xA;vux3S1bjSJ34JbRhqV3jX+mO6t3UemQQiUWsMgLcdlT39vbEKhPrWm/8sEf/AAK/804aVE2S6ddF&#xA;wLOJeNP2FPX6MBVFfo7T/wDlmi/4Bf6Y2i3fo7T/APlmi/4Bf6Y2trJbPTokLG1iPgOC/wBMVQ9N&#xA;O/5Yov8AgF/phSl+ufVPqiejbpE3qCrKoBpxO2wGEJCbaQ0X1KJUQIQilqACpIG+2RKCr3du88XB&#xA;JDEa15ABvwOIQlz6Lfk/DqJUeBhQ/wBMPEm1v6E1L/q5n/kQn9ceJbbGiajX4tSJHgIUH8TjxLaP&#xA;srSW3Dc5jMWp1ULSnywEoV5JFjXk3TAqD/Tmlj/j5j/4Jf64eEpp36c0r/lpj/4Jf648JWkXDPHM&#xA;nOM1XxwIX4q7FWL6KLr1bpoJFjC0LlhXap9jkyyLb+XIW4zM6ETsOLVk3LbjHiW1kPlu2mNI3RjQ&#xA;N1kGx+eHiW0RJpJvpg7SxvIUqDR1+FTx8B3zFy6XHM3Ibt+PVTgKB2VrTQrq0l9WB40ehWvxHY/P&#xA;HFpscDcRujLqpzFSOytevrFrbSTmZHEYqVAAPWncZLNlEIGVXTDDjE5CPK0DYazqd5P6KsqUUsWP&#xA;EgAfIZi6fW+JLh4a+LlajRDHHiu/ggtF81avqeomzNvJbKwYxTyIeLcd9/h+GozNEr6OvEr6MwQO&#xA;EUOQXoORGwrhS2a0269sVSOfS9ank5yTxMRsDuNq+y5KwnZYNL1aCsnrRAUo1NzQ7EUZaY2F2Q1h&#xA;pc31c2mnmOC3RvUMRFByO1agE4gAKAAk+uWjyMbO6YkRty5RkqCRt4CuarWa4xPDEfF2Wn0MZx4p&#xA;FH6JJfrA8dpMI1gRQQ/xEqNhQkNvmRo9X4oojcNOq0oxVXIrlhuFvjfC7l+snr8XwdKfY6ZnOIm0&#xA;UXmKSNZFu4uLCo2H/NGDZGyKKXiWQF3IskvP7Sigp9w/VgVLZPT5tVowa9Cxr+vJKgtS4egvFkJ5&#xA;D7JqehwhITzRf7hP+MafqGRKCmWRQ7FXYq7FXYqhdT/3kb/PscIV5rY6Fq18he2t2aMAnmaKpp2B&#xA;alfoy0kBsJQbQTLKYWjYSqaGMg8gR2phS9K8sf8AHIt/+MafqyqXNrKbZFDsVYrpk8UaX6u3FpFo&#xA;g8TvkyyKInuI2sLWJXrJGSXHhiq3TJ0hklMj8Q0bKv8ArVFOmJUu0ueOG6V5X4oFIJ69fliVKc/p&#xA;XT/9/D7j/TI0ikDrl9b3GlzwwScpZAAAKj9oE9cxtXCRxkAWXI0pAyAnYMT8o6XcaXeStcyco5kK&#xA;lt6D4W+fUkZj4xM5InhIAtmMYhjkOISJpltreWyyIzyAAdfuzZEOJSYRahZyuI45QXPQbj9eCkUi&#xA;MCoCXXtIiDmS5CqlS7ENxAHU1pSmGimmC+cfz7/K3Q9Bk1A65DqK+qtsIdNdLmX1GBbdVYBQApJJ&#xA;I+/FDJtC1vTGhFyJv3NwiSRNxbdWFQaU22OEhNJXrDLPfySQuJIm3QgFaV3pvTvml1WiyymSBY+D&#xA;uNLqscYAE0VfRpYLeO5aaURu4URrRjUg8uwOZGg0s8ZJkKaNdqIzAEd1/wBag/m/A5s3X0nVtrOl&#xA;xW8cZn3UAH4X6/dkaKKVZbu3urXnA4dQwB6ih+RpjSpe0kgYgNt/xjc/iDklQWqO7W6gmo5j9hl7&#xA;HuTiEhOdF/uE/wCMafqGAoKPlmiiXlIwRfE5FCh+lNO/5aY/+CGGlpXhnhmXlE4dfEbjAq/FXYqo&#xA;3cTSwlV3NemEK0JLkAAW4AHT4x/TFVgWQSmYWiCYjiZOS8iB2rSuKr7SJow/JQnJiQo7V+WJVXwK&#xA;7FWO+XIo3uLrmgalKcgD3PjkpMimenmC49flCnwSEL8K/Z7dsBQXns+rwrrz2IiPH1DR67UI5dPl&#xA;nPSwbHJe1/pd0NX6xireufwt6b9Vtv8AfSf8CM6C3SO+q23++k/4EY2rvqtt/vpP+BGNql6TQsL7&#xA;9yn+jk8PhX3Hh4jJJUbO+s+M0l2IooYkQmRwiqCdjU0HVjtgOyREnYIvT9Q0W8kcWEsMskYBcR05&#xA;KD0wWmWOQFkFH4sGE/m9pUd3+XmtWkCLBLfxpaSXSqgaNLqVIZJPiK1ojmu9T23yGSZjElu0+MZJ&#xA;iJNW+NfMH5Ly2EVxqtvfwQ2ttIFmtJiCYnAJYEyMKx8hVK/EUINDmNDVXtTsM3ZnCDIEAD7Px9z7&#xA;zs7Gze0gZ7OKJ2jUtEI1HElRVaEbUzNt1Nq36PsP+WaL/gF/pja279H2H/LNF/wC/wBMbW3fo+w/&#xA;5Zov+AX+mNrbv0fYf8s0X/AL/TG1tTuYYorfjEixryrRQAK/RiFS8woSSS2/gzD9RySUDq8arbKQ&#xA;W+2OrMex8TiEhN9F/uE/4xp+oYCgrfMdpNeac1tCAZZSFWpoOo64xKhiln5F1WUSfWHS247R1+Pk&#xA;f9idh/nTJmYZcTJfK2n3On2ktrcU9RH6qagg7gjISNsSU6yKHYq7FXYq7FUkvvNum2Vy1vMH9RKV&#xA;oK9ckIpASDzP+c/kfyxYC+1u6a1gZuEY4M7u9K8URAWP6h3xMaUhR8g/nr+XHnrUjpeg38jakI2m&#xA;FrPDJExRPtEMQUPy5V9sihONES9ae5+quqHbnz+Zp2OTLIplBYatBy9KWJeZ5N1O/wBK4LCEvPlJ&#xA;i/M+lz/mq1fvpmD+Qxefzcz89O72+SaiDWwABNFQbDb/AJtzNFOGS70dc/39F93/ADbjsuzvR1z/&#xA;AH9F93/NuOy7KA0zUx61JIv3/wDe9d+v+T74bC2wvz3d/VbG40i01OxbV5EV5tI9SJ7qS3ruRbvJ&#xA;A5XvUMPHMXWWYeXV2XZcwMo/nfw+/wCYY35B1DUNLvZJUT6v63FLiEBACFLUfgstwBs23xZqcWeO&#xA;GXF/C9Fr8UtRhAn9Yuvs971zTtZtJIS017C77sADxIUCpqrcTt8s20dZhkLEg8nPSZYneJYl+YPn&#xA;rSVtYtAitF1RtZLWsqMzRxrE1Fdqr8dRy2KkU6g7Zjz18CDw70PgiWnnCUAR6pHYfpecebNC0rTo&#xA;4NVkj/TRsr6K7s7bUamCN1UqlYoTF6pXxlLn3Oa3Sas+JQ5V+PwHadq8Yw2f534/Bez6T5vtrl1h&#xA;u1EEzbBwf3ZP07rmZpe1YzPDP0n7HH1PZkoC4+ofameua7o+g6VcatrN3HY6baKGuLqZuKKCQo+Z&#xA;LEAAbk7DNs6tCeXPOflLzMkz+XtYtNVFuENwLSZJTGJRyTmqkleQB6+B8Diqc4q7FVK5iaSLivWt&#xA;RhCoP6ncfy/iMNql2u28sdojOKD1AOv+ScIKQmmkQslpE7ftRpT5UyJUoySKOQUdeQ98CFP6nbf7&#xA;7GG1VI4Y468F4160wKuxV2KuxV2KuxViuo+Vre/vHuZLpoXZwGThUcQANvfJiVMhJ8yf85D3fkTX&#xA;/wAw9L8pWV7JD+hobhdRnaWOOI3cojKRLJNRA6hDz5UFaIKGuVZZkCw24ICcqkaR3lPQNH/Ka6t9&#xA;cN1PPZWTR32oXoiFWAY2xij34fHFdPRSa1Gx32wMeoM5h2+o0McWGQu+t+f4L6H/AC81/SNfsH1f&#xA;R7lLzT7pQ0M6VANGYEEEBlIIoQRUZsy6Ip99alO5Y19jT+GNK19Zn/nONKte9uIkaQEuVFeJ70xp&#xA;V+lalcXUsiXEfpNxDxruCV6E7/MZDijdA7pMTVplhYuxV8Sfmn5Q13X/AMxNa1nSJXj1y21FjD6P&#xA;qtM4SQ+i0bIvLnFGiKoWvTttXGGf1U7GWjuFjag9T/KvzevmnQJ2kgVNW0Z1sdZljKcZ5kFPrKrG&#xA;saqkprQBR0zTdqYCCJAej9Ls9DqzIGE5XIM0jkeNiymhKsv0MpU/gc1MZEcnYSiDzSCHSZdS84S3&#xA;rusdtpMaRqXNFaSVWanzAav3ZuNHphPAd6t0GpyH84DV8A5e/wDtQfnKa4vEj0uwge6mEyvcNGOS&#xA;IF3Cl/s1NfHMXTY+CRMzXRu7TyHJEY8YMjYJ25ftZdLDHGo/eq8ndUqQP9l0+7MOUABzsu3jInps&#xA;w/8APny55t86eR9Es9OvZI9Piu2i1eBY1dW4hTBNIxKsFiXlUctyRtnSaHUmWEE7kbOi1GivMYja&#xA;913/ADjf5J03y35l106d64ha2jglZywSR0kLcirrXkoagKnjQnqemXhyGXNr1uljjFjvp71dXdva&#xA;W73FzIIoIxV5G6AdMuJAFlwIQMjQ5vIZ/wA0bm51n6o7i2eSX0kEdyy1UNwDiGnKhpua098w8Wsk&#xA;T9O183f6jsfFjjfH6zGxGvx9zMfqfmP/AJbX/wCRz5srDoNkz0HWLZC2nXl6sl+rt8LMzGgFacmH&#xA;bicxzmhxVe7edJl4OPh9Kv5o/wCOfH/xlH/EWy2Ljhh/5mfnN5f/ACx0PRLjVbS5vX1P93BDa8Kh&#xA;YUQyuS7KNg4oO/tgKCznQNd0zX9FstZ0yX1rC/hSeB6UPGRQwDL1VhXcHocCo/FXYq7FXYq7FXYq&#xA;7FWmZVUsxCqoqSdgAMBIAsqA+NfJf/OP63c0muee5XutRvJGuJdPjcqvOQlmM8iUZmJNaIQPc5yP&#xA;aHtDKzHDy/nfqdvp+zhVz+T0rUfIHlvVRKmq2kd3DLu8ZDxguT/eHgwHP/KABzWT7ay0OH0kdXaZ&#xA;oQyCiGVfktonl/ydYXuh2dxILWe6ea3Wc19MuFrFyNNhSq16179+i7N7cjkAhl9M+h6H9R/Hk6bV&#xA;aAw3juHpBsZq7EEZ0VutQwKl0Qsqs5ogY0qfAYkgMhEnkqTehaxm4u54obaMj1ZZGCov+sTQD6ci&#xA;ZBREk0A8i0r85/LkHmJEsLWe5t55nhW434elu3NWRXRjxQniWHh1zT6XR48GSWSAPq+x2s8ZyRES&#xA;Rf46vYI/MvlyXj6Wq2b8yAnG4iNSTQAUbNr4ke8OuOnyDnGXyLFPMX5xeWtORotNJ1W86KkVViBr&#xA;3kI3/wBiDlOTVRjy3c3B2Vkn9XpH2/J5h5w8tWutR6lreotLDfXkLNNa2rtFDHIVpzT4m3oASaVL&#xA;VNd80MO2IzyAAbku4GgAHDdxeSeWdDX8uPNlj5001pr+y0tnbUNNLBZJLaRGjl4uAFbircuLDenX&#xA;N3j1PEakObrtV2X4cTOB5Ps0+W9Bu0S4jh4pKA6lCyghhUfCen3ZCfZuGRuq9zhw7RzRFXbx/wAx&#xA;Wupx/mbqOlaMoNpGsc09sxJ5H6vDQkkilOVFNf2mr0UGqenA9ERs5Wg1kRKUpEcXXz2FV+Pf0TC2&#xA;1LT4Glt57qGKeJ6SRPIqspp0IJzTarDPi5F3EtZhJ2nH5hfda1p8On3l5HNHOtlH6syxurEVIVAa&#xA;Hbk5CjKsemnI1RaM2vxQiTxA10Bebt+YnmpnZWu2+ou5aTTwSkDqRQo4QqzKRt1ze4YDHHhjyeSy&#xA;a/JPIJk7hMNA/NDUvLk9dEtxFZytzu7O5ka4R26D02IV4gB0VTx9svhkMeSdRrpZCDVPWLzz9ovm&#xA;jyJPdWjmG75xxXFkzfHHIWrQ0+0hVSVPf57ZblyAwLndlnjygjowjyT5JW/1ONLto5bOyYyhGMpP&#xA;AyM0apGSUBWoHLrTMXT45Sl04fteg1+fHjxD6jPkOVD+zo9mzavKvNvzG8srdX7SWbpDeyIksNy6&#xA;cmhfkAxQ9QTw6jOc7T12PT5qIO4vb4jv8no9Bn48HCecdgWYxT+r5RsQZDJJFII5CeoKhqD/AIGl&#xA;PbNp2Zqo58QlH3Op1wrNI1QO7GPzl8vaLrXlnQ49WsBexwurQt6fqNGWjCMaDcqQQSB4V7bQ188s&#xA;SOAim3s7TxyE2Lpjv/ONvkfXfKGqa/py6jPc+WGCT2sEtusaG4kPHmsvIlnWKIK4AA6Zfpc0pxuQ&#xA;otOt0fgSq7e8ZkuE7FXYq7FXYq7FXYqxvzvqDwWMVrGaG5J5kdeCUqPpJGc57R6owxDGP4+fuDse&#xA;zsQlIyPR59LeRxS8JFdV/wB+8SU+lhWn05xscRkLFe693eUrJJHIoeNg6noymo+8ZCUSDRVSpxvR&#xA;TpJGeXzQin/Ezk+cPcfv/sXomNlrWu29ssJvpWoW35VoCxIArvRQaDM09qZxtGchENEtNjJvhCT6&#xA;pb67fsz2d5c218DWC9hAkZCQR0cMpG/9CDvnS6HNPLCM95FyZeEMfDYh8vuZN5Ls9S0PRDZXd0b2&#xA;SZmeb1uTqA5JKD1HlYg1JPJ23PWlBm+wYuGO/MvO6zMJz9PIdfxuxbzZ5GghtbrUNEL2bn95cWls&#xA;pHrU24kp8bLufhaoHalMhmwkRPD8m/SakSmBMD3vOrW5uLG9huYvgubWRZY+QrR42DCoPuM1oNF6&#xA;WURKJB5FE6HH6us2gIr+9DEU2+H4ug+WY2rlWKR8mQZ/fpbPZzJcyCK3dSskp6KDtXYH9Wc5pB+9&#xA;j/WCzJANc3nGpmymvbk2sfCyeR/RibekZJoDUt29znWE77MIA8IEub3/AEDzLqN3oljcF1BkgjLA&#xA;KtOXEVpQeObnGbiC8dqMYhklHuKQ635L0XWdXm1a9Ev1244iR45Cg+BBGNl/yVwSwxJtxZYok2l3&#xA;/KrPKX++pv8Aka2R/LxY+BFIvOfkK307Rj+g0dWnkVbsSS7NGtWVaH/LAOVZsYiLDOGjlM8MBu88&#xA;XQNTErJNA8SpHJI0nHktIo2kO67bhfHMYbtWXR5cf1RIQEccksixxqXkchUUbkkmgAwuMyTyTATN&#xA;cz/sqqxj3LGp+7jkJO/7Bx+qUvKvx8nqHkeaSK/uGQDeKhr/AKwy/SfUXYdrfQPezT9IT+C/dmwd&#xA;CknmJpZjFO1PhBQ0+8ZyPtRpz6Mg5cj94/S7bszJzj8Umilu4pGKXDLCQP3Apx5D9o9yd6DOc0+u&#xA;yYARjPCTz/HJz8mCMzct1mttfavp4sLi7kFurIwQPIo+D7NDG8bfjmTi7XzCVzJmO60wwxgbiAD+&#xA;O4hH+X9Z1PRbOKzglV7aIkiEooT4jUgU+Idf5suj29njK41w/wA39vNrzaWOQ3L6meaH5htNUQqB&#xA;6Vyoq8JNdvFT3GdV2b2rj1QoemY6fqdNqdJLF5xTXNq4rsVdirsVdirsVYv540+4ngguolLrByEo&#xA;G5Aah5fLbfOZ9pNLOcYziLEbv9bs+zcoiTE9WFZxjuVnpRK5lCAORu4G5HucmDI1G0+SCj1TTFvj&#xA;HfXKWUhHG2EzKBKDQsVPLtsDUD9WdDj7DEokcdH3bfsY6kyx1Q4vx070/stOhneM+sJInYDlGQQQ&#xA;T2OZWn9lxdznY8v1usy9oEbCNHzRqIsahUFFHYZ1WDBDFEQgKiHWTmZGzzRFn/vXB/xkX/iQy0sV&#xA;Gp8cVWLp2n3dzGLu1huATuJY1f8A4kDkZQB5hnHLOP0khjGv2tnbato0UEUUEf8ApL8EVUBYIqjY&#xA;U/mzR9uisFAfiw7rsnIZGRkbO3P4sR8164LmT6jbtWCM/vWHRnHb5DNV2dpOAccuZ5O8KR2dpcXl&#xA;1Fa26F5pmCoo8T/Ad820Ykmg15JiETI8g9w0a0Flb2Vmp5CBY46+PGgr9ObuEeGIDx2bJxyMu8ql&#xA;T45JrVrP/euD/jIv/EhiVSrWrOa8sTFFvIGDAE0rTt+OU58ZlGg5eizDHks8mIm0uQaGM/Rv+rNC&#xA;NZi/nB6fhKDl0S0E8V09qEmidXSQDieSmorSlenfLMWqhI1GQJcLN2dinvKO/fyWaVBo9vqEek24&#xA;MLXBaWRgfUCABdipPOpWpXfehyzNljCPHLYBGn08cAMIb3v+CznRbWztY2WGX1JXoXYjidulBmXo&#xA;dVgntCVn5H5Ot7QGYkGcaiPj9qb25P1iL/XX9ebF1qk6h1Ktup6jK8uKOSJjIXEsoyMTY5pNrEf1&#xA;Czlu1HqJEORjrxJA96HOL7Q7CjgkJCV4zKq67+bvez9R48xA7E9UgsvNdvdzpE9uLVG+ESvLyqx+&#xA;yo+FdzmNqOzo8H7oS4vf+wO5z9nnFGzK/Kq/SmM1xdFWFrByfokkjBY/nsS3/C5qY44g+s15df1O&#xA;snKfIDfz5fr+xG6ZdXdnLb3DMPrERBcpXiSOvXscliz+FlE4dCiWPihwy7nrQNRXxz1F5h2KuxV2&#xA;KuxV2KuxV84eZPMGs6f5q1iCOX90l7cBInAYBfVbiBXcCnSmc1quzsM5m40b6bPYaaAliif6I+5D&#xA;HzxqpjKmKGp25cW/5qzEh2RijISBO347m4YgDaBvNenumDtDGsiqVEi8waHsQGow7gMCK75tAKbC&#xA;ATaEstQvrGUS2dxJbyAg8o2K9PGmTjIjkWM8UZipAFnPk3zpe3l6unakyu0gPoT0CsWArxam246Z&#xA;n6bUmR4ZOk1/Z8YR44fEM/s/97IP+Mif8SGZxdKo4qwDzT+aSWMz2uhhZrmMlXvGFY1I2+AftEeJ&#xA;2+eY2XUVsHGyZ62Dz17yS+mWfVHeee6crFMxYtVRUr14hadqfqzBnIk3bm6HRjIOLJyPLzr9CpdX&#xA;NvCKKeUgNCoysQt3Wo7Whh2+qXd+1N/y6uHm84WldlCSkL/zzbMnTRAmHSZu08medHaPd+vve1W/&#xA;+9EX+uv682TBTxVWs/8AeyD/AIyJ/wASGJVQPTEjZIY6ylWKsKEGhGeXzgYkxPMPbxkJCxyK0gEE&#xA;EVB6jBGRBsMkHBo2l29ybqG2RLk1rNuW3JJ3PuxzJya3LMVKVhrGKINgbo0Eggg0I6EZjRkQbGxZ&#xA;kAiinOk6h6lxDFKaSc14t47/AK87Dsrtjxax5Pr6Hv8A2vO6/s7gucPp7u79iLzoXUJF5lvbCS2k&#xA;0w3USXkykJEWANSpAr4bnND2/L91Gt+GYJ91F3HY8ZRyjIR6R+sJDpmk3NtCFcN6ppzrIWQU2HEE&#xA;0XbwGaiPaWHh5/Y9Ll1GMyMgead2Eck80dlAjvcGoVeDAEgVNGIC9vHNJPHPPlJgL4jsNrdVlzxs&#xA;k7D3Mp0jyZePOkuoARQqQxiqGZqdjTYDNxoPZ7IZCWX0xHTqXXZ+0IgVDcs2ztHSuxV2KuxV2Kux&#xA;VLNSOqC4DQE/VgnxcaVDV3rXfphFJYZrX5eaT5il/SckUqT3Kq5uYCF5inwsVYMvT2ynJp4SNnm5&#xA;2n7QyYhwjcebDNb/ACwsdPt7m4GqmNbZWZ45Yqn4RWnJWG/0Zjz0YAu3Y4O1pTkI8O582F21rp89&#xA;1FD9baFJGVWlmj4qoJAJ+FnO2YYAdvKUgLp2sNZHUZhZQPb2yEIkUhq44KFYt4FmBJHbGVXsuK+E&#xA;cRsoe1uZba5iuIjSSF1kQ+6mowRNG2U4CQIPIvd9JuI7lrO4jNY5jHIh9moRm9BsW8XOJiSD0Urh&#xA;isEjKaEIxB9wMJYl835qXVqjzs6xLQARLxTbfflU1Pf4yMADeNRMCgelfj5rreS2EpN1G0qMCPgf&#xA;gwJ/aqQ2Mga2YRkLuVl7D5J8j6No7jUDdSXeoSQBo1K+mkayjw3qe1a/Rmww4eHfq5WPEBuzG3/3&#xA;oi/11/Xl7cp4qrWf+9kH/GRP+JDEqpxOEkViOQHbFW1Gm6kyFoPikbgrn4TXlxqSpzC1PZ+HNvOI&#xA;J7+rkYdXlxbROyV6hbWFuEMcbsHrWrUpTw2P45zPa3Z+LTCJiCeK+v7Hedn6vJmsGtvJDxNZMkka&#xA;honkAVXkIddjypsqla065qIHGQQNie/f9Ar3ufITBB513IaSN43KOOLLsQcolEg0W4EEWGwnGB7l&#xA;3EUUe4djSpG9B8up8MnDGSLHw8z5MZSF1zYrrvn++njNpp7GGIfC90NpH/1f5R+Odlg1WbwgJ/V3&#xA;uBHszEJmXTu6Me0t1muxazp6qXrrG7bGRXZqLIhNPiBPSu/T3wR3PvcvIKFjopDUL+HlFFeSiMEq&#xA;ODuFIHgKjKJafGTZjE/Bnwg9GYfl1Zy3XnCyeG49XnbyPWVyWVxHxkU0qR8RqPbM3SY4xmKGzre0&#xA;pfuSCOr3mxglgtI4pX9SRBRn8d69/DNoXmFfArsVdirsVdirsVQmsTejpN7L/JBIw+YQ0wjmoVNP&#xA;h9GwtoaU9KJEp/qqBgKvHfze1b0ZH02NvjuZWkmA/wB9o2wPzb9WYusyVER73ddkYLkZnp97y/Nc&#xA;9Ci9RKymG6B+O4jDTL3EikoxPjz486+J9slLva8e1juQmRbHrv5a3v1nR7JSavbTei30MGX/AIVh&#xA;m20srx+55btPHw5j57p4QCCCKg7EHMlwHza6FHZD1UkH6M1TrGsCHYq+hLFPSe1QmtbVVr4lKf8A&#xA;NWbaPJ2Y5Jpb/wC9EX+uv68UqeKq1n/vZB/xkT/iQxKqDMFUsegFfuxVrQ1Kiyr1LIx/2RB/jiVK&#xA;C1cfuEPg1PvBznvaOP7mJ/pfoLt+xpfvCP6P6Uqzjno0bax/Wl/ekssA2VaBmBqePI+4+jNpodEd&#xA;TCR646277va/g4Gq1IwyH9P7OW7HfPE90ujcypSKWRYVA2VVFW4gdf2cyNDpchl4shURsPx+N/Nu&#xA;hlx8XADcubz7Nu3pzBpF9p9/60yAxQQvcxXUZEkJ4oTEwkX4d5OI61rt1ywQINuNLNGQocyarr5/&#xA;Yk2VuSzf8nCB54tyenozCvuUzK0g9XwdX2uaw/F9BZsXmHYq7FXYq7FXYq7FUr8zDno00IJBnaKE&#xA;U6/vJVT9Rwx5pDX6Cm/6u19/wcX/AFTxtbeL+c5tFvPM0to7PcejI8Mt/Iw5FgSKAqFFA3c5p9Zq&#xA;omXCBy6vZdldm5I4eOR+rcR/SlD+SLqaThYzK7EErHL8JNOwIqCfuyGIGZoc2efKMUeKXJMvOvly&#xA;Ox0LTZIQCbMehOw/a5/Fy/4Ov35m6nDwwFdHV9n6szyyB/i3H49zCMwXcvQPyjvKahPZk/aeKZB8&#xA;m4t+tcz9FLmHSds49oy+DOs2DonjXnfyhFo97G8dy0ovGlk4sgHH4gabHf7Wa/PDhPvZafs3xbPF&#xA;XwY7FpjSVpIBT2zHMm/+RD/O+z9qceXfIuoa7dPb21xFGyKGLScgNzTsCcsxRMzs4uo7MliAJIL1&#xA;9Lb6vNZ1dnpWM8mJH2K7V/1c2o5JCaW/+9EX+uv68CqeKq1n/vZB/wAZE/4kMSqCvm42cx/yGA+Z&#xA;FMIVuy0qxM8CPHUFkVvibfcA9DiSqFu7C1SEsgEZqKuxYgfdy/Vmm7dhxac78iHY9lyrN8Cgfqw7&#xA;TRkeNSP1gZxXheYel8TyKN0f7MvzH8c6b2a+mfw/S6TtrnH4ofzfYm98u3kSjlIi+qg71jPI0+YB&#xA;GdDqI8UC6/QZODNE/D5vHs0z1qZafcquk6rbN1ljidCfFJlBp8w2WwnUZDvcbLjvJCXdf2hLcqcl&#xA;n/5RQRjUZ70/btprRA3gszsjeHtmdouZdL2yfTEe971ma887FXYq7FXYq7FXYqlmt/FJpsPeS8jN&#xA;PaJWk/40whITCaP1YXj5MnNSvNDRhUUqD45EiwmMqILxDXvIiaXDqQthJqEwkVLXY80UNVmIX7Rp&#xA;tsM1WXQcEJEeo9PJ7HSdvHNlgJEY478XcT09zGNP12/sSoU8whqgbqpHgf4ZroZTA2Oj0Go0ePKC&#xA;D1eg3WqWF35Zk1CSJZrdouZgkAZeanZWB8HGdDLPGWEz6V+PteDx6KcNWMN0eLn5d/yYXZ6poqop&#xA;a2SGQdeMakV8QQK5oRleynoZdNwyTSPPmlwXdulzUQh1LTIhHGhG7KOv0ZscPaQ5S+botX7OzIMs&#xA;fPuJ+4/r+bJIbiCeFZoZFkicVR1NQc2niR4eK9nmp4ZxlwkES7mJectKOo3MYvI3hWIMLZgRuGpU&#xA;13B6Zymv7VyjLsKh08/N6LQaSAhzuXXyS+08iRXFsPqqTmSh+NFLg03+IAfqpmJi7RzylYjxDyDl&#xA;zhjjzNJ75C0UabqBLSepLKtGoKKKGu3fNt2V2h4uUxqhwus7Vw1jB808vdlhf+SVCfpPH/jbOkDo&#xA;Ubb/AO9EX+uv68CqeKq1n/vZB/xkT/iQxKoDUN7cJ/vx0X72GEKj7P8A3sg/4yJ/xIYCqEuWjW3k&#xA;eUco0UswPgor/DIZccZxIkLiyjkMDxA0XicvnHXZYnjMwUv+2oKsPlQ7ZofyeH+aPkxl21qDHhv4&#xA;9Wafl/5wtJLNdNviyXUVf9KepR1qSOb/ALJANN82GlOLFsAImX2tcNVPIAJEnhZ/bcJJYujo7L7g&#xA;gnNi2W80/wCVb6nJf3IDpBYRuxildhVk6rTelabfER7Zz2vkcAur7t6+38W9Ph7QhKI/ndXaz5e0&#xA;/TdBuHgQtN8AeZzVqF16dh9GaHRdo5MucAn0m9nJjMykGHZ0DkPQvypYCy8w0Pxxw286j/jDKX9v&#xA;DM7Rcy6TtkbR+L3cEEAg1B6HM1592KuxV2KuxV2KuxVJtYlnXWNMEEBuHjWeUxhlXYKsdatt/uzJ&#xA;DkkIj9Iav/1a2/5HRf1wUFYrdXN6dVdjaEP61SnNOvLpWuT6MmL6n5ZstWupzLGbW6Kq6SJQ16gl&#xA;gNm6fPMTUaKGTflLvdtoO2M2n2+qHcf0dztK8rXi6Bc6NPMivcTfu5VqyhSUoafD3U5Vi0khhljJ&#xA;5n9Tk6rtbHLVQzxBqMdx57/rQ48iI2krZNcqsyzmYXKxVPErx4Ech3365D+Tf3fDe93dN3+iEjP4&#xA;gieHhrh4ut8+SFH5akmg1AsT0VYKknwH7zKJ9l1EniuvL9rlR9qLNeH/ALL/AI6us9Hv7S3EEUU3&#xA;ANzoa/a/mp07ZzuTT6uexjOu6i25ddhnLiMo3y+CKNpqUzg3KysqDq/I0HhvlGXSairlGfyLGGpw&#xA;8oyj9iNiu7lIDbxkek3VOCmtfmK5jwyZAOAfKmUoQJ4j96L0mG9iu45o4OZ6BWbhWvzB/Vm/7D0G&#xA;WOTxJjhjXX9Tqe1NVjlDgibNrr2W8NrJyt1VQAxYSVpxNenH2zrXQpnbGs8RH8y/rwKsxVWs/wDe&#xA;yD/jIn/EhiVS6/8AULW6RgFzJyAbYfCpO9K4QqtanVfrMPFIOXNeNWela9/hxVCXlvqF1Zz2rCJF&#xA;njeJmVm5AOpUkVUiu+AixSCLFMFf8p2a6ihjvxH6xITknPceJHD9WYh0g6Fxjpe4oK4/KnX46mGe&#xA;3mHhydG+4rT8cgdLJgdNJk35eaT5i0OS6i1KLjZjjLAPURl5qTy4gEkVHXbJR4scJEjkLb9NjkDR&#xA;5IbVPOMLXX1XTo21LUH2WOHdB82FentnGjQ6jWZPEy+m/n7gHcZNfjwjgxjil9nxKW6j5d8yXmkT&#xA;6vqt0qJAnqRafFXiPiC/F22r7/POhwdlQwQJAo/a1aLNlnqIymfh05MRyL1bO/yl+vTalq1natGP&#xA;XsJDKJVJBQMqniVK0b48zNEfUXUdsD92D/Se6aTN6+lWc1amSCNj8yoJzYF5sorArsVdiqV/WJv5&#xA;z9+SpLvrE385+/Gld9Ym/nP340qXiaV9fZuZrDaha16epITT/knh6Kj2uLmnwua+5OClSqTTrhrs&#xA;3BYGr8yO/WuFNpbJpk6apChIrNE4HzRlP/G2FbRsWl3CSo5oQrAn6DitrP0TcYra+DTp4po5DuEY&#xA;MQPY1xW1P9Fz/wCYOK2oahZT29jcSn9mNgNj1IoP14rarHpM6Rqv8oA6HtitqsNhPHKj0qFNSKEf&#xA;wxW0PcaVdNbyrT7SMO/cfLFba020uHt7W4AqpVH7+APhiVtV/Rl14D8f6Yra+CwuY5o5CtQjBqb9&#xA;jXwxW0DLp9wdSgip8SxySd+lVXw98KbR0FhcxzxyFahGDEb9jXwwItZ+jLrwH4/0xW0NdWNxBcWU&#xA;zAfDcIvf9oEeGFbRP6LuvAfj/TAttrpM5IEiK8ZPxodwR3HTAaIpbS+z8q2ujWcgsbaK3jRSzlal&#xA;jxFfiY1ZvpyMMcY8kRAGwam0RZNAa2u5FhguLcIzVAILAHYEdcq1WbHCBOSXDFyNOZCYMRZDCrj8&#xA;v9Bj4mK8mmr9pQQCKfOMCh9jnF6vtbhl+6MZR8wb/U9Ji1GQj1Ciyr8vvKum6bdS6jatKLlVMNWc&#xA;FeL0PQAfy+ObrsHUHPGUpfUDTrO1M8jUenNlegTyrpUMYcj0S8VK9PTcr4nwzoSHTFMPrE385+/B&#xA;Su+sTfzn78aV31ib+c/fjSrMVaxVafV7BfvP9MKoWG2uI725uCUPriMKN9ggP8WOKogm48F/HFWq&#xA;3PguKoae3u5Lq2nHEegXqPEOtPHxphVEVuvAYFdW68B+GKtVuvAfhirq3XgPwxVQvra6urZoDRQx&#xA;Qk7HZWDEfTTCquTd+H6sCtVu/D9WFXVu/D9WKqFhbXVraR29eQjFAaAbV2xVXrd+H6sVdW78P1Yq&#xA;oC2uvrxuq7+kIgtBt8RYn9WKq9bvw/VirYN34fqwKoXttdXMSpspSSORW2O8bhvH2wqr1uvAfhgV&#xA;1brwH4Yqp3UNxcW0tu3wrKjIxFK0YUOFXn+vT+d7nWLi20/QZJYoG9KC4lkCRMqgAFeXBaHr9rOX&#xA;1vZMtTnM5SlXQV09/nzcrHr5Y48MYfG0MnlP80Lz7cllpynqK82/ASj8cOL2exDmCfef1MZ6/US6&#xA;iPuH62WeTfLWu6HHdfpDUv0g9yUKoVKrGU5cuO/7XIdh0zdaPRxwAiIq+5xzKcjcjxJ9a20tusir&#xA;QiSR5TU9C55ED2rmYquDP3C/jiq4ep3A+gnFV2BXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:fb03ec38-63a6-6948-810a-e7ff35be3c67"
    stRef:documentID="xmp.did:fb03ec38-63a6-6948-810a-e7ff35be3c67"
    stRef:originalDocumentID="uuid:9E3E5C9A8C81DB118734DB58FDDE4BA7"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:70f8aa99-76da-7d40-aa1a-1c7a0e09fb88"
      stEvt:when="2021-11-02T18:45:28+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:fb03ec38-63a6-6948-810a-e7ff35be3c67"
      stEvt:when="2022-04-21T17:39:41+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="converted"
      stEvt:parameters="from application/postscript to application/vnd.adobe.illustrator"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:68184791-c627-1340-a204-7e48a1c66557"
      stEvt:when="2022-04-21T17:39:43+03:00"
      stEvt:softwareAgent="Adobe Illustrator 24.2 (Windows)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="607.717285"
    stDim:h="400.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                 
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1  -1  scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
607.717 400 li
607.717 0 li
cp
clp
607.717 400 mo
0 400 li
0 0 li
607.717 0 li
607.717 400 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
389.495 81.1157 mo
354.051 81.1157 li
354.051 69.0063 li
354.051 68.0889 354.794 67.3457 355.711 67.3457 cv
387.835 67.3457 li
388.752 67.3457 389.495 68.0889 389.495 69.0063 cv
389.495 81.1157 li
cp
.886275 .87451 .898039 rgb
f
440.989 87.4917 mo
306.277 87.4917 li
304.517 87.4917 303.089 86.0645 303.089 84.3037 cv
303.089 82.543 304.517 81.1157 306.277 81.1157 cv
440.989 81.1157 li
442.75 81.1157 444.177 82.543 444.177 84.3037 cv
444.177 86.0645 442.75 87.4917 440.989 87.4917 cv
cp
.835294 .807843 .847059 rgb
f
349.051 110.986 mo
341.069 110.986 li
339.731 110.986 338.646 109.901 338.646 108.563 cv
338.646 86.667 li
338.646 85.3286 339.731 84.2437 341.069 84.2437 cv
349.051 84.2437 li
350.389 84.2437 351.474 85.3286 351.474 86.667 cv
351.474 108.563 li
351.474 109.901 350.389 110.986 349.051 110.986 cv
cp
.886275 .87451 .898039 rgb
f
347.356 88.2651 mo
342.029 88.2651 li
342.029 77.0698 li
347.356 77.0698 li
347.356 88.2651 li
cp
f
346.714 79.3506 mo
342.672 79.3506 li
341.686 79.3506 340.886 78.5508 340.886 77.564 cv
340.886 76.5776 341.686 75.7778 342.672 75.7778 cv
346.714 75.7778 li
347.7 75.7778 348.5 76.5776 348.5 77.564 cv
348.5 78.5508 347.7 79.3506 346.714 79.3506 cv
cp
.564706 .639216 .552941 rgb
f
340.77 96.3818 mo
340.603 96.3818 340.467 96.2461 340.467 96.0791 cv
340.467 88.8887 li
340.467 88.7217 340.603 88.5859 340.77 88.5859 cv
340.937 88.5859 341.072 88.7217 341.072 88.8887 cv
341.072 96.0791 li
341.072 96.2461 340.937 96.3818 340.77 96.3818 cv
cp
1 1 1 rgb
f
411.404 110.772 mo
404.324 110.772 li
399.109 110.772 394.882 106.545 394.882 101.33 cv
394.882 94.2505 li
394.882 89.0356 399.109 84.8081 404.324 84.8081 cv
411.404 84.8081 li
416.619 84.8081 420.847 89.0356 420.847 94.2505 cv
420.847 101.33 li
420.847 106.545 416.619 110.772 411.404 110.772 cv
cp
.886275 .87451 .898039 rgb
f
410.753 93.2686 mo
404.976 93.2686 li
404.976 80.019 li
410.753 80.019 li
410.753 93.2686 li
cp
f
411.009 82.1953 mo
404.72 82.1953 li
403.46 82.1953 402.439 81.1743 402.439 79.915 cv
402.439 78.6553 403.46 77.6348 404.72 77.6348 cv
411.009 77.6348 li
412.269 77.6348 413.289 78.6553 413.289 79.915 cv
413.289 81.1743 412.269 82.1953 411.009 82.1953 cv
cp
.694118 .654902 .717647 rgb
f
397.049 100.322 mo
396.882 100.322 396.746 100.186 396.746 100.019 cv
396.746 93.2686 li
396.746 93.1016 396.882 92.9658 397.049 92.9658 cv
397.216 92.9658 397.352 93.1016 397.352 93.2686 cv
397.352 100.019 li
397.352 100.186 397.216 100.322 397.049 100.322 cv
cp
1 1 1 rgb
f
380.961 110.208 mo
373.882 110.208 li
368.667 110.208 364.439 105.98 364.439 100.766 cv
364.439 93.686 li
364.439 88.4712 368.667 84.2437 373.882 84.2437 cv
380.961 84.2437 li
386.176 84.2437 390.403 88.4712 390.403 93.686 cv
390.403 100.766 li
390.403 105.98 386.176 110.208 380.961 110.208 cv
cp
1 .737255 .521569 rgb
f
380.311 92.7041 mo
374.532 92.7041 li
374.532 79.4546 li
380.311 79.4546 li
380.311 92.7041 li
cp
f
380.566 81.6309 mo
374.276 81.6309 li
373.018 81.6309 371.996 80.6099 371.996 79.3506 cv
371.996 78.0908 373.018 77.0698 374.276 77.0698 cv
380.566 77.0698 li
381.825 77.0698 382.847 78.0908 382.847 79.3506 cv
382.847 80.6099 381.825 81.6309 380.566 81.6309 cv
cp
.564706 .639216 .552941 rgb
f
366.605 99.7573 mo
366.438 99.7573 366.303 99.6216 366.303 99.4546 cv
366.303 92.7041 li
366.303 92.5371 366.438 92.4014 366.605 92.4014 cv
366.772 92.4014 366.908 92.5371 366.908 92.7041 cv
366.908 99.4546 li
366.908 99.6216 366.772 99.7573 366.605 99.7573 cv
cp
1 1 1 rgb
f
441.902 116.071 mo
307.19 116.071 li
305.43 116.071 304.003 114.644 304.003 112.883 cv
304.003 111.122 305.43 109.695 307.19 109.695 cv
441.902 109.695 li
443.663 109.695 445.091 111.122 445.091 112.883 cv
445.091 114.644 443.663 116.071 441.902 116.071 cv
cp
.835294 .807843 .847059 rgb
f
134.495 81.5024 mo
171.074 81.5024 li
171.074 71.3062 li
171.074 68.8013 169.044 66.771 166.539 66.771 cv
139.03 66.771 li
136.526 66.771 134.495 68.8013 134.495 71.3062 cv
134.495 81.5024 li
cp
.780392 .74902 .807843 rgb
f
177.164 81.5024 mo
202.33 81.5024 li
202.33 70.5327 li
202.33 68.4551 200.646 66.771 198.568 66.771 cv
180.925 66.771 li
178.848 66.771 177.164 68.4551 177.164 70.5327 cv
177.164 81.5024 li
cp
1 .737255 .521569 rgb
f
121.792 87.105 mo
265.656 87.105 li
267.204 87.105 268.458 85.8511 268.458 84.3037 cv
268.458 82.7563 267.204 81.5024 265.656 81.5024 cv
121.792 81.5024 li
121.792 87.105 li
cp
.866667 .843137 .878431 rgb
f
120.122 115.685 mo
278.112 115.685 li
279.66 115.685 280.914 114.43 280.914 112.883 cv
280.914 111.336 279.66 110.082 278.112 110.082 cv
120.122 110.082 li
120.122 115.685 li
cp
f
119.127 144.264 mo
290.25 144.264 li
291.796 144.264 293.051 143.009 293.051 141.462 cv
293.051 139.915 291.796 138.661 290.25 138.661 cv
119.127 138.661 li
119.127 144.264 li
cp
f
246.875 92.2148 mo
246.817 95.8828 249.744 98.9033 253.412 98.9609 cv
257.081 99.0181 260.101 96.0913 260.158 92.4233 cv
260.216 88.7549 257.289 85.7349 253.621 85.6772 cv
249.953 85.6196 246.932 88.5464 246.875 92.2148 cv
cp
.564706 .639216 .552941 rgb
f
247.527 109.991 mo
257.065 110.022 li
257.582 110.024 258.016 109.657 258.068 109.174 cv
259.573 95.2842 li
259.633 94.729 259.17 94.2461 258.576 94.2441 cv
246.12 94.2036 li
245.525 94.2017 245.059 94.6816 245.115 95.2373 cv
246.529 109.137 li
246.578 109.62 247.01 109.99 247.527 109.991 cv
cp
.866667 .843137 .878431 rgb
f
249.638 109.999 mo
259.176 110.029 li
259.693 110.031 260.127 109.664 260.18 109.181 cv
261.684 95.291 li
261.744 94.7358 261.281 94.2529 260.687 94.251 cv
248.23 94.2104 li
247.636 94.2085 247.17 94.6885 247.226 95.2441 cv
248.64 109.144 li
248.689 109.627 249.121 109.997 249.638 109.999 cv
cp
.933333 .92549 .945098 rgb
f
243.934 138.661 mo
250.646 138.661 li
250.646 125.717 li
250.646 123.863 249.143 122.361 247.29 122.361 cv
245.436 122.361 243.934 123.863 243.934 125.717 cv
243.934 138.661 li
cp
.866667 .843137 .878431 rgb
f
250.646 138.661 mo
257.357 138.661 li
257.357 125.717 li
257.357 123.863 255.855 122.361 254.001 122.361 cv
252.148 122.361 250.646 123.863 250.646 125.717 cv
250.646 138.661 li
cp
f
230.495 138.661 mo
237.207 138.661 li
237.207 125.717 li
237.207 123.863 235.705 122.361 233.851 122.361 cv
231.998 122.361 230.495 123.863 230.495 125.717 cv
230.495 138.661 li
cp
f
252.691 123.602 mo
255.753 123.602 li
255.753 120.54 li
252.691 120.54 li
252.691 123.602 li
cp
f
245.758 123.602 mo
248.821 123.602 li
248.821 120.54 li
245.758 120.54 li
245.758 123.602 li
cp
f
232.32 123.892 mo
235.382 123.892 li
235.382 120.83 li
232.32 120.83 li
232.32 123.892 li
cp
f
252.667 121.257 mo
255.776 121.257 li
256.172 121.257 256.493 120.936 256.493 120.54 cv
256.493 120.144 256.172 119.823 255.776 119.823 cv
252.667 119.823 li
252.271 119.823 251.95 120.144 251.95 120.54 cv
251.95 120.936 252.271 121.257 252.667 121.257 cv
cp
f
245.828 121.257 mo
248.937 121.257 li
249.333 121.257 249.653 120.936 249.653 120.54 cv
249.653 120.144 249.333 119.823 248.937 119.823 cv
245.828 119.823 li
245.432 119.823 245.11 120.144 245.11 120.54 cv
245.11 120.936 245.432 121.257 245.828 121.257 cv
cp
f
232.297 121.546 mo
235.406 121.546 li
235.802 121.546 236.123 121.226 236.123 120.83 cv
236.123 120.434 235.802 120.113 235.406 120.113 cv
232.297 120.113 li
231.901 120.113 231.58 120.434 231.58 120.83 cv
231.58 121.226 231.901 121.546 232.297 121.546 cv
cp
f
143.641 109.939 mo
150.353 109.939 li
150.353 96.9951 li
150.353 95.1416 148.851 93.6392 146.997 93.6392 cv
145.144 93.6392 143.641 95.1416 143.641 96.9951 cv
143.641 109.939 li
cp
f
150.353 109.939 mo
157.065 109.939 li
157.065 96.9951 li
157.065 95.1416 155.563 93.6392 153.709 93.6392 cv
151.855 93.6392 150.353 95.1416 150.353 96.9951 cv
150.353 109.939 li
cp
f
130.203 109.939 mo
136.915 109.939 li
136.915 96.9951 li
136.915 95.1416 135.413 93.6392 133.559 93.6392 cv
131.706 93.6392 130.203 95.1416 130.203 96.9951 cv
130.203 109.939 li
cp
f
152.398 94.8804 mo
155.46 94.8804 li
155.46 91.8184 li
152.398 91.8184 li
152.398 94.8804 li
cp
f
145.466 94.8804 mo
148.528 94.8804 li
148.528 91.8184 li
145.466 91.8184 li
145.466 94.8804 li
cp
f
132.028 95.1699 mo
135.09 95.1699 li
135.09 92.1079 li
132.028 92.1079 li
132.028 95.1699 li
cp
f
152.375 92.5352 mo
155.484 92.5352 li
155.88 92.5352 156.201 92.2144 156.201 91.8184 cv
156.201 91.4224 155.88 91.1016 155.484 91.1016 cv
152.375 91.1016 li
151.979 91.1016 151.658 91.4224 151.658 91.8184 cv
151.658 92.2144 151.979 92.5352 152.375 92.5352 cv
cp
f
145.535 92.5352 mo
148.644 92.5352 li
149.04 92.5352 149.361 92.2144 149.361 91.8184 cv
149.361 91.4224 149.04 91.1016 148.644 91.1016 cv
145.535 91.1016 li
145.139 91.1016 144.818 91.4224 144.818 91.8184 cv
144.818 92.2144 145.139 92.5352 145.535 92.5352 cv
cp
f
132.004 92.8247 mo
135.113 92.8247 li
135.509 92.8247 135.83 92.5039 135.83 92.1079 cv
135.83 91.7119 135.509 91.3911 135.113 91.3911 cv
132.004 91.3911 li
131.608 91.3911 131.288 91.7119 131.288 92.1079 cv
131.288 92.5039 131.608 92.8247 132.004 92.8247 cv
cp
f
170.082 109.939 mo
176.793 109.939 li
176.793 96.9951 li
176.793 95.1416 175.291 93.6392 173.438 93.6392 cv
171.584 93.6392 170.082 95.1416 170.082 96.9951 cv
170.082 109.939 li
cp
f
176.793 109.939 mo
183.505 109.939 li
183.505 96.9951 li
183.505 95.1416 182.002 93.6392 180.149 93.6392 cv
178.296 93.6392 176.793 95.1416 176.793 96.9951 cv
176.793 109.939 li
cp
f
156.643 109.939 mo
163.355 109.939 li
163.355 96.9951 li
163.355 95.1416 161.853 93.6392 159.999 93.6392 cv
158.146 93.6392 156.643 95.1416 156.643 96.9951 cv
156.643 109.939 li
cp
f
178.838 94.8804 mo
181.9 94.8804 li
181.9 91.8184 li
178.838 91.8184 li
178.838 94.8804 li
cp
f
171.906 94.8804 mo
174.968 94.8804 li
174.968 91.8184 li
171.906 91.8184 li
171.906 94.8804 li
cp
f
158.468 95.1699 mo
161.53 95.1699 li
161.53 92.1079 li
158.468 92.1079 li
158.468 95.1699 li
cp
f
178.815 92.5352 mo
181.924 92.5352 li
182.32 92.5352 182.641 92.2144 182.641 91.8184 cv
182.641 91.4224 182.32 91.1016 181.924 91.1016 cv
178.815 91.1016 li
178.419 91.1016 178.098 91.4224 178.098 91.8184 cv
178.098 92.2144 178.419 92.5352 178.815 92.5352 cv
cp
f
171.975 92.5352 mo
175.084 92.5352 li
175.48 92.5352 175.801 92.2144 175.801 91.8184 cv
175.801 91.4224 175.48 91.1016 175.084 91.1016 cv
171.975 91.1016 li
171.579 91.1016 171.258 91.4224 171.258 91.8184 cv
171.258 92.2144 171.579 92.5352 171.975 92.5352 cv
cp
f
158.445 92.8247 mo
161.553 92.8247 li
161.949 92.8247 162.271 92.5039 162.271 92.1079 cv
162.271 91.7119 161.949 91.3911 161.553 91.3911 cv
158.445 91.3911 li
158.049 91.3911 157.728 91.7119 157.728 92.1079 cv
157.728 92.5039 158.049 92.8247 158.445 92.8247 cv
cp
f
134.495 138.661 mo
141.207 138.661 li
141.207 125.717 li
141.207 123.863 139.705 122.361 137.851 122.361 cv
135.998 122.361 134.495 123.863 134.495 125.717 cv
134.495 138.661 li
cp
f
136.32 123.892 mo
139.382 123.892 li
139.382 120.83 li
136.32 120.83 li
136.32 123.892 li
cp
f
136.297 121.546 mo
139.406 121.546 li
139.802 121.546 140.123 121.226 140.123 120.83 cv
140.123 120.434 139.802 120.113 139.406 120.113 cv
136.297 120.113 li
135.901 120.113 135.58 120.434 135.58 120.83 cv
135.58 121.226 135.901 121.546 136.297 121.546 cv
cp
f
152.162 138.5 mo
171.495 138.5 li
169.495 119.167 li
154.162 119.167 li
152.162 138.5 li
cp
1 .737255 .521569 rgb
f
169.495 119.167 mo
170.835 116.767 li
171.529 115.522 170.629 113.99 169.205 113.99 cv
154.049 113.99 li
152.52 113.99 151.639 115.728 152.544 116.961 cv
154.162 119.167 li
169.495 119.167 li
cp
f
158.455 133.87 mo
165.202 133.87 li
165.97 133.87 166.592 133.248 166.592 132.479 cv
166.592 125.732 li
166.592 124.965 165.97 124.343 165.202 124.343 cv
158.455 124.343 li
157.688 124.343 157.065 124.965 157.065 125.732 cv
157.065 132.479 li
157.065 133.248 157.688 133.87 158.455 133.87 cv
cp
.564706 .639216 .552941 rgb
f
222.654 110.187 mo
241.987 110.187 li
239.987 90.8535 li
224.654 90.8535 li
222.654 110.187 li
cp
1 .737255 .521569 rgb
f
239.987 90.8535 mo
241.326 88.4531 li
242.021 87.2085 241.121 85.6763 239.696 85.6763 cv
224.541 85.6763 li
223.012 85.6763 222.131 87.4146 223.036 88.6475 cv
224.654 90.8535 li
239.987 90.8535 li
cp
f
228.947 105.557 mo
235.694 105.557 li
236.461 105.557 237.084 104.934 237.084 104.167 cv
237.084 97.4194 li
237.084 96.6514 236.461 96.0293 235.694 96.0293 cv
228.947 96.0293 li
228.179 96.0293 227.557 96.6514 227.557 97.4194 cv
227.557 104.167 li
227.557 104.934 228.179 105.557 228.947 105.557 cv
cp
.564706 .639216 .552941 rgb
f
320.197 118.326 mo
320.197 118.326 317.77 130.31 320.762 135.397 cv
323.754 140.485 327.499 138.159 327.499 138.159 cv
322.76 116.914 li
320.197 118.326 li
cp
0 0 0 rgb
f
338.8 116.258 mo
338.8 116.258 344.34 122.129 341.673 130.725 cv
339.006 139.32 331.575 138.878 331.575 138.878 cv
331.004 119.462 li
338.8 116.258 li
cp
f
265.925 138.125 mo
265.925 138.125 267.54 134.485 273.901 134.914 cv
280.263 135.341 283.395 149.705 283.395 149.705 cv
276.362 158.709 li
276.362 158.709 258.859 150.889 262.109 143.802 cv
265.359 136.715 265.925 138.125 265.925 138.125 cv
cp
.968627 .560784 .466667 rgb
f
311.678 189.583 mo
311.678 189.583 301.021 210.939 292.33 249.453 cv
284.404 284.582 282.696 313.637 282.696 313.637 cv
316.981 313.637 li
316.981 313.637 320.795 284.994 321.812 273.662 cv
322.827 262.329 326.207 247.158 326.207 247.158 cv
326.207 247.158 330.912 312.53 332.034 313.637 cv
333.156 314.743 365.977 313.881 365.625 312.38 cv
365.273 310.878 353.524 202.205 352.636 195.057 cv
349.904 173.084 311.678 189.583 311.678 189.583 cv
cp
.313726 .470588 .286275 rgb
f
326.207 247.474 mo
326.043 247.474 325.905 247.348 325.893 247.183 cv
325.882 247.041 324.813 232.958 324.501 226.712 cv
324.236 221.371 324.188 218.405 324.18 217.639 cv
313.254 212.6 li
313.096 212.527 313.026 212.34 313.1 212.182 cv
313.173 212.023 313.359 211.953 313.518 212.027 cv
324.625 217.149 li
324.736 217.2 324.809 217.312 324.809 217.435 cv
324.809 217.464 324.822 220.448 325.132 226.681 cv
325.442 232.919 326.511 246.993 326.521 247.134 cv
326.535 247.308 326.404 247.46 326.231 247.473 cv
326.207 247.474 li
cp
.968627 .701961 .411765 rgb
f
323.63 138.332 mo
322.213 141.541 li
312.036 165.82 li
310.121 192.964 li
310.121 192.964 315.152 198.563 330.919 199.306 cv
346.686 200.049 352.048 193.562 352.048 193.562 cv
352.048 193.562 348.635 148.679 344.758 142.907 cv
343.035 140.342 335.733 139.683 335.733 139.683 cv
323.63 138.332 li
cp
1 .682353 .392157 rgb
f
282.696 145.389 mo
271.795 161.347 li
271.795 161.347 282.662 176.817 300.835 176.372 cv
322.788 175.833 324.731 156.659 324.731 156.659 cv
322.917 141.448 li
322.917 141.448 316.89 141.979 311.985 145.956 cv
308.508 148.775 293.352 153.31 282.696 145.389 cv
cp
f
299.95 150.989 mo
299.552 152.649 299.138 155.082 299.667 156.03 cv
299.766 156.207 299.891 156.313 300.048 156.354 cv
300.188 156.392 300.238 156.355 300.273 156.318 cv
300.778 155.816 300.437 153.206 299.95 150.989 cv
cp
300.153 157 mo
300.071 157 299.983 156.99 299.888 156.964 cv
299.56 156.878 299.3 156.667 299.116 156.337 cv
298.18 154.661 299.511 150.125 299.666 149.614 cv
299.707 149.479 299.833 149.402 299.974 149.39 cv
300.115 149.393 300.237 149.489 300.273 149.625 cv
300.535 150.63 301.791 155.697 300.72 156.765 cv
300.604 156.881 300.419 157 300.153 157 cv
cp
1 1 1 rgb
f
310.876 175.774 mo
310.68 175.761 310.549 175.61 310.562 175.436 cv
311.037 168.72 li
311.049 168.547 311.177 168.422 311.374 168.428 cv
311.548 168.44 311.679 168.591 311.666 168.765 cv
311.19 175.481 li
311.179 175.647 311.04 175.774 310.876 175.774 cv
cp
f
309.343 194.762 mo
309.343 194.762 307.824 173.372 310.036 162.284 cv
312.547 149.705 316.055 143.439 316.055 143.439 cv
316.055 143.439 317.851 142.028 319.496 141.613 cv
321.027 141.227 322.213 141.541 322.213 141.541 cv
322.213 141.541 318.314 151.274 317.529 157.705 cv
316.744 164.136 324.812 171.684 324.812 171.684 cv
324.812 171.684 335.457 164.157 335.877 158.709 cv
336.348 152.607 335.733 139.683 335.733 139.683 cv
335.733 139.683 336.986 139.743 338.713 140.138 cv
340.439 140.534 342.009 140.964 342.009 140.964 cv
342.009 140.964 338.806 168.484 344.041 175.458 cv
349.275 182.433 352.047 178.837 352.047 178.837 cv
352.792 199.359 li
316.567 202.764 li
309.343 194.762 li
cp
.313726 .470588 .286275 rgb
f
352.274 213.065 mo
352.09 213.006 li
346.176 208.734 343.764 201.283 343.74 201.209 cv
343.688 201.042 343.779 200.865 343.945 200.813 cv
344.115 200.76 344.289 200.853 344.342 201.018 cv
344.365 201.091 346.718 208.348 352.459 212.494 cv
352.601 212.597 352.632 212.794 352.53 212.935 cv
352.469 213.021 352.372 213.065 352.274 213.065 cv
cp
1 .65098 .231373 rgb
f
320.36 163.913 mo
315.328 164.688 li
314.911 161.983 li
314.798 161.25 315.3 160.565 316.032 160.452 cv
318.412 160.085 li
319.145 159.972 319.83 160.475 319.942 161.207 cv
320.36 163.913 li
cp
.733333 .686275 .752941 rgb
f
324.949 189.617 mo
318.694 190.582 li
317.452 190.773 316.278 189.955 316.027 188.724 cv
312.095 169.396 li
311.827 168.078 312.715 166.804 314.044 166.599 cv
322.16 165.348 li
323.489 165.143 324.72 166.09 324.86 167.428 cv
326.933 187.042 li
327.064 188.292 326.191 189.425 324.949 189.617 cv
cp
.854902 .843137 .866667 rgb
f
321.931 167.315 mo
314.854 168.406 li
314.315 164.907 li
314.252 164.495 314.534 164.108 314.947 164.045 cv
320.529 163.184 li
320.941 163.121 321.328 163.404 321.392 163.816 cv
321.931 167.315 li
cp
f
315.845 180.932 mo
315.676 180.932 315.524 180.813 315.489 180.641 cv
313.502 170.886 li
313.462 170.689 313.589 170.498 313.785 170.458 cv
313.987 170.416 314.173 170.545 314.213 170.741 cv
316.2 180.496 li
316.24 180.692 316.113 180.884 315.917 180.924 cv
315.845 180.932 li
cp
1 1 1 rgb
f
334.699 173.099 mo
334.699 173.099 323.826 168.284 318.768 169.673 cv
313.71 171.062 309.755 180.42 310.052 181.462 cv
310.349 182.503 311.874 182.635 311.874 182.635 cv
311.874 182.635 311.371 184.437 312.046 185.297 cv
312.722 186.158 314.427 185.555 314.427 185.555 cv
314.427 185.555 315.345 187.802 317.131 187.677 cv
318.918 187.552 319.983 185.783 320.06 184.82 cv
320.111 184.177 320.531 183.312 320.531 183.312 cv
321.326 183.833 li
321.326 183.833 322.243 186.125 326.247 187.002 cv
330.251 187.88 335.877 182.989 335.877 182.989 cv
334.699 173.099 li
cp
.968627 .560784 .466667 rgb
f
311.873 182.943 mo
311.771 182.926 li
311.611 182.87 311.526 182.694 311.582 182.534 cv
311.661 182.308 313.537 176.979 315.933 175.097 cv
316.066 174.992 316.261 175.015 316.365 175.149 cv
316.47 175.283 316.447 175.477 316.313 175.582 cv
314.06 177.352 312.183 182.683 312.164 182.736 cv
312.119 182.864 312 182.943 311.873 182.943 cv
cp
0 0 0 rgb
f
314.427 185.863 mo
314.351 185.854 li
314.186 185.812 314.087 185.644 314.129 185.479 cv
314.188 185.248 315.613 179.786 318.896 178.363 cv
319.049 178.294 319.233 178.366 319.301 178.522 cv
319.368 178.679 319.297 178.86 319.141 178.927 cv
316.136 180.231 314.739 185.578 314.725 185.631 cv
314.689 185.771 314.564 185.863 314.427 185.863 cv
cp
f
272.303 152.504 mo
267.068 152.72 li
265.789 152.772 264.683 151.835 264.524 150.564 cv
262.109 131.146 li
275.47 130.596 li
274.66 150.147 li
274.607 151.427 273.582 152.452 272.303 152.504 cv
cp
.94902 .317647 .231373 rgb
f
275.47 130.596 mo
275.495 131.207 272.524 131.825 268.835 131.977 cv
265.146 132.129 262.134 131.757 262.109 131.146 cv
262.084 130.536 265.055 129.918 268.744 129.766 cv
272.434 129.614 275.445 129.985 275.47 130.596 cv
cp
.733333 .686275 .752941 rgb
f
261.588 149.859 mo
262.239 150.338 263.017 150.607 263.814 150.731 cv
266.517 151.154 274.295 150.996 275.316 148.29 cv
276.294 145.697 271.97 145.651 271.97 145.651 cv
271.97 145.651 275.462 144.992 274.199 142.766 cv
273.144 140.908 270.87 141.227 270.87 141.227 cv
270.87 141.227 274.436 140.193 271.908 138.024 cv
269.38 135.854 261.383 136.707 258.913 137.998 cv
256.442 139.289 259.811 141.716 259.811 141.716 cv
259.811 141.716 257.331 143.459 258.054 144.952 cv
258.819 146.531 261.227 146.106 261.227 146.106 cv
261.227 146.106 259.247 148.134 261.588 149.859 cv
cp
.968627 .560784 .466667 rgb
f
262.109 146.223 mo
261.942 146.223 261.806 146.091 261.801 145.924 cv
261.796 145.754 261.931 145.612 262.101 145.608 cv
271.962 145.344 li
272.136 145.344 272.273 145.476 272.278 145.643 cv
272.282 145.813 272.147 145.955 271.978 145.959 cv
262.117 146.223 li
262.109 146.223 li
cp
0 0 0 rgb
f
260.979 141.921 mo
260.814 141.921 260.678 141.791 260.671 141.625 cv
260.665 141.456 260.797 141.313 260.967 141.306 cv
270.858 140.919 li
271.047 140.929 271.171 141.045 271.178 141.215 cv
271.185 141.385 271.052 141.528 270.882 141.535 cv
260.991 141.921 li
260.979 141.921 li
cp
f
342.009 140.964 mo
342.009 140.964 364.563 145.099 367.638 169.421 cv
370.589 192.762 331.139 187.313 331.139 187.313 cv
330.055 170.157 li
344.793 166.469 li
342.009 140.964 li
cp
1 .682353 .392157 rgb
f
320.531 183.62 mo
320.355 183.564 li
320.216 183.467 320.182 183.275 320.278 183.136 cv
321.12 181.924 li
321.217 181.784 321.408 181.75 321.549 181.847 cv
321.688 181.944 321.723 182.136 321.626 182.276 cv
320.784 183.487 li
320.725 183.573 320.628 183.62 320.531 183.62 cv
cp
0 0 0 rgb
f
351.188 162.844 mo
349.401 162.844 345.336 165.22 342.925 166.782 cv
345.848 166.378 350.75 165.423 351.802 163.969 cv
351.962 163.746 352.017 163.528 351.966 163.301 cv
351.923 163.105 351.826 162.988 351.652 162.919 cv
351.522 162.868 351.366 162.844 351.188 162.844 cv
cp
341.644 167.572 mo
341.513 167.572 341.394 167.49 341.348 167.365 cv
341.298 167.23 341.346 167.078 341.465 166.997 cv
342.293 166.426 349.63 161.438 351.883 162.332 cv
352.253 162.478 352.494 162.766 352.583 163.166 cv
352.672 163.572 352.581 163.967 352.313 164.338 cv
350.661 166.624 342.042 167.533 341.676 167.57 cv
341.644 167.572 li
cp
1 1 1 rgb
f
323.251 123.846 mo
323.251 123.846 317.808 121.752 317.542 125.918 cv
317.233 130.744 322.981 130.58 322.981 130.58 cv
323.251 123.846 li
cp
.968627 .560784 .466667 rgb
f
320.728 128.245 mo
320.632 128.245 320.538 128.198 320.482 128.11 cv
318.582 125.109 li
318.497 124.975 318.537 124.795 318.672 124.71 cv
318.807 124.625 318.984 124.663 319.072 124.8 cv
320.973 127.801 li
321.058 127.936 321.018 128.115 320.883 128.2 cv
320.728 128.245 li
cp
0 0 0 rgb
f
318.613 127.401 mo
318.46 127.401 318.332 127.282 318.324 127.127 cv
318.315 126.967 318.438 126.831 318.598 126.822 cv
320.126 126.741 li
320.304 126.734 320.423 126.855 320.431 127.016 cv
320.439 127.175 320.316 127.312 320.157 127.32 cv
318.629 127.401 li
318.613 127.401 li
cp
f
333.33 133.886 mo
333.58 141.025 li
333.58 141.025 331.449 142.274 328.735 142.419 cv
325.07 142.615 323.754 140.485 323.754 140.485 cv
323.542 133.886 li
333.33 133.886 li
cp
.968627 .560784 .466667 rgb
f
333.33 134.826 mo
333.33 134.826 331.738 140.01 327.553 139.54 cv
324.179 139.16 323.251 134.216 323.251 134.216 cv
333.33 134.826 li
cp
0 0 0 rgb
f
321.38 119.775 mo
321.38 119.775 319.403 130.162 322.52 134.617 cv
325.862 139.395 330.529 137.543 332.383 136.007 cv
334.884 133.936 335.687 131.378 335.687 131.378 cv
335.687 131.378 339.248 131.953 340.322 129.026 cv
341.451 125.952 339.16 123.588 337.386 123.508 cv
335.611 123.428 335.417 123.758 335.417 123.758 cv
335.818 120.504 li
335.818 120.504 324.631 108.943 321.38 119.775 cv
cp
.968627 .560784 .466667 rgb
f
336.155 128.376 mo
335.942 128.283 li
335.834 128.166 335.841 127.982 335.959 127.874 cv
338.603 125.434 li
338.72 125.325 338.903 125.332 339.012 125.451 cv
339.12 125.568 339.113 125.751 338.995 125.86 cv
336.352 128.3 li
336.155 128.376 li
cp
0 0 0 rgb
f
338.691 128.716 mo
338.525 128.664 li
336.871 127.511 li
336.74 127.419 336.708 127.239 336.8 127.108 cv
336.891 126.975 337.073 126.945 337.203 127.036 cv
338.857 128.188 li
338.988 128.28 339.021 128.46 338.929 128.592 cv
338.873 128.673 338.782 128.716 338.691 128.716 cv
cp
f
327.009 130.543 mo
326.918 130.543 326.829 130.501 326.772 130.421 cv
325.48 128.605 326.456 125.932 326.498 125.819 cv
326.555 125.67 326.722 125.595 326.87 125.649 cv
327.021 125.705 327.097 125.872 327.041 126.021 cv
327.032 126.046 326.132 128.521 327.245 130.085 cv
327.338 130.216 327.307 130.397 327.177 130.49 cv
327.009 130.543 li
cp
f
323.008 122.775 mo
322.811 122.698 li
322.693 122.589 322.687 122.406 322.795 122.289 cv
323.463 121.568 324.691 121.447 324.744 121.442 cv
324.9 121.428 325.044 121.544 325.059 121.703 cv
325.074 121.862 324.957 122.004 324.798 122.019 cv
324.787 122.02 323.735 122.126 323.221 122.682 cv
323.008 122.775 li
cp
f
331.575 122.552 mo
331.364 122.461 li
330.845 121.908 329.791 121.81 329.78 121.809 cv
329.621 121.795 329.504 121.655 329.518 121.496 cv
329.53 121.336 329.669 121.205 329.83 121.232 cv
329.882 121.236 331.113 121.349 331.786 122.063 cv
331.896 122.18 331.891 122.364 331.773 122.473 cv
331.575 122.552 li
cp
f
328.198 132.809 mo
328.438 132.908 328.725 132.976 328.995 132.893 cv
329.222 132.822 329.414 132.644 329.57 132.361 cv
328.198 132.809 li
cp
328.742 133.51 mo
328.002 133.51 327.348 132.983 327.315 132.957 cv
327.233 132.89 327.194 132.783 327.214 132.679 cv
327.233 132.575 327.309 132.49 327.409 132.457 cv
329.978 131.619 li
330.08 131.586 330.191 131.611 330.269 131.686 cv
330.346 131.761 330.376 131.872 330.346 131.975 cv
330.11 132.782 329.713 133.277 329.165 133.447 cv
329.023 133.491 328.881 133.51 328.742 133.51 cv
cp
f
320.9 123.51 mo
320.9 123.51 322.358 121.034 323.542 119.281 cv
324.726 117.528 324.726 117.528 324.726 117.528 cv
324.726 117.528 325.985 121.567 328.822 123.167 cv
331.659 124.768 334.86 124.444 334.86 124.444 cv
334.86 126.927 li
334.86 126.927 335.624 123.654 336.155 123.576 cv
336.688 123.498 337.492 123.36 338.428 123.792 cv
339.37 124.227 339.583 124.687 339.583 124.687 cv
339.583 124.687 340.549 118.748 339.952 117.528 cv
339.355 116.309 333.633 111.49 325.64 112.042 cv
317.504 112.604 320.9 123.51 320.9 123.51 cv
cp
f
324.123 126.282 mo
323.957 126.278 323.83 126.146 323.833 125.986 cv
323.868 124.391 li
323.068 123.739 li
322.944 123.638 322.925 123.455 323.026 123.331 cv
323.129 123.207 323.311 123.189 323.434 123.29 cv
324.344 124.031 li
324.451 124.262 li
324.413 125.999 li
324.409 126.156 324.28 126.282 324.123 126.282 cv
cp
f
329.894 126.343 mo
329.728 126.339 329.601 126.207 329.604 126.047 cv
329.641 124.433 li
328.871 123.656 li
328.759 123.543 328.76 123.359 328.873 123.247 cv
328.987 123.134 329.171 123.134 329.283 123.249 cv
330.139 124.113 li
330.223 124.323 li
330.184 126.06 li
330.18 126.217 330.051 126.343 329.894 126.343 cv
cp
f
334.656 115.143 mo
334.656 115.143 333.983 107.546 339.299 107.445 cv
344.613 107.343 342.62 117.401 339.299 118.214 cv
335.978 119.027 334.656 115.143 334.656 115.143 cv
cp
f
323.63 138.332 mo
323.63 138.332 322.618 138.624 322.48 138.901 cv
322.342 139.177 322.213 141.541 322.213 141.541 cv
322.213 141.541 327.811 147.199 328.811 147.061 cv
329.81 146.922 334.305 141.113 334.443 140.699 cv
334.581 140.284 334.263 137.673 334.137 137.799 cv
334.012 137.924 328.345 141.227 328.345 141.227 cv
323.63 138.332 li
cp
.968627 .701961 .411765 rgb
f
327.249 145.967 mo
327.061 145.904 li
322.749 142.682 li
322.609 142.577 322.58 142.379 322.685 142.24 cv
322.79 142.1 322.988 142.074 323.126 142.176 cv
327.438 145.398 li
327.577 145.503 327.606 145.701 327.502 145.84 cv
327.439 145.923 327.345 145.967 327.249 145.967 cv
cp
1 1 1 rgb
f
496.201 146.423 mo
457.146 146.423 li
452.913 146.423 449.482 142.992 449.482 138.76 cv
449.482 75.0093 li
449.482 70.7769 452.913 67.3457 457.146 67.3457 cv
496.201 67.3457 li
500.434 67.3457 503.865 70.7769 503.865 75.0093 cv
503.865 138.76 li
503.865 142.992 500.434 146.423 496.201 146.423 cv
cp
.933333 .92549 .945098 rgb
f
492.311 78.876 mo
459.571 78.876 li
459.4 78.876 459.262 78.7378 459.262 78.5669 cv
459.262 78.396 459.4 78.2578 459.571 78.2578 cv
492.311 78.2578 li
492.481 78.2578 492.62 78.396 492.62 78.5669 cv
492.62 78.7378 492.481 78.876 492.311 78.876 cv
cp
.768627 .737255 .788235 rgb
f
492.311 85.9854 mo
459.571 85.9854 li
459.4 85.9854 459.262 85.8472 459.262 85.6763 cv
459.262 85.5054 459.4 85.3672 459.571 85.3672 cv
492.311 85.3672 li
492.481 85.3672 492.62 85.5054 492.62 85.6763 cv
492.62 85.8472 492.481 85.9854 492.311 85.9854 cv
cp
f
492.311 93.9482 mo
459.571 93.9482 li
459.4 93.9482 459.262 93.8101 459.262 93.6392 cv
459.262 93.4683 459.4 93.3301 459.571 93.3301 cv
492.311 93.3301 li
492.481 93.3301 492.62 93.4683 492.62 93.6392 cv
492.62 93.8101 492.481 93.9482 492.311 93.9482 cv
cp
f
492.311 102.96 mo
459.571 102.96 li
459.4 102.96 459.262 102.822 459.262 102.651 cv
459.262 102.48 459.4 102.342 459.571 102.342 cv
492.311 102.342 li
492.481 102.342 492.62 102.48 492.62 102.651 cv
492.62 102.822 492.481 102.96 492.311 102.96 cv
cp
f
492.311 110.069 mo
459.571 110.069 li
459.4 110.069 459.262 109.931 459.262 109.76 cv
459.262 109.589 459.4 109.451 459.571 109.451 cv
492.311 109.451 li
492.481 109.451 492.62 109.589 492.62 109.76 cv
492.62 109.931 492.481 110.069 492.311 110.069 cv
cp
f
492.311 118.032 mo
459.571 118.032 li
459.4 118.032 459.262 117.894 459.262 117.723 cv
459.262 117.552 459.4 117.414 459.571 117.414 cv
492.311 117.414 li
492.481 117.414 492.62 117.552 492.62 117.723 cv
492.62 117.894 492.481 118.032 492.311 118.032 cv
cp
f
496.863 58.2788 mo
121.396 58.2788 li
115.768 58.2788 111.207 53.7168 111.207 48.0894 cv
111.207 33.4116 li
111.207 27.7842 115.768 23.2222 121.396 23.2222 cv
496.863 23.2222 li
502.49 23.2222 507.053 27.7842 507.053 33.4116 cv
507.053 48.0894 li
507.053 53.7168 502.49 58.2788 496.863 58.2788 cv
cp
f
607.717 400 mo
0 400 li
0 345.264 li
607.717 345.264 li
607.717 400 li
.933333 .92549 .945098 rgb
f
311.495 375.23 mo
159.801 375.23 36.8287 373.297 36.8287 370.912 cv
36.8287 368.527 159.801 366.595 311.495 366.595 cv
463.189 366.595 586.162 368.527 586.162 370.912 cv
586.162 373.297 463.189 375.23 311.495 375.23 cv
.886274 .87451 .909804 rgb
f
181.737 183.263 mo
139.086 183.263 li
135.584 183.263 132.745 180.424 132.745 176.922 cv
132.745 162.176 li
132.745 158.674 135.584 155.834 139.086 155.834 cv
181.737 155.834 li
185.239 155.834 188.078 158.674 188.078 162.176 cv
188.078 176.922 li
188.078 180.424 185.239 183.263 181.737 183.263 cv
cp
.933333 .92549 .945098 rgb
f
166.731 203.122 mo
152.25 203.122 li
152.25 176.316 li
166.731 176.316 li
166.731 203.122 li
cp
f
152.25 159.88 mo
140.025 159.795 li
139.854 159.794 139.717 159.654 139.718 159.484 cv
139.719 159.313 139.857 159.177 140.028 159.177 cv
152.251 159.262 li
152.422 159.263 152.56 159.403 152.559 159.573 cv
152.558 159.744 152.419 159.88 152.25 159.88 cv
cp
1 1 1 rgb
f
305.718 358.333 mo
184.705 358.333 86.6059 355.548 86.6059 352.111 cv
86.6059 348.675 184.705 345.889 305.718 345.889 cv
426.729 345.889 524.828 348.675 524.828 352.111 cv
524.828 355.548 426.729 358.333 305.718 358.333 cv
.886274 .87451 .909804 rgb
f
123.555 199.063 mo
114.903 199.063 li
114.903 51.3062 li
123.555 51.3062 li
123.555 199.063 li
cp
.827451 .8 .839216 rgb
f
495.637 199.063 mo
486.984 199.063 li
486.984 51.3062 li
495.637 51.3062 li
495.637 199.063 li
cp
f
511.506 352.111 mo
257.439 352.111 li
257.439 196.82 li
511.506 196.82 li
513.709 196.82 515.495 198.606 515.495 200.81 cv
515.495 348.122 li
515.495 350.325 513.709 352.111 511.506 352.111 cv
cp
.768627 .737255 .788235 rgb
f
500.535 352.111 mo
102.22 352.111 li
99.9453 352.111 98.1011 349.883 98.1011 347.134 cv
98.1011 212.229 li
98.1011 193.182 110.88 196.82 126.645 196.82 cv
500.535 196.82 li
502.834 196.82 504.697 199.072 504.697 201.851 cv
504.697 347.081 li
504.697 349.859 502.834 352.111 500.535 352.111 cv
cp
.827451 .8 .839216 rgb
f
302.142 351.964 mo
301.865 351.964 301.642 351.74 301.642 351.464 cv
301.642 198.732 li
301.642 198.456 301.865 198.232 302.142 198.232 cv
302.418 198.232 302.642 198.456 302.642 198.732 cv
302.642 351.464 li
302.642 351.74 302.418 351.964 302.142 351.964 cv
cp
1 1 1 rgb
f
340.154 351.964 mo
339.878 351.964 339.654 351.74 339.654 351.464 cv
339.654 198.732 li
339.654 198.456 339.878 198.232 340.154 198.232 cv
340.431 198.232 340.654 198.456 340.654 198.732 cv
340.654 351.464 li
340.654 351.74 340.431 351.964 340.154 351.964 cv
cp
f
378.264 352.611 mo
377.987 352.611 377.764 352.388 377.764 352.111 cv
377.764 198.732 li
377.764 198.456 377.987 198.232 378.264 198.232 cv
378.54 198.232 378.764 198.456 378.764 198.732 cv
378.764 352.111 li
378.764 352.388 378.54 352.611 378.264 352.611 cv
cp
f
416.571 351.964 mo
416.295 351.964 416.071 351.74 416.071 351.464 cv
416.071 198.732 li
416.071 198.456 416.295 198.232 416.571 198.232 cv
416.848 198.232 417.071 198.456 417.071 198.732 cv
417.071 351.464 li
417.071 351.74 416.848 351.964 416.571 351.964 cv
cp
f
454.681 352.611 mo
454.404 352.611 454.181 352.388 454.181 352.111 cv
454.181 198.732 li
454.181 198.456 454.404 198.232 454.681 198.232 cv
454.957 198.232 455.181 198.456 455.181 198.732 cv
455.181 352.111 li
455.181 352.388 454.957 352.611 454.681 352.611 cv
cp
f
489.081 352.611 mo
488.805 352.611 488.581 352.388 488.581 352.111 cv
488.581 198.732 li
488.581 198.456 488.805 198.232 489.081 198.232 cv
489.357 198.232 489.581 198.456 489.581 198.732 cv
489.581 352.111 li
489.581 352.388 489.357 352.611 489.081 352.611 cv
cp
f
225.859 352.611 mo
225.583 352.611 225.359 352.388 225.359 352.111 cv
225.359 198.732 li
225.359 198.456 225.583 198.232 225.859 198.232 cv
226.136 198.232 226.359 198.456 226.359 198.732 cv
226.359 352.111 li
226.359 352.388 226.136 352.611 225.859 352.611 cv
cp
f
263.969 352.611 mo
263.692 352.611 263.469 352.388 263.469 352.111 cv
263.469 198.732 li
263.469 198.456 263.692 198.232 263.969 198.232 cv
264.245 198.232 264.469 198.456 264.469 198.732 cv
264.469 352.111 li
264.469 352.388 264.245 352.611 263.969 352.611 cv
cp
f
150.174 352.611 mo
149.898 352.611 149.674 352.388 149.674 352.111 cv
149.674 198.732 li
149.674 198.456 149.898 198.232 150.174 198.232 cv
150.451 198.232 150.674 198.456 150.674 198.732 cv
150.674 352.111 li
150.674 352.388 150.451 352.611 150.174 352.611 cv
cp
f
113.301 352.287 mo
113.025 352.287 112.801 352.063 112.801 351.787 cv
112.801 198.408 li
112.801 198.132 113.025 197.908 113.301 197.908 cv
113.578 197.908 113.801 198.132 113.801 198.408 cv
113.801 351.787 li
113.801 352.063 113.578 352.287 113.301 352.287 cv
cp
f
188.284 352.611 mo
188.007 352.611 187.784 352.388 187.784 352.111 cv
187.784 198.732 li
187.784 198.456 188.007 198.232 188.284 198.232 cv
188.56 198.232 188.784 198.456 188.784 198.732 cv
188.784 352.111 li
188.784 352.388 188.56 352.611 188.284 352.611 cv
cp
f
488.621 58.2788 mo
116.687 58.2788 li
111.085 58.2788 106.544 53.7378 106.544 48.1362 cv
106.544 33.3647 li
106.544 27.7632 111.085 23.2222 116.687 23.2222 cv
488.621 23.2222 li
494.223 23.2222 498.764 27.7632 498.764 33.3647 cv
498.764 48.1362 li
498.764 53.7378 494.223 58.2788 488.621 58.2788 cv
cp
.827451 .8 .839216 rgb
f
62.3037 127.786 mo
15.7388 127.786 li
14.1016 127.786 12.7744 126.458 12.7744 124.821 cv
12.7744 92.2534 li
12.7744 90.6167 14.1016 89.2896 15.7388 89.2896 cv
62.3037 89.2896 li
63.9404 89.2896 65.2676 90.6167 65.2676 92.2534 cv
65.2676 124.821 li
65.2676 126.458 63.9404 127.786 62.3037 127.786 cv
cp
.933333 .92549 .945098 rgb
f
59.8071 95.7271 mo
59.8071 121.349 li
59.8071 122.644 58.7544 123.687 57.4692 123.687 cv
20.8296 123.687 li
19.5439 123.687 18.501 122.644 18.501 121.349 cv
18.501 95.7271 li
18.501 94.4326 19.5439 93.3892 20.8296 93.3892 cv
57.4692 93.3892 li
58.7544 93.3892 59.8071 94.4326 59.8071 95.7271 cv
cp
.733333 .686275 .752941 rgb
f
59.8071 116.552 mo
59.8071 121.349 li
59.8071 122.644 58.7544 123.687 57.4692 123.687 cv
20.8296 123.687 li
19.5439 123.687 18.501 122.644 18.501 121.349 cv
18.501 115.667 li
34.418 108.533 li
46.1997 117.027 li
55.2993 112.78 li
59.8071 116.552 li
cp
1 1 1 rgb
f
60.6348 170.258 mo
92.9092 170.258 li
94.0439 170.258 94.9634 169.338 94.9634 168.204 cv
94.9634 145.631 li
94.9634 144.497 94.0439 143.577 92.9092 143.577 cv
60.6348 143.577 li
59.5 143.577 58.5801 144.497 58.5801 145.631 cv
58.5801 168.204 li
58.5801 169.338 59.5 170.258 60.6348 170.258 cv
cp
.933333 .92549 .945098 rgb
f
62.3652 148.039 mo
62.3652 165.797 li
62.3652 166.694 63.0947 167.417 63.9854 167.417 cv
89.3809 167.417 li
90.2715 167.417 90.9946 166.694 90.9946 165.797 cv
90.9946 148.039 li
90.9946 147.141 90.2715 146.418 89.3809 146.418 cv
63.9854 146.418 li
63.0947 146.418 62.3652 147.141 62.3652 148.039 cv
cp
.733333 .686275 .752941 rgb
f
62.3652 162.473 mo
62.3652 165.797 li
62.3652 166.694 63.0947 167.417 63.9854 167.417 cv
89.3809 167.417 li
90.2715 167.417 90.9946 166.694 90.9946 165.797 cv
90.9946 161.859 li
79.9624 156.915 li
71.7964 162.802 li
65.4897 159.858 li
62.3652 162.473 li
cp
1 1 1 rgb
f
525.896 136.943 mo
558.17 136.943 li
559.305 136.943 560.225 136.023 560.225 134.888 cv
560.225 112.315 li
560.225 111.181 559.305 110.261 558.17 110.261 cv
525.896 110.261 li
524.761 110.261 523.841 111.181 523.841 112.315 cv
523.841 134.888 li
523.841 136.023 524.761 136.943 525.896 136.943 cv
cp
.933333 .92549 .945098 rgb
f
527.626 114.723 mo
527.626 132.481 li
527.626 133.379 528.355 134.102 529.246 134.102 cv
554.642 134.102 li
555.532 134.102 556.256 133.379 556.256 132.481 cv
556.256 114.723 li
556.256 113.826 555.532 113.103 554.642 113.103 cv
529.246 113.103 li
528.355 113.103 527.626 113.826 527.626 114.723 cv
cp
.733333 .686275 .752941 rgb
f
527.626 129.157 mo
527.626 132.481 li
527.626 133.379 528.355 134.102 529.246 134.102 cv
554.642 134.102 li
555.532 134.102 556.256 133.379 556.256 132.481 cv
556.256 128.544 li
545.224 123.599 li
537.058 129.486 li
530.75 126.542 li
527.626 129.157 li
cp
1 1 1 rgb
f
564.027 49.5039 mo
559.65 49.5039 li
559.65 0 li
564.027 0 li
564.027 49.5039 li
cp
.933333 .92549 .945098 rgb
f
598.58 63.9932 mo
525.098 63.9932 li
525.098 55.9912 531.585 49.5039 539.587 49.5039 cv
584.092 49.5039 li
592.094 49.5039 598.58 55.9912 598.58 63.9932 cv
cp
f
598.58 63.9932 mo
598.58 64.8823 582.131 65.603 561.839 65.603 cv
541.547 65.603 525.098 64.8823 525.098 63.9932 cv
525.098 63.104 541.547 62.3833 561.839 62.3833 cv
582.131 62.3833 598.58 63.104 598.58 63.9932 cv
cp
.733333 .686275 .752941 rgb
f
51.2529 49.5039 mo
46.8765 49.5039 li
46.8765 0 li
51.2529 0 li
51.2529 49.5039 li
cp
.933333 .92549 .945098 rgb
f
85.8062 63.9932 mo
12.3232 63.9932 li
12.3232 55.9912 18.8101 49.5039 26.8125 49.5039 cv
71.3174 49.5039 li
79.3193 49.5039 85.8062 55.9912 85.8062 63.9932 cv
cp
f
85.8062 63.9932 mo
85.8062 64.8823 69.3564 65.603 49.0649 65.603 cv
28.7729 65.603 12.3232 64.8823 12.3232 63.9932 cv
12.3232 63.104 28.7729 62.3833 49.0649 62.3833 cv
69.3564 62.3833 85.8062 63.104 85.8062 63.9932 cv
cp
.733333 .686275 .752941 rgb
f
431.056 176.651 mo
411.861 176.651 li
411.149 176.651 410.571 176.073 410.571 175.361 cv
410.571 174.648 411.149 174.071 411.861 174.071 cv
431.056 174.071 li
431.056 176.651 li
cp
.780392 .74902 .807843 rgb
f
462.313 156.759 mo
462.313 196.729 li
422.572 196.729 li
422.572 156.759 li
422.572 155.439 423.643 154.369 424.963 154.369 cv
459.923 154.369 li
461.242 154.369 462.313 155.439 462.313 156.759 cv
cp
.933333 .92549 .945098 rgb
f
462.313 156.759 mo
462.313 164.149 li
422.572 164.149 li
422.572 156.759 li
422.572 155.439 423.643 154.369 424.963 154.369 cv
459.923 154.369 li
461.242 154.369 462.313 155.439 462.313 156.759 cv
cp
.780392 .74902 .807843 rgb
f
458.571 185.69 mo
458.4 185.69 458.262 185.552 458.262 185.381 cv
458.262 169.151 li
458.262 168.98 458.4 168.842 458.571 168.842 cv
458.742 168.842 458.881 168.98 458.881 169.151 cv
458.881 185.381 li
458.881 185.552 458.742 185.69 458.571 185.69 cv
cp
1 1 1 rgb
f
521.951 209 mo
89.4834 209 li
87.8945 209 86.606 207.712 86.606 206.123 cv
86.606 199.609 li
86.606 198.02 87.8945 196.732 89.4834 196.732 cv
521.951 196.732 li
523.54 196.732 524.828 198.02 524.828 199.609 cv
524.828 206.123 li
524.828 207.712 523.54 209 521.951 209 cv
cp
.854902 .843137 .866667 rgb
f
232.662 33.1113 mo
119.162 33.1113 li
118.18 33.1113 117.384 32.3154 117.384 31.3335 cv
117.384 30.3516 118.18 29.5557 119.162 29.5557 cv
232.662 29.5557 li
233.643 29.5557 234.439 30.3516 234.439 31.3335 cv
234.439 32.3154 233.643 33.1113 232.662 33.1113 cv
cp
.933333 .92549 .945098 rgb
f
232.662 41.7505 mo
119.162 41.7505 li
118.18 41.7505 117.384 40.9546 117.384 39.9727 cv
117.384 38.9907 118.18 38.1948 119.162 38.1948 cv
232.662 38.1948 li
233.643 38.1948 234.439 38.9907 234.439 39.9727 cv
234.439 40.9546 233.643 41.7505 232.662 41.7505 cv
cp
f
232.662 50.6743 mo
119.162 50.6743 li
118.18 50.6743 117.384 49.8784 117.384 48.8965 cv
117.384 47.9146 118.18 47.1187 119.162 47.1187 cv
232.662 47.1187 li
233.643 47.1187 234.439 47.9146 234.439 48.8965 cv
234.439 49.8784 233.643 50.6743 232.662 50.6743 cv
cp
f
358.962 32.9688 mo
245.462 32.9688 li
244.481 32.9688 243.685 32.1729 243.685 31.1909 cv
243.685 30.209 244.481 29.4131 245.462 29.4131 cv
358.962 29.4131 li
359.944 29.4131 360.74 30.209 360.74 31.1909 cv
360.74 32.1729 359.944 32.9688 358.962 32.9688 cv
cp
f
358.962 41.6084 mo
245.462 41.6084 li
244.481 41.6084 243.685 40.812 243.685 39.8306 cv
243.685 38.8486 244.481 38.0527 245.462 38.0527 cv
358.962 38.0527 li
359.944 38.0527 360.74 38.8486 360.74 39.8306 cv
360.74 40.812 359.944 41.6084 358.962 41.6084 cv
cp
f
358.962 50.5322 mo
245.462 50.5322 li
244.481 50.5322 243.685 49.7363 243.685 48.7544 cv
243.685 47.7725 244.481 46.9766 245.462 46.9766 cv
358.962 46.9766 li
359.944 46.9766 360.74 47.7725 360.74 48.7544 cv
360.74 49.7363 359.944 50.5322 358.962 50.5322 cv
cp
f
485.061 32.9688 mo
371.561 32.9688 li
370.579 32.9688 369.783 32.1729 369.783 31.1909 cv
369.783 30.209 370.579 29.4131 371.561 29.4131 cv
485.061 29.4131 li
486.042 29.4131 486.838 30.209 486.838 31.1909 cv
486.838 32.1729 486.042 32.9688 485.061 32.9688 cv
cp
f
485.061 41.6084 mo
371.561 41.6084 li
370.579 41.6084 369.783 40.812 369.783 39.8306 cv
369.783 38.8486 370.579 38.0527 371.561 38.0527 cv
485.061 38.0527 li
486.042 38.0527 486.838 38.8486 486.838 39.8306 cv
486.838 40.812 486.042 41.6084 485.061 41.6084 cv
cp
f
485.061 50.5322 mo
371.561 50.5322 li
370.579 50.5322 369.783 49.7363 369.783 48.7544 cv
369.783 47.7725 370.579 46.9766 371.561 46.9766 cv
485.061 46.9766 li
486.042 46.9766 486.838 47.7725 486.838 48.7544 cv
486.838 49.7363 486.042 50.5322 485.061 50.5322 cv
cp
f
335.356 81.1157 mo
311.495 81.1157 li
311.495 72.4863 li
311.495 71.0518 312.658 69.8887 314.093 69.8887 cv
332.759 69.8887 li
334.193 69.8887 335.356 71.0518 335.356 72.4863 cv
335.356 81.1157 li
cp
.886275 .87451 .898039 rgb
f
350.57 370.718 mo
350.406 370.708 li
349.688 370.618 349.177 369.963 349.267 369.244 cv
363.55 254.518 li
363.64 253.798 364.308 253.287 365.014 253.378 cv
365.732 253.468 366.243 254.123 366.153 254.842 cv
351.87 369.568 li
351.787 370.232 351.223 370.718 350.57 370.718 cv
cp
.686275 .647059 .709804 rgb
f
414.697 370.718 mo
414.045 370.718 413.48 370.232 413.397 369.568 cv
399.113 254.842 li
399.023 254.123 399.534 253.468 400.253 253.378 cv
400.959 253.287 401.627 253.798 401.717 254.518 cv
416.001 369.244 li
416.091 369.963 415.58 370.618 414.861 370.708 cv
414.697 370.718 li
cp
f
404.174 257.717 mo
355.684 257.717 li
352.856 257.717 350.564 255.425 350.564 252.599 cv
350.564 249.771 352.856 247.479 355.684 247.479 cv
404.174 247.479 li
407.001 247.479 409.293 249.771 409.293 252.599 cv
409.293 255.425 407.001 257.717 404.174 257.717 cv
cp
.819608 .8 .839216 rgb
f
409.654 257.717 mo
361.164 257.717 li
358.337 257.717 356.045 255.425 356.045 252.599 cv
356.045 249.771 358.337 247.479 361.164 247.479 cv
409.654 247.479 li
412.481 247.479 414.773 249.771 414.773 252.599 cv
414.773 255.425 412.481 257.717 409.654 257.717 cv
cp
.886275 .87451 .898039 rgb
f
404.202 288.605 mo
361.065 288.605 li
360.341 288.605 359.754 288.019 359.754 287.294 cv
359.754 286.569 360.341 285.982 361.065 285.982 cv
404.202 285.982 li
404.927 285.982 405.514 286.569 405.514 287.294 cv
405.514 288.019 404.927 288.605 404.202 288.605 cv
cp
.686275 .647059 .709804 rgb
f
409.293 334.317 mo
356.045 334.317 li
355.32 334.317 354.733 333.73 354.733 333.006 cv
354.733 332.281 355.32 331.694 356.045 331.694 cv
409.293 331.694 li
410.018 331.694 410.604 332.281 410.604 333.006 cv
410.604 333.73 410.018 334.317 409.293 334.317 cv
cp
f
425.888 173.805 mo
427.06 180.014 li
418.901 179.266 li
418.955 176.199 li
425.888 173.805 li
cp
.968627 .560784 .466667 rgb
f
410.635 191.777 mo
414.176 177.838 li
426.876 179.13 li
426.876 179.13 434.106 211.638 421.968 216.974 cv
410.755 221.902 401.957 211.27 401.957 211.27 cv
410.635 191.777 li
cp
.866667 .521569 .478431 rgb
f
419.291 301.129 mo
418.163 315.878 li
399.663 313.21 li
401.77 298.603 li
419.291 301.129 li
cp
f
458.22 264.005 mo
467.455 275.559 li
451.976 286.308 li
443.559 274.185 li
458.22 264.005 li
cp
f
427.023 267.519 mo
426.33 307.024 li
394.401 306.464 li
389.405 251.842 li
414.89 249.441 li
427.023 267.519 li
cp
1 .65098 .231373 rgb
f
465.58 260.617 mo
465.58 260.617 440.146 229.314 424.536 224.168 cv
408.928 219.021 363.585 218.602 363.585 218.602 cv
363.585 218.602 354.925 242.434 367.809 248.615 cv
380.691 254.796 405.779 254.153 409.983 256.393 cv
414.188 258.632 439.717 284.523 439.717 284.523 cv
465.58 260.617 li
cp
f
352.98 202.442 mo
352.98 202.442 355.835 178.083 367.993 175.305 cv
380.15 172.525 388.511 175.197 395.236 178.205 cv
401.736 181.112 410.635 191.777 410.635 191.777 cv
405.008 214.913 li
398.306 213.532 li
398.261 222.407 li
362.592 222.732 li
358.393 204.054 li
352.98 202.442 li
cp
.298039 .439216 .270588 rgb
f
426.005 271.182 mo
425.784 271.082 li
425.664 270.948 413.757 257.612 409.914 256.68 cv
406 255.73 389.707 254.006 389.543 253.988 cv
389.381 253.972 389.263 253.826 389.28 253.663 cv
389.297 253.502 389.428 253.387 389.605 253.4 cv
390.277 253.471 406.101 255.146 410.053 256.105 cv
414.074 257.08 425.731 270.134 426.226 270.689 cv
426.335 270.812 426.323 270.998 426.201 271.106 cv
426.005 271.182 li
cp
1 1 1 rgb
f
411.919 249.14 mo
411.827 249.163 li
411.097 249.525 410.57 252.648 410.354 255.27 cv
411.754 252.983 413.148 249.92 412.118 249.216 cv
411.919 249.14 li
cp
409.983 256.688 mo
409.89 256.673 li
409.764 256.631 409.682 256.511 409.688 256.378 cv
409.746 255.211 410.109 249.355 411.564 248.633 cv
411.764 248.535 412.079 248.472 412.452 248.728 cv
414.506 250.131 410.672 255.905 410.229 256.559 cv
410.172 256.642 410.079 256.688 409.983 256.688 cv
cp
f
432.348 277.432 mo
432.135 277.342 li
432.021 277.225 432.024 277.037 432.142 276.923 cv
451.228 258.434 li
451.345 258.32 451.531 258.324 451.646 258.44 cv
451.76 258.558 451.757 258.745 451.64 258.859 cv
432.554 277.349 li
432.348 277.432 li
cp
f
417.171 299.377 mo
394.521 298.979 li
394.357 298.977 394.228 298.842 394.23 298.679 cv
394.233 298.517 394.365 298.388 394.526 298.388 cv
417.176 298.785 li
417.34 298.788 417.47 298.923 417.467 299.086 cv
417.464 299.248 417.332 299.377 417.171 299.377 cv
cp
f
422.672 312.937 mo
422.672 312.937 422.438 306.687 419.59 305.98 cv
416.742 305.273 411.64 311.346 411.64 311.346 cv
411.64 311.346 400.476 308.849 399.553 309.604 cv
398.629 310.358 395.869 329.497 396.626 329.902 cv
397.382 330.307 444.205 337.059 446.375 337.075 cv
448.545 337.092 446.922 326.794 442.976 324.448 cv
439.028 322.104 434.51 321.446 434.51 321.446 cv
422.672 312.937 li
cp
.313726 .470588 .286275 rgb
f
468.037 269.719 mo
468.037 269.719 463.737 265.184 461.2 266.505 cv
458.662 267.825 458.965 275.696 458.965 275.696 cv
458.965 275.696 449.196 281.08 449.023 282.246 cv
448.851 283.412 459.489 299.56 460.308 299.372 cv
461.125 299.184 499.632 273.813 501.221 272.414 cv
502.811 271.017 494.825 264.349 490.406 265.155 cv
485.987 265.961 482.267 268.405 482.267 268.405 cv
468.037 269.719 li
cp
f
394.785 214.577 mo
394.785 214.577 400.095 215.507 403.294 216.519 cv
406.493 217.53 411.465 218.723 413.581 218.207 cv
415.698 217.692 415.904 218.58 415.328 219.8 cv
414.752 221.021 412.301 221.632 412.301 221.632 cv
412.301 221.632 414.673 231.89 413.659 232.708 cv
412.646 233.526 409.82 230.252 409.82 230.252 cv
409.82 230.252 409.253 230.958 408.475 231.064 cv
407.696 231.17 406.596 230.673 406.596 230.673 cv
406.596 230.673 406.283 231.623 404.93 231.838 cv
403.576 232.054 402.701 231.321 402.701 231.321 cv
402.701 231.321 401.895 233.018 401.014 232.625 cv
400.134 232.231 396.162 230.968 396.404 229.777 cv
396.647 228.587 399.971 228.884 399.971 228.884 cv
400.449 226.861 li
400.449 226.861 396.966 229.429 393.78 227.581 cv
390.596 225.732 391.016 221.258 391.016 221.258 cv
394.785 214.577 li
cp
.866667 .521569 .478431 rgb
f
409.819 230.548 mo
409.626 230.476 li
409.502 230.369 409.488 230.183 409.596 230.059 cv
412.006 227.264 409.055 221.692 409.024 221.637 cv
408.947 221.492 409.001 221.313 409.145 221.235 cv
409.289 221.16 409.468 221.212 409.546 221.355 cv
409.677 221.599 412.72 227.342 410.043 230.445 cv
409.819 230.548 li
cp
0 0 0 rgb
f
355.689 203.249 mo
355.689 203.249 353.055 213.845 355.708 219.452 cv
359.491 227.446 392.4 223.806 392.4 223.806 cv
394.785 214.577 li
376.391 208.526 li
376.458 208.156 li
376.458 208.156 369.204 206.108 355.689 203.249 cv
cp
.866667 .521569 .478431 rgb
f
406.595 230.969 mo
406.406 230.901 li
406.28 230.797 406.263 230.61 406.366 230.484 cv
407.82 228.725 406.804 225.962 406.793 225.935 cv
406.735 225.781 406.813 225.61 406.966 225.553 cv
407.115 225.497 407.29 225.573 407.348 225.726 cv
407.395 225.852 408.493 228.84 406.823 230.861 cv
406.595 230.969 li
cp
0 0 0 rgb
f
402.701 231.617 mo
402.467 231.502 li
402.367 231.373 402.391 231.188 402.521 231.087 cv
404.06 229.897 403.901 227.218 403.899 227.19 cv
403.889 227.027 404.012 226.887 404.175 226.876 cv
404.366 226.857 404.479 226.989 404.489 227.15 cv
404.498 227.273 404.673 230.171 402.882 231.556 cv
402.701 231.617 li
cp
f
422.025 182.654 mo
429.438 182.784 li
431.195 182.815 432.646 181.415 432.676 179.658 cv
433.024 159.824 li
419.247 159.583 li
418.898 179.416 li
418.868 181.173 420.268 182.623 422.025 182.654 cv
cp
.94902 .317647 .231373 rgb
f
419.247 159.583 mo
419.239 160.02 422.317 160.428 426.122 160.495 cv
429.926 160.562 433.017 160.262 433.024 159.824 cv
433.032 159.387 429.954 158.979 426.149 158.912 cv
422.345 158.845 419.255 159.146 419.247 159.583 cv
cp
.886275 .87451 .898039 rgb
f
414.176 177.838 mo
414.176 177.838 413.081 169.992 413.698 168.495 cv
414.535 166.465 419.125 166.545 419.125 166.545 cv
419.054 170.604 li
419.032 171.792 li
419.032 171.792 422.98 179.64 418.484 182.333 cv
414.111 184.951 414.176 177.838 414.176 177.838 cv
cp
.866667 .521569 .478431 rgb
f
424.033 167.075 mo
424.478 166.496 425.084 166.067 425.746 165.758 cv
427.985 164.711 434.777 162.892 436.344 164.983 cv
437.845 166.988 434.103 168.116 434.103 168.116 cv
434.103 168.116 437.3 167.81 436.763 170.06 cv
436.315 171.938 434.261 172.233 434.261 172.233 cv
434.261 172.233 437.616 172.233 435.968 174.752 cv
434.319 177.271 427.163 178.543 424.694 178.044 cv
422.225 177.545 424.538 174.59 424.538 174.59 cv
424.538 174.59 421.947 173.701 422.199 172.224 cv
422.466 170.661 424.664 170.424 424.664 170.424 cv
424.664 170.424 422.435 169.162 424.033 167.075 cv
cp
f
425.477 170.663 mo
425.345 170.663 425.225 170.575 425.19 170.442 cv
425.149 170.284 425.244 170.122 425.401 170.081 cv
434.027 167.83 li
434.19 167.784 434.348 167.883 434.389 168.041 cv
434.43 168.199 434.335 168.361 434.178 168.402 cv
425.552 170.653 li
425.477 170.663 li
cp
0 0 0 rgb
f
425.578 174.682 mo
425.445 174.682 425.324 174.592 425.291 174.457 cv
425.252 174.298 425.349 174.138 425.507 174.099 cv
434.189 171.946 li
434.35 171.907 434.509 172.003 434.548 172.162 cv
434.587 172.32 434.49 172.481 434.332 172.52 cv
425.649 174.673 li
425.578 174.682 li
cp
f
420.251 180.158 mo
420.146 180.138 li
419.993 180.08 419.916 179.909 419.975 179.756 cv
421.392 176.048 418.811 171.994 418.784 171.953 cv
418.695 171.816 418.734 171.633 418.871 171.544 cv
419.007 171.456 419.191 171.493 419.28 171.631 cv
419.395 171.806 422.053 175.974 420.527 179.967 cv
420.482 180.085 420.37 180.158 420.251 180.158 cv
cp
f
398.12 214.932 mo
397.951 214.929 397.821 214.794 397.824 214.631 cv
397.968 206.428 li
397.971 206.264 398.088 206.152 398.269 206.137 cv
398.433 206.14 398.563 206.274 398.56 206.438 cv
398.416 214.641 li
398.413 214.803 398.281 214.932 398.12 214.932 cv
cp
1 1 1 rgb
f
377.062 201.285 mo
376.76 201.534 376.634 203.974 376.692 206.546 cv
377.329 204.463 377.807 201.977 377.128 201.334 cv
377.062 201.285 li
cp
376.458 208.452 mo
376.274 208.427 376.17 208.312 376.162 208.172 cv
376.051 206.088 375.895 201.191 376.866 200.742 cv
376.992 200.687 377.242 200.629 377.534 200.904 cv
378.955 202.248 376.966 207.649 376.734 208.261 cv
376.69 208.377 376.579 208.452 376.458 208.452 cv
cp
f
428.952 321.913 mo
428.793 321.913 428.661 321.786 428.656 321.626 cv
428.651 321.463 428.779 321.326 428.943 321.321 cv
434.501 321.15 li
434.688 321.158 434.801 321.274 434.806 321.438 cv
434.811 321.601 434.683 321.737 434.519 321.742 cv
428.961 321.913 li
428.952 321.913 li
cp
.968627 .772549 .215686 rgb
f
478.622 272.963 mo
478.43 272.892 li
478.306 272.786 478.291 272.599 478.397 272.475 cv
482.042 268.213 li
482.148 268.089 482.335 268.075 482.459 268.181 cv
482.583 268.286 482.598 268.474 482.491 268.598 cv
478.847 272.859 li
478.622 272.963 li
cp
f
377.057 169.341 mo
377.256 176.469 li
377.256 176.469 378.688 178.498 383.154 178.771 cv
386.482 178.974 387.63 178.255 387.63 178.255 cv
387.066 174.652 li
386.512 171.138 li
378.415 169.601 li
377.057 169.341 li
cp
.866667 .521569 .478431 rgb
f
378.415 169.612 mo
378.438 169.819 378.522 170.063 378.651 170.342 cv
380.438 174.115 385.119 174.837 387.042 174.969 cv
386.506 171.213 li
378.415 169.612 li
cp
0 0 0 rgb
f
387.839 153.799 mo
387.839 153.799 392.042 163.274 390.576 168.618 cv
389.111 173.962 384.245 173.149 381.331 172.134 cv
378.416 171.119 377.056 169.343 377.056 169.343 cv
377.056 169.343 374.344 170.279 372.513 167.763 cv
370.682 165.247 371.784 162.339 373.332 161.666 cv
374.879 160.992 376.73 162.102 376.73 162.102 cv
375.269 159.35 li
375.269 159.35 381.273 145.289 387.839 153.799 cv
cp
.866667 .521569 .478431 rgb
f
377.223 162.906 mo
377.223 162.906 378.811 162.456 380.127 160.139 cv
381.554 157.629 381.452 155.901 381.452 155.901 cv
381.452 155.901 384.187 157.745 386.488 157.168 cv
390.065 156.273 387.465 153.823 387.465 153.823 cv
389.747 159.062 li
389.747 159.062 390.764 158.1 390.756 156.777 cv
390.748 155.455 389.512 154.545 389.512 154.545 cv
389.512 154.545 390.251 150.913 387.336 149.581 cv
384.42 148.249 381.634 151.159 381.634 151.159 cv
381.634 151.159 382.491 147.67 378.437 148.61 cv
374.382 149.55 373.826 155.447 373.826 155.447 cv
373.826 155.447 371.119 156.118 370.017 157.997 cv
368.914 159.876 372.063 162.949 372.063 162.949 cv
372.063 162.949 372.87 159.984 377.223 162.906 cv
cp
0 0 0 rgb
f
384.387 162.207 mo
384.457 162.206 li
384.632 162.184 384.757 162.024 384.735 161.849 cv
384.53 160.196 li
384.508 160.021 384.349 159.896 384.173 159.918 cv
383.997 159.94 383.873 160.1 383.895 160.275 cv
384.1 161.928 li
384.118 162.08 384.24 162.193 384.387 162.207 cv
cp
f
388.999 162.151 mo
389.077 162.149 li
389.253 162.123 389.372 161.958 389.346 161.784 cv
389.093 160.139 li
389.065 159.963 388.903 159.843 388.729 159.871 cv
388.554 159.897 388.434 160.061 388.46 160.235 cv
388.713 161.881 li
388.735 162.029 388.856 162.138 388.999 162.151 cv
cp
f
382.747 158.999 mo
382.88 159.011 383.012 158.938 383.069 158.81 cv
383.397 158.072 384.491 158.395 384.501 158.397 cv
384.672 158.451 384.849 158.353 384.9 158.184 cv
384.952 158.015 384.856 157.836 384.688 157.785 cv
384.119 157.611 382.929 157.549 382.484 158.549 cv
382.412 158.711 382.485 158.9 382.646 158.972 cv
382.747 158.999 li
cp
f
389.313 158.821 mo
389.48 158.792 li
389.64 158.716 389.708 158.524 389.632 158.365 cv
389.125 157.298 388.04 157.271 387.536 157.407 cv
387.365 157.452 387.264 157.627 387.31 157.798 cv
387.354 157.969 387.529 158.071 387.7 158.025 cv
387.797 158 388.658 157.808 389.054 158.639 cv
389.104 158.745 389.204 158.811 389.313 158.821 cv
cp
f
384.394 167.438 mo
384.433 167.767 384.529 168.164 384.749 168.363 cv
384.869 168.471 385.015 168.509 385.203 168.483 cv
385.711 168.415 386.002 168.276 386.166 168.156 cv
384.394 167.438 li
cp
385.098 169.083 mo
384.811 169.083 384.555 168.986 384.351 168.8 cv
383.748 168.252 383.776 167.107 383.781 166.979 cv
383.785 166.882 383.836 166.794 383.917 166.742 cv
384.188 166.716 li
386.758 167.757 li
386.896 167.814 386.972 167.965 386.932 168.11 cv
386.91 168.188 386.682 168.88 385.283 169.07 cv
385.098 169.083 li
cp
f
376.586 166.317 mo
376.389 166.242 li
373.52 163.68 li
373.397 163.571 373.388 163.384 373.496 163.262 cv
373.605 163.139 373.791 163.129 373.914 163.238 cv
376.783 165.801 li
376.905 165.91 376.915 166.097 376.807 166.219 cv
376.586 166.317 li
cp
f
373.479 166.288 mo
373.357 166.288 373.244 166.213 373.2 166.093 cv
373.145 165.939 373.224 165.769 373.378 165.713 cv
375.564 164.92 li
375.718 164.865 375.888 164.945 375.943 165.098 cv
375.999 165.251 375.92 165.421 375.766 165.477 cv
373.579 166.27 li
373.479 166.288 li
cp
f
387.744 166.222 mo
387.694 166.218 li
387.533 166.19 387.425 166.038 387.452 165.876 cv
387.81 163.784 386.342 161.458 386.327 161.435 cv
386.239 161.297 386.279 161.114 386.417 161.026 cv
386.552 160.937 386.736 160.977 386.825 161.115 cv
386.891 161.218 388.432 163.655 388.036 165.976 cv
388.012 166.12 387.886 166.222 387.744 166.222 cv
cp
f
384.845 179.366 mo
384.131 179.366 383.306 179.277 382.359 179.054 cv
377.873 177.997 376.835 176.043 376.793 175.961 cv
376.719 175.815 376.777 175.637 376.923 175.563 cv
377.068 175.489 377.244 175.547 377.319 175.691 cv
377.334 175.718 378.324 177.496 382.494 178.478 cv
386.644 179.456 388.24 177.665 388.255 177.646 cv
388.359 177.523 388.546 177.507 388.672 177.613 cv
388.796 177.719 388.812 177.903 388.707 178.028 cv
388.65 178.096 387.545 179.366 384.845 179.366 cv
cp
1 1 1 rgb
f
536.254 368.691 mo
535.616 368.691 535.063 368.216 534.982 367.566 cv
521.014 255.373 li
520.927 254.67 521.426 254.029 522.129 253.941 cv
522.834 253.862 523.473 254.354 523.561 255.057 cv
537.529 367.25 li
537.616 367.953 537.117 368.594 536.414 368.682 cv
536.254 368.691 li
cp
.686275 .647059 .709804 rgb
f
473.543 368.691 mo
473.383 368.682 li
472.68 368.594 472.181 367.953 472.268 367.25 cv
486.236 255.057 li
486.324 254.354 486.964 253.862 487.668 253.941 cv
488.371 254.029 488.87 254.67 488.783 255.373 cv
474.814 367.566 li
474.733 368.216 474.181 368.691 473.543 368.691 cv
cp
f
483.834 258.186 mo
531.254 258.186 li
534.019 258.186 536.26 255.944 536.26 253.18 cv
536.26 250.415 534.019 248.174 531.254 248.174 cv
483.834 248.174 li
481.069 248.174 478.828 250.415 478.828 253.18 cv
478.828 255.944 481.069 258.186 483.834 258.186 cv
cp
.819608 .8 .839216 rgb
f
478.475 258.186 mo
525.895 258.186 li
528.659 258.186 530.9 255.944 530.9 253.18 cv
530.9 250.415 528.659 248.174 525.895 248.174 cv
478.475 248.174 li
475.71 248.174 473.469 250.415 473.469 253.18 cv
473.469 255.944 475.71 258.186 478.475 258.186 cv
cp
.886275 .87451 .898039 rgb
f
525.99 288.393 mo
483.806 288.393 li
483.098 288.393 482.522 287.817 482.522 287.109 cv
482.522 286.401 483.098 285.826 483.806 285.826 cv
525.99 285.826 li
526.698 285.826 527.273 286.401 527.273 287.109 cv
527.273 287.817 526.698 288.393 525.99 288.393 cv
cp
.686275 .647059 .709804 rgb
f
530.899 333.095 mo
478.828 333.095 li
478.12 333.095 477.545 332.52 477.545 331.812 cv
477.545 331.104 478.12 330.528 478.828 330.528 cv
530.899 330.528 li
531.607 330.528 532.183 331.104 532.183 331.812 cv
532.183 332.52 531.607 333.095 530.899 333.095 cv
cp
f
478.09 372.217 mo
478.728 376.08 li
478.791 376.451 479.137 376.704 479.508 376.642 cv
521.454 369.87 li
521.809 369.809 522.064 369.479 522.018 369.114 cv
521.346 363.717 li
520.264 364.007 li
520.264 364.007 520.641 360.078 520.698 356.738 cv
520.763 353.396 519.054 345.039 518.123 344.94 cv
517.38 344.858 506.121 346.221 501.349 346.805 cv
500.145 346.958 499.181 347.862 498.922 349.055 cv
498.457 351.215 497.337 354.563 494.695 356.01 cv
490.64 358.234 481.369 362.064 479.777 364.988 cv
478.613 367.158 478.893 369.603 479.114 370.709 cv
479.139 370.843 479.131 370.973 479.088 371.075 cv
479.017 371.277 478.836 371.438 478.609 371.49 cv
478.485 371.53 li
478.228 371.651 478.068 371.921 478.09 372.217 cv
cp
.937255 .721569 .180392 rgb
f
478.09 372.217 mo
478.728 376.08 li
478.791 376.451 479.137 376.704 479.508 376.642 cv
521.454 369.87 li
521.809 369.809 522.064 369.479 522.018 369.114 cv
521.346 363.717 li
520.264 364.007 li
478.609 371.49 li
478.485 371.53 li
478.228 371.651 478.068 371.921 478.09 372.217 cv
cp
.313726 .470588 .286275 rgb
f
454.831 342.464 mo
456.638 345.938 li
456.813 346.271 457.221 346.404 457.553 346.229 cv
495.319 326.761 li
495.638 326.592 495.778 326.198 495.621 325.866 cv
493.306 320.945 li
492.367 321.558 li
492.367 321.558 491.505 317.706 490.521 314.514 cv
489.545 311.316 485.324 303.904 484.409 304.1 cv
483.677 304.252 473.398 309.046 469.043 311.084 cv
467.946 311.604 467.312 312.762 467.436 313.976 cv
467.665 316.174 467.641 319.703 465.58 321.9 cv
462.415 325.274 454.794 331.795 454.189 335.069 cv
453.757 337.493 454.781 339.729 455.336 340.713 cv
455.401 340.832 455.435 340.958 455.425 341.068 cv
455.421 341.283 455.298 341.491 455.1 341.612 cv
454.994 341.688 li
454.786 341.884 454.719 342.189 454.831 342.464 cv
cp
.937255 .721569 .180392 rgb
f
454.831 342.464 mo
456.638 345.938 li
456.813 346.271 457.221 346.404 457.553 346.229 cv
495.319 326.761 li
495.638 326.592 495.778 326.198 495.621 325.866 cv
493.306 320.945 li
492.367 321.558 li
455.1 341.612 li
454.994 341.688 li
454.786 341.884 454.719 342.189 454.831 342.464 cv
cp
.313726 .470588 .286275 rgb
f
525.991 239.6 mo
525.991 239.6 526.357 273.001 523.374 287.834 cv
520.391 302.667 525.164 347.768 525.164 347.768 cv
491.154 349.178 li
491.154 349.178 488.171 315.913 488.768 296.045 cv
489.364 276.176 494.137 259.105 494.137 259.105 cv
491.75 240.347 li
525.991 239.6 li
cp
.737255 .341176 .290196 rgb
f
492.74 240.131 mo
492.74 240.131 455.33 255.731 450.579 271.186 cv
445.827 286.64 460.833 318.388 460.833 318.388 cv
488.141 305.673 li
488.141 305.673 481.518 285.604 482.621 284.095 cv
483.726 282.587 492.74 279.406 492.74 279.406 cv
501.756 255.057 li
492.74 240.131 li
cp
f
489.882 281.997 mo
489.688 281.979 489.57 281.833 489.588 281.67 cv
489.6 281.56 490.774 270.544 492.307 264.809 cv
493.811 259.179 li
485.268 249.111 li
485.162 248.986 485.177 248.8 485.302 248.694 cv
485.427 248.589 485.613 248.604 485.719 248.729 cv
494.362 258.914 li
494.425 258.988 494.447 259.088 494.423 259.182 cv
492.879 264.961 li
491.358 270.651 490.188 281.622 490.176 281.732 cv
490.16 281.884 490.031 281.997 489.882 281.997 cv
cp
1 1 1 rgb
f
475.98 279.227 mo
475.983 279.228 475.942 279.311 475.993 279.581 cv
476.376 281.622 479.79 282.94 481.59 283.499 cv
478.905 280.923 476.445 279.007 475.98 279.227 cv
cp
482.621 284.391 mo
482.555 284.383 li
482.287 284.321 476.003 282.842 475.411 279.69 cv
475.317 279.188 475.415 278.855 475.704 278.703 cv
476.833 278.098 481.066 282.127 482.83 283.885 cv
482.924 283.979 482.944 284.122 482.88 284.238 cv
482.827 284.334 482.728 284.391 482.621 284.391 cv
cp
f
521.184 263.583 mo
521.031 263.541 li
516.011 260.518 515.728 254.774 515.725 254.717 cv
515.719 254.554 515.846 254.416 516.009 254.409 cv
516.175 254.41 516.31 254.53 516.316 254.693 cv
516.318 254.748 516.596 260.179 521.336 263.033 cv
521.477 263.118 521.521 263.3 521.438 263.439 cv
521.382 263.532 521.283 263.583 521.184 263.583 cv
cp
f
465.58 322.196 mo
465.459 322.196 465.346 322.122 465.302 322.002 cv
465.246 321.848 465.325 321.679 465.479 321.622 cv
472.438 319.09 li
467.561 317.77 li
467.402 317.728 467.31 317.564 467.353 317.407 cv
467.395 317.25 467.561 317.151 467.715 317.199 cv
473.495 318.763 li
473.62 318.796 473.708 318.906 473.714 319.035 cv
473.719 319.164 473.641 319.282 473.52 319.326 cv
465.682 322.179 li
465.58 322.196 li
cp
f
494.695 356.306 mo
494.546 356.306 494.418 356.193 494.401 356.042 cv
494.383 355.88 494.5 355.733 494.663 355.716 cv
502.618 354.839 li
497.641 352.814 li
497.489 352.753 497.416 352.58 497.478 352.429 cv
497.539 352.277 497.714 352.205 497.863 352.266 cv
503.923 354.73 li
504.049 354.782 504.123 354.911 504.104 355.046 cv
504.086 355.18 503.979 355.284 503.844 355.299 cv
494.728 356.304 li
494.695 356.306 li
cp
f
477.046 183.923 mo
477.046 183.923 478.88 178.51 478.896 177.493 cv
478.939 174.724 474.837 170.359 473.358 170.283 cv
471.879 170.207 472.951 174.333 472.951 174.333 cv
472.951 174.333 470.484 167.962 468.47 166.725 cv
466.456 165.487 466.164 168.221 466.164 168.221 cv
466.164 168.221 465.055 165.736 463.15 165.675 cv
461.245 165.615 462.045 168.603 462.045 168.603 cv
462.045 168.603 459.837 166.553 459.142 169.039 cv
458.447 171.524 461.138 177.755 463.177 180.534 cv
465.215 183.312 466.361 184.155 466.361 184.155 cv
467.338 185.726 li
475.563 188.144 li
477.046 183.923 li
cp
.976471 .533333 .458824 rgb
f
465.102 173.353 mo
464.959 173.353 464.833 173.25 464.81 173.105 cv
464.783 172.944 464.893 172.792 465.054 172.765 cv
468.216 172.248 471.627 172.199 471.661 172.198 cv
471.799 172.185 471.959 172.327 471.961 172.49 cv
471.963 172.654 471.832 172.788 471.669 172.79 cv
471.635 172.791 468.267 172.839 465.149 173.349 cv
465.102 173.353 li
cp
0 0 0 rgb
f
472.736 181.685 mo
472.51 181.579 li
470.354 179.003 472.589 174.396 472.685 174.202 cv
472.757 174.055 472.936 173.994 473.081 174.067 cv
473.228 174.14 473.288 174.317 473.216 174.463 cv
473.193 174.508 471.056 178.919 472.963 181.199 cv
473.068 181.325 473.052 181.511 472.926 181.616 cv
472.736 181.685 li
cp
f
471.086 210.473 mo
478.998 218.256 490.024 221.576 490.024 221.576 cv
490.024 221.576 511.515 194.455 506.403 193.679 cv
497.605 192.345 487.94 196.434 484.154 192.452 cv
480.376 188.47 478.41 182.607 478.41 182.607 cv
462.964 183.406 li
462.964 183.406 463.165 202.688 471.086 210.473 cv
cp
.937255 .721569 .180392 rgb
f
486.007 195.009 mo
483.703 195.874 481.822 196.887 481.823 197.294 cv
481.823 197.311 481.883 197.398 482.157 197.492 cv
483.797 198.051 485.31 196.102 486.007 195.009 cv
cp
482.756 198.186 mo
482.499 198.186 482.235 198.145 481.966 198.053 cv
481.479 197.886 481.231 197.631 481.231 197.295 cv
481.229 196.149 484.968 194.731 486.576 194.175 cv
486.688 194.137 486.817 194.169 486.896 194.26 cv
486.975 194.351 486.991 194.48 486.938 194.588 cv
486.855 194.75 485.093 198.186 482.756 198.186 cv
cp
.313726 .470588 .286275 rgb
f
512.866 193.737 mo
500.529 192.541 490.279 201.199 488.606 213.481 cv
487.61 220.791 li
487.61 220.791 486.137 241.336 486.673 242.274 cv
487.21 243.214 496.645 249.351 507.475 248.814 cv
518.304 248.278 526.415 245.745 527.049 245.526 cv
528.418 245.056 524.607 195.706 524.607 195.303 cv
524.607 195.11 519.483 194.379 512.866 193.737 cv
cp
.937255 .721569 .180392 rgb
f
524.607 195.303 mo
524.607 195.303 551.296 204.423 550.759 225.613 cv
550.223 246.803 514.146 243.315 514.146 243.315 cv
514.146 223.735 li
524.607 195.303 li
cp
f
515.975 223.652 mo
515.846 223.652 515.727 223.567 515.69 223.438 cv
515.646 223.28 515.736 223.116 515.894 223.072 cv
515.988 223.045 525.447 220.37 534.973 219.123 cv
535.129 219.097 535.282 219.216 535.304 219.378 cv
535.325 219.54 535.211 219.688 535.049 219.709 cv
525.569 220.951 516.149 223.614 516.056 223.641 cv
515.975 223.652 li
cp
.313726 .470588 .286275 rgb
f
532.955 216.096 mo
532.872 216.099 li
531.421 216.193 529.073 218.633 527.759 220.193 cv
530.26 219.322 533.506 217.874 533.764 216.826 cv
533.791 216.711 533.798 216.554 533.598 216.353 cv
533.425 216.181 533.214 216.096 532.955 216.096 cv
cp
526.895 221.087 mo
526.8 221.087 526.708 221.041 526.652 220.961 cv
526.578 220.854 526.581 220.713 526.66 220.611 cv
526.814 220.409 530.483 215.662 532.834 215.508 cv
533.293 215.475 533.701 215.62 534.016 215.935 cv
534.398 216.316 534.402 216.707 534.338 216.968 cv
533.871 218.867 527.687 220.854 526.982 221.073 cv
526.895 221.087 li
cp
f
525.397 243.611 mo
516.56 243.611 li
516.396 243.611 516.264 243.479 516.264 243.315 cv
516.264 243.152 516.396 243.02 516.56 243.02 cv
525.397 243.02 li
525.561 243.02 525.693 243.152 525.693 243.315 cv
525.693 243.479 525.561 243.611 525.397 243.611 cv
cp
f
511.408 176.236 mo
511.408 176.236 504.273 176.576 503.869 169.733 cv
503.439 162.448 510.18 161.75 513.042 164.695 cv
515.904 167.641 515.374 170.637 515.374 170.637 cv
515.374 170.637 517.369 168.838 519.546 171.047 cv
521.144 172.668 520.319 175.318 520.319 175.318 cv
520.319 175.318 523.999 175.177 523.656 178.39 cv
523.313 181.604 521.015 183.235 521.015 183.235 cv
511.408 176.236 li
cp
0 0 0 rgb
f
517.933 188.834 mo
517.19 196.417 li
517.19 196.417 515.61 198.462 511.14 198.389 cv
507.81 198.334 506.722 197.474 506.722 197.474 cv
507.558 193.679 li
508.378 189.979 li
516.56 189 li
517.933 188.834 li
cp
.976471 .533333 .458824 rgb
f
516.56 189 mo
516.52 189.206 516.417 189.442 516.268 189.71 cv
514.2 193.332 509.482 193.695 507.558 193.679 cv
508.378 189.979 li
516.56 189 li
cp
0 0 0 rgb
f
508.378 172.532 mo
508.378 172.532 503.469 181.648 504.521 187.083 cv
505.573 192.518 510.482 192.08 513.462 191.291 cv
516.442 190.502 517.933 188.836 517.933 188.836 cv
517.933 188.836 520.563 189.976 522.579 187.609 cv
524.595 185.242 523.719 182.262 522.229 181.473 cv
520.738 180.684 518.81 181.648 518.81 181.648 cv
520.476 179.019 li
520.476 179.019 515.566 164.555 508.378 172.532 cv
cp
.976471 .533333 .458824 rgb
f
518.719 185.763 mo
518.617 185.763 518.518 185.71 518.463 185.616 cv
518.381 185.475 518.429 185.293 518.57 185.211 cv
522.227 183.089 li
522.367 183.007 522.549 183.054 522.631 183.196 cv
522.713 183.337 522.665 183.519 522.523 183.601 cv
518.867 185.723 li
518.719 185.763 li
cp
0 0 0 rgb
f
521.836 186.025 mo
521.734 186.007 li
519.542 185.208 li
519.389 185.152 519.31 184.982 519.365 184.829 cv
519.421 184.676 519.59 184.594 519.745 184.652 cv
521.938 185.452 li
522.091 185.507 522.17 185.677 522.114 185.831 cv
522.07 185.951 521.957 186.025 521.836 186.025 cv
cp
f
514.367 177.146 mo
514.269 177.146 514.173 177.097 514.116 177.007 cv
513.271 175.658 512.005 176.155 511.95 176.177 cv
511.806 176.238 511.627 176.168 511.564 176.017 cv
511.502 175.867 511.572 175.694 511.722 175.631 cv
512.334 175.373 513.724 175.266 514.618 176.693 cv
514.705 176.832 514.663 177.014 514.524 177.101 cv
514.367 177.146 li
cp
f
507.048 176.07 mo
506.953 176.07 506.859 176.024 506.803 175.94 cv
506.711 175.804 506.747 175.62 506.883 175.529 cv
508.097 174.708 509.212 175.5 509.259 175.535 cv
509.391 175.632 509.419 175.817 509.323 175.949 cv
509.226 176.082 509.042 176.11 508.91 176.014 cv
508.872 175.986 508.075 175.437 507.213 176.02 cv
507.048 176.07 li
cp
f
508.065 184.702 mo
507.927 184.702 507.803 184.604 507.775 184.462 cv
507.166 181.328 508.961 179.315 509.037 179.231 cv
509.147 179.112 509.333 179.102 509.454 179.212 cv
509.575 179.321 509.584 179.509 509.475 179.629 cv
509.458 179.648 507.806 181.516 508.355 184.349 cv
508.387 184.51 508.282 184.665 508.122 184.696 cv
508.065 184.702 li
cp
f
506.726 179.716 mo
506.62 179.697 li
506.468 179.639 506.391 179.468 506.449 179.315 cv
507.094 177.623 li
507.151 177.47 507.322 177.395 507.476 177.452 cv
507.628 177.51 507.705 177.681 507.646 177.833 cv
507.002 179.526 li
506.957 179.644 506.845 179.716 506.726 179.716 cv
cp
f
511.515 180.279 mo
511.409 180.26 li
511.257 180.202 511.18 180.031 511.238 179.878 cv
511.883 178.186 li
511.941 178.033 512.109 177.956 512.265 178.015 cv
512.417 178.073 512.494 178.244 512.436 178.396 cv
511.791 180.089 li
511.746 180.207 511.634 180.279 511.515 180.279 cv
cp
f
507.37 174.596 mo
507.37 174.596 508.343 173.152 510.235 173.324 cv
512.128 173.497 513.102 174.937 513.102 174.937 cv
513.102 174.937 511.961 178.04 514.367 179.983 cv
516.773 181.927 518.81 181.648 518.81 181.648 cv
520.74 181.166 li
522.375 178.574 li
517.548 172.23 li
510.924 167.86 li
507.048 170.744 li
507.37 174.596 li
cp
f
509.629 186.647 mo
509.443 186.647 509.279 186.631 509.146 186.605 cv
508.986 186.574 508.882 186.419 508.913 186.259 cv
508.944 186.1 509.096 185.996 509.259 186.024 cv
509.324 186.035 510.809 186.302 511.583 185 cv
511.665 184.858 511.847 184.812 511.988 184.896 cv
512.129 184.98 512.175 185.162 512.091 185.302 cv
511.457 186.37 510.378 186.647 509.629 186.647 cv
cp
f
504.76 177.282 mo
503.483 177.282 502.444 178.494 502.444 179.983 cv
502.444 181.473 503.483 182.685 504.76 182.685 cv
506.036 182.685 507.074 181.473 507.074 179.983 cv
507.074 178.494 506.036 177.282 504.76 177.282 cv
cp
504.76 183.276 mo
503.156 183.276 501.853 181.799 501.853 179.983 cv
501.853 178.167 503.156 176.69 504.76 176.69 cv
506.362 176.69 507.666 178.167 507.666 179.983 cv
507.666 181.799 506.362 183.276 504.76 183.276 cv
cp
.968627 .772549 .215686 rgb
f
512.059 178.024 mo
510.569 178.024 509.357 179.236 509.357 180.725 cv
509.357 182.214 510.569 183.426 512.059 183.426 cv
513.548 183.426 514.76 182.214 514.76 180.725 cv
514.76 179.236 513.548 178.024 512.059 178.024 cv
cp
512.059 184.018 mo
510.243 184.018 508.766 182.541 508.766 180.725 cv
508.766 178.909 510.243 177.432 512.059 177.432 cv
513.874 177.432 515.352 178.909 515.352 180.725 cv
515.352 182.541 513.874 184.018 512.059 184.018 cv
cp
f
509.203 180.279 mo
507.37 180.279 li
507.207 180.279 507.074 180.147 507.074 179.983 cv
507.074 179.82 507.207 179.688 507.37 179.688 cv
509.203 179.688 li
509.366 179.688 509.499 179.82 509.499 179.983 cv
509.499 180.147 509.366 180.279 509.203 180.279 cv
cp
f
520.74 181.462 mo
520.63 181.44 li
518.555 180.604 515.128 181.015 515.092 181.019 cv
514.916 181.04 514.781 180.923 514.762 180.761 cv
514.742 180.599 514.857 180.451 515.02 180.432 cv
515.167 180.414 518.636 179.999 520.851 180.892 cv
521.002 180.953 521.076 181.125 521.015 181.276 cv
520.968 181.392 520.857 181.462 520.74 181.462 cv
cp
f
511.047 198.419 mo
507.704 198.419 505.209 197.091 505.169 197.069 cv
505.025 196.991 504.973 196.812 505.051 196.668 cv
505.129 196.524 505.31 196.473 505.452 196.55 cv
505.516 196.584 511.852 199.943 517.723 195.632 cv
517.854 195.535 518.039 195.563 518.136 195.695 cv
518.232 195.827 518.204 196.012 518.072 196.108 cv
515.663 197.878 513.183 198.419 511.047 198.419 cv
cp
.313726 .470588 .286275 rgb
f
493.82 240.791 mo
505.087 240.244 li
506.275 240.186 507.192 239.176 507.135 237.987 cv
506.087 216.416 li
490.517 217.173 li
491.564 238.744 li
491.622 239.932 492.632 240.849 493.82 240.791 cv
cp
.94902 .317647 .231373 rgb
f
490.517 217.173 mo
490.541 217.681 494.047 217.923 498.346 217.714 cv
502.646 217.506 506.111 216.924 506.087 216.416 cv
506.063 215.908 502.557 215.666 498.257 215.874 cv
493.957 216.083 490.491 216.664 490.517 217.173 cv
cp
.886275 .87451 .898039 rgb
f
506.403 222.936 mo
506.566 226.305 li
506.566 226.305 497.095 227.409 496.851 228.808 cv
496.607 230.205 498.826 231.566 498.826 231.566 cv
498.826 231.566 497.729 234.467 498.009 235.532 cv
498.289 236.598 499.034 241.705 501.756 242.783 cv
504.478 243.86 515.637 238.647 515.637 238.647 cv
515.975 227.279 li
515.975 227.279 511.54 224.321 506.403 222.936 cv
cp
.976471 .533333 .458824 rgb
f
498.826 231.862 mo
498.671 231.862 498.541 231.742 498.531 231.586 cv
498.521 231.423 498.644 231.282 498.807 231.271 cv
502.129 231.053 li
502.329 231.03 502.434 231.166 502.443 231.328 cv
502.454 231.491 502.331 231.632 502.168 231.643 cv
498.846 231.861 li
498.826 231.862 li
cp
0 0 0 rgb
f
509.203 226.601 mo
506.566 226.601 li
506.403 226.601 506.271 226.468 506.271 226.305 cv
506.271 226.142 506.403 226.009 506.566 226.009 cv
509.203 226.009 li
509.366 226.009 509.499 226.142 509.499 226.305 cv
509.499 226.468 509.366 226.601 509.203 226.601 cv
cp
f
63.7529 372.085 mo
63.5923 372.074 li
62.8872 371.987 62.3867 371.344 62.4746 370.639 cv
76.4844 258.11 li
76.5723 257.405 77.207 256.9 77.9204 256.993 cv
78.6255 257.08 79.126 257.724 79.0381 258.429 cv
65.0283 370.957 li
64.9473 371.608 64.3926 372.085 63.7529 372.085 cv
cp
.686275 .647059 .709804 rgb
f
126.651 372.085 mo
126.012 372.085 125.457 371.608 125.376 370.957 cv
111.366 258.429 li
111.278 257.724 111.779 257.08 112.484 256.993 cv
113.192 256.901 113.832 257.405 113.92 258.11 cv
127.93 370.639 li
128.018 371.344 127.517 371.987 126.812 372.074 cv
126.651 372.085 li
cp
f
116.33 261.249 mo
68.7686 261.249 li
65.9961 261.249 63.748 259.001 63.748 256.229 cv
63.748 253.455 65.9961 251.208 68.7686 251.208 cv
116.33 251.208 li
119.103 251.208 121.351 253.455 121.351 256.229 cv
121.351 259.001 119.103 261.249 116.33 261.249 cv
cp
.819608 .8 .839216 rgb
f
121.706 261.249 mo
74.144 261.249 li
71.3711 261.249 69.1235 259.001 69.1235 256.229 cv
69.1235 253.455 71.3711 251.208 74.144 251.208 cv
121.706 251.208 li
124.478 251.208 126.726 253.455 126.726 256.229 cv
126.726 259.001 124.478 261.249 121.706 261.249 cv
cp
.886275 .87451 .898039 rgb
f
116.357 291.545 mo
74.0469 291.545 li
73.3364 291.545 72.7607 290.97 72.7607 290.259 cv
72.7607 289.548 73.3364 288.973 74.0469 288.973 cv
116.357 288.973 li
117.068 288.973 117.645 289.548 117.645 290.259 cv
117.645 290.97 117.068 291.545 116.357 291.545 cv
cp
.686275 .647059 .709804 rgb
f
121.351 336.381 mo
69.1235 336.381 li
68.4126 336.381 67.8364 335.806 67.8364 335.095 cv
67.8364 334.384 68.4126 333.809 69.1235 333.809 cv
121.351 333.809 li
122.061 333.809 122.637 334.384 122.637 335.095 cv
122.637 335.806 122.061 336.381 121.351 336.381 cv
cp
f
108.139 291.107 mo
111.499 283.017 li
128.535 290.259 li
125.057 303.333 li
108.139 291.107 li
cp
.968627 .560784 .466667 rgb
f
173.26 310.261 mo
173.26 310.261 189.904 318.234 194.825 322.881 cv
199.746 327.528 199.996 330.693 199.43 332.249 cv
198.863 333.805 164.434 332.261 164.434 332.261 cv
164.434 332.261 164.061 322.804 160.393 323.414 cv
156.725 324.024 158.729 332.496 158.729 332.496 cv
148.319 332.398 li
148.319 332.398 147.839 322.996 148.595 319.306 cv
149.41 315.323 151.722 309.946 151.722 309.946 cv
173.26 310.261 li
cp
.94902 .317647 .231373 rgb
f
169.706 307.512 mo
169.706 307.512 184.029 315.592 181.415 316.432 cv
178.801 317.271 164.041 317.412 159.713 315.837 cv
155.386 314.263 151.766 309.777 151.766 309.777 cv
151.766 305.126 li
168.015 301.68 li
169.706 307.512 li
cp
.968627 .560784 .466667 rgb
f
126.74 302.773 mo
126.74 302.773 137.171 318.472 139.057 325.122 cv
140.943 331.772 139.507 334.68 138.197 335.748 cv
136.886 336.816 107.493 317.455 107.493 317.455 cv
107.493 317.455 112.111 308.965 108.574 307.582 cv
105.038 306.198 102.365 314.678 102.365 314.678 cv
93.2852 309.148 li
93.2852 309.148 97.7817 300.649 100.375 297.808 cv
103.172 294.741 108.012 291.232 108.012 291.232 cv
126.74 302.773 li
cp
.94902 .317647 .231373 rgb
f
125.061 298.503 mo
125.061 298.503 133.399 313.082 130.667 312.451 cv
127.935 311.819 114.913 304.225 111.941 300.58 cv
108.968 296.936 108.139 291.107 108.139 291.107 cv
119.188 292.165 li
125.061 298.503 li
cp
.968627 .560784 .466667 rgb
f
119.725 243.698 mo
101.373 287.144 li
132.428 298.133 li
143.499 271.852 li
134.322 243.698 li
119.725 243.698 li
cp
.737255 .341176 .290196 rgb
f
79.5913 225.461 mo
79.5913 225.461 75.5493 247.105 83.2129 251.282 cv
89.7715 254.857 129.93 258.686 132.015 260.517 cv
134.101 262.348 148.095 306.746 148.095 306.746 cv
182.333 303.322 li
182.333 303.322 169.959 242.15 160.951 235.924 cv
154.183 231.246 115.995 221.783 115.995 221.783 cv
79.5913 225.461 li
cp
f
103.386 147.41 mo
103.386 147.41 96.2202 144.211 89.8335 148.258 cv
83.4473 152.305 85.8174 161.695 85.8174 161.695 cv
85.8174 161.695 77.2261 170.048 76.2881 178.557 cv
75.3501 187.066 79.7441 189.297 79.7441 189.297 cv
94.1338 182.812 li
99.7983 156.144 li
103.386 147.41 li
cp
0 0 0 rgb
f
119.422 180.573 mo
119.422 180.573 121.515 173.526 118.536 169.603 cv
115.398 165.469 110.293 165.211 110.319 161.797 cv
110.38 153.866 104.631 150.203 104.631 150.203 cv
104.39 181.434 li
119.422 180.573 li
cp
f
123.046 228.642 mo
123.046 228.642 87.1758 234.297 86.7129 230.768 cv
85.6553 222.706 92.6543 179.345 92.6543 179.345 cv
96.248 173.665 li
107.737 175.016 li
107.737 175.016 113.243 175.605 118.63 190.367 cv
124.018 205.129 123.046 228.642 123.046 228.642 cv
cp
.937255 .721569 .180392 rgb
f
95.1201 168.42 mo
95.3276 176.678 li
95.3276 176.678 96.876 179.015 101.717 179.286 cv
105.323 179.488 106.417 177.611 106.417 177.611 cv
105.363 170.407 li
96.5918 168.707 li
95.1201 168.42 li
cp
.968627 .560784 .466667 rgb
f
96.5918 168.707 mo
96.6187 168.932 96.7109 169.196 96.8521 169.498 cv
98.8032 173.577 103.877 174.339 105.96 174.473 cv
105.363 170.407 li
96.5918 168.707 li
cp
0 0 0 rgb
f
106.732 151.538 mo
106.732 151.538 111.326 161.783 109.762 167.579 cv
108.198 173.374 102.923 172.515 99.7617 171.427 cv
96.6001 170.34 95.1191 168.422 95.1191 168.422 cv
95.1191 168.422 92.1855 169.448 90.1909 166.73 cv
88.1963 164.012 89.3779 160.858 91.0518 160.122 cv
92.7251 159.385 94.7354 160.579 94.7354 160.579 cv
93.1401 157.604 li
93.1401 157.604 99.5845 142.347 106.732 151.538 cv
cp
.968627 .560784 .466667 rgb
f
94.7354 160.579 mo
94.7354 160.579 99.1597 161.472 102.233 156.549 cv
105.306 151.625 105.024 149.604 105.024 149.604 cv
108.086 154.686 li
108.086 154.686 108.771 151.162 107.361 148.915 cv
105.952 146.668 104.488 147.134 104.488 147.134 cv
94.7334 149.571 li
92.165 157.391 li
94.7354 160.579 li
cp
0 0 0 rgb
f
106.382 164.584 mo
106.295 164.571 li
106.138 164.523 106.05 164.357 106.099 164.2 cv
106.683 162.289 105.251 160.235 105.236 160.215 cv
105.142 160.082 105.174 159.896 105.307 159.801 cv
105.441 159.707 105.626 159.739 105.721 159.872 cv
105.787 159.965 107.336 162.187 106.666 164.374 cv
106.626 164.502 106.509 164.584 106.382 164.584 cv
cp
f
101.804 157.498 mo
101.704 157.48 li
101.55 157.424 101.469 157.254 101.525 157.1 cv
102.311 154.914 103.701 155.268 103.761 155.284 cv
103.919 155.328 104.012 155.491 103.968 155.649 cv
103.925 155.806 103.767 155.902 103.607 155.857 cv
103.56 155.849 102.67 155.667 102.083 157.301 cv
102.041 157.422 101.926 157.498 101.804 157.498 cv
cp
f
108.294 155.916 mo
108.161 155.916 108.041 155.826 108.006 155.691 cv
107.972 155.557 107.824 155.186 107.549 155.077 cv
107.342 154.994 107.074 155.061 106.749 155.27 cv
106.608 155.359 106.426 155.318 106.338 155.181 cv
106.249 155.043 106.289 154.859 106.427 154.771 cv
106.926 154.451 107.378 154.369 107.771 154.526 cv
108.388 154.773 108.575 155.518 108.583 155.55 cv
108.621 155.708 108.523 155.868 108.365 155.907 cv
108.294 155.916 li
cp
f
94.311 165.375 mo
94.0952 165.282 li
91.292 162.329 li
91.1792 162.21 91.1841 162.022 91.3032 161.909 cv
91.4214 161.797 91.6089 161.801 91.7227 161.92 cv
94.5259 164.874 li
94.6387 164.993 94.6338 165.181 94.5151 165.293 cv
94.311 165.375 li
cp
f
91.3496 164.59 mo
91.2056 164.59 91.0796 164.485 91.0571 164.338 cv
91.0317 164.176 91.1426 164.025 91.3047 164 cv
93.2368 163.701 li
93.397 163.673 93.5498 163.787 93.5757 163.949 cv
93.6006 164.111 93.4902 164.263 93.3276 164.288 cv
91.3955 164.586 li
91.3496 164.59 li
cp
f
101.517 179.501 mo
101.093 179.501 100.645 179.474 100.17 179.413 cv
96.0142 178.877 95.0625 176.064 95.0239 175.945 cv
94.9741 175.79 95.0596 175.623 95.2153 175.572 cv
95.3701 175.522 95.5381 175.607 95.5889 175.762 cv
95.6235 175.867 96.48 178.339 100.247 178.824 cv
104.06 179.316 106.194 177.413 106.215 177.393 cv
106.336 177.283 106.523 177.29 106.634 177.411 cv
106.745 177.531 106.738 177.718 106.618 177.829 cv
106.535 177.906 104.768 179.501 101.517 179.501 cv
cp
.737255 .341176 .290196 rgb
f
108.183 160.554 mo
108.039 160.554 107.912 160.448 107.89 160.3 cv
107.613 158.415 li
107.675 158.185 li
108.395 157.295 li
108.498 157.167 108.685 157.148 108.812 157.251 cv
108.94 157.354 108.959 157.541 108.857 157.668 cv
108.219 158.457 li
108.478 160.214 li
108.501 160.376 108.389 160.526 108.227 160.55 cv
108.183 160.554 li
cp
0 0 0 rgb
f
102.572 161.004 mo
102.425 161.004 102.297 160.895 102.278 160.745 cv
102.038 158.855 li
102.026 158.763 102.058 158.671 102.124 158.606 cv
103.178 157.568 li
103.294 157.453 103.482 157.454 103.597 157.572 cv
103.712 157.688 103.711 157.876 103.594 157.991 cv
102.645 158.926 li
102.867 160.67 li
102.888 160.833 102.773 160.981 102.611 161.002 cv
102.572 161.004 li
cp
f
140.407 281.794 mo
140.288 281.794 140.176 281.722 140.13 281.604 cv
137.439 274.698 132.057 261.285 130.943 259.957 cv
129.949 258.769 120.988 257.76 115.209 257.371 cv
115.045 257.36 114.922 257.219 114.933 257.056 cv
114.943 256.892 115.088 256.755 115.249 256.779 cv
116.747 256.88 129.922 257.813 131.398 259.576 cv
132.852 261.311 140.364 280.57 140.683 281.39 cv
140.743 281.542 140.667 281.714 140.515 281.773 cv
140.407 281.794 li
cp
1 1 1 rgb
f
136.249 251.948 mo
136.145 251.957 li
134.7 252.195 132.718 256.573 131.763 259.032 cv
133.309 257.999 136.751 255.498 137.113 253.494 cv
137.196 253.035 137.105 252.645 136.833 252.301 cv
136.604 252.011 136.402 251.948 136.249 251.948 cv
cp
131.171 260.063 mo
130.983 259.996 li
130.886 259.917 130.849 259.785 130.892 259.667 cv
131.181 258.857 133.782 251.744 136.048 251.372 cv
136.376 251.32 136.856 251.373 137.299 251.934 cv
137.678 252.411 137.811 252.972 137.698 253.6 cv
137.184 256.442 131.563 259.876 131.325 260.021 cv
131.171 260.063 li
cp
f
103.838 165.963 mo
103.809 166.083 103.795 166.23 103.841 166.368 cv
103.894 166.522 104.016 166.643 104.217 166.735 cv
104.658 166.938 105.159 166.81 105.521 166.651 cv
103.838 165.963 li
cp
104.711 167.432 mo
104.467 167.432 104.215 167.388 103.969 167.274 cv
103.614 167.111 103.382 166.868 103.277 166.551 cv
103.099 166.012 103.375 165.487 103.407 165.429 cv
103.48 165.296 103.641 165.243 103.779 165.297 cv
106.315 166.334 li
106.415 166.375 106.484 166.466 106.498 166.572 cv
106.511 166.679 106.466 166.784 106.379 166.848 cv
106.338 166.878 105.575 167.432 104.711 167.432 cv
cp
0 0 0 rgb
f
151.891 196.357 mo
152.429 194.54 li
152.429 194.54 160.26 190.057 164.875 188.845 cv
166.816 188.334 169.316 189.301 166.817 191.454 cv
165.469 192.616 164.676 194.104 164.676 194.104 cv
164.676 194.104 168.34 193.456 170.963 192.174 cv
172.644 191.353 175.444 187.532 176.651 188.599 cv
178.573 190.296 175.622 193.996 175.622 193.996 cv
175.622 193.996 177.386 189.049 179.205 191.31 cv
181.017 193.562 174.042 202.815 171.032 204.848 cv
168.023 206.881 153.435 207.791 153.435 207.791 cv
151.891 196.357 li
cp
.968627 .560784 .466667 rgb
f
168.23 196.575 mo
167.924 196.575 167.658 196.511 167.449 196.367 cv
167.313 196.274 167.279 196.09 167.372 195.955 cv
167.464 195.819 167.648 195.786 167.784 195.878 cv
168.816 196.586 172.894 193.988 175.22 192.183 cv
175.349 192.083 175.536 192.105 175.637 192.235 cv
175.737 192.365 175.714 192.551 175.584 192.651 cv
174.654 193.374 170.406 196.575 168.23 196.575 cv
cp
0 0 0 rgb
f
171.241 198.908 mo
171.074 198.855 li
164.508 194.349 li
164.374 194.256 164.339 194.072 164.432 193.937 cv
164.524 193.801 164.708 193.768 164.844 193.86 cv
171.322 198.306 li
174.586 198 176.649 194.979 176.67 194.948 cv
176.761 194.812 176.946 194.777 177.082 194.866 cv
177.218 194.958 177.254 195.142 177.163 195.278 cv
177.072 195.415 174.88 198.634 171.264 198.907 cv
171.241 198.908 li
cp
f
107.737 175.016 mo
113.144 207.374 li
113.144 207.374 118.765 216.895 132.064 219.27 cv
133.336 219.493 134.593 219.607 135.835 219.622 cv
135.822 219.524 li
136.136 219.544 136.648 219.514 137.28 219.452 cv
142.38 218.949 147.263 217.132 151.506 214.258 cv
154.621 212.148 157.779 209.937 157.771 209.646 cv
157.771 209.646 154.437 192.238 152.441 193.117 cv
149.134 194.567 137.647 194.333 135.745 192.542 cv
133.642 190.579 120.176 181.146 117.122 178.375 cv
112.761 174.407 107.737 175.016 107.737 175.016 cv
cp
.937255 .721569 .180392 rgb
f
137.093 193.701 mo
135.854 195.15 133.874 197.808 134.196 199.04 cv
134.268 199.311 134.453 199.487 134.782 199.593 cv
135.124 199.703 135.418 199.664 135.678 199.47 cv
136.759 198.664 137.053 195.524 137.093 193.701 cv
cp
135.145 200.249 mo
134.97 200.249 134.788 200.218 134.6 200.158 cv
134.082 199.991 133.745 199.656 133.622 199.19 cv
133.099 197.194 136.755 193.167 137.174 192.714 cv
137.255 192.626 137.383 192.596 137.496 192.639 cv
137.609 192.681 137.685 192.789 137.688 192.909 cv
137.693 193.143 137.795 198.632 136.032 199.946 cv
135.762 200.147 135.465 200.249 135.145 200.249 cv
cp
.737255 .341176 .290196 rgb
f
123.018 218.467 mo
122.817 218.443 122.703 218.295 122.723 218.133 cv
122.738 218.012 124.253 205.998 124.103 201.691 cv
123.785 192.705 117.212 186.024 117.146 185.958 cv
117.03 185.842 117.03 185.654 117.146 185.538 cv
117.263 185.422 117.45 185.423 117.566 185.538 cv
117.634 185.606 124.37 192.445 124.695 201.67 cv
124.849 206.025 123.375 217.712 123.312 218.207 cv
123.292 218.357 123.165 218.467 123.018 218.467 cv
cp
f
109.409 220.654 mo
109.409 220.654 113.066 218.875 114.83 218.484 cv
114.879 218.474 li
116.198 218.186 122.5 217.825 123.018 218.17 cv
123.982 218.813 123.901 220.272 122.922 220.896 cv
121.526 221.783 li
121.526 221.783 123.89 222.307 127.857 224.481 cv
131.825 226.656 131.021 228.467 131.021 228.467 cv
131.021 228.467 133.531 230.219 132.387 231.28 cv
131.242 232.341 127.056 231.078 127.056 231.078 cv
127.056 231.078 132.31 233.302 130.059 234.414 cv
127.808 235.525 122.962 234.974 122.962 234.974 cv
122.962 234.974 112.311 236.412 108.957 232.603 cv
105.603 228.794 109.409 220.654 109.409 220.654 cv
cp
.968627 .560784 .466667 rgb
f
121.18 221.9 mo
119.04 221.604 li
118.878 221.582 118.764 221.432 118.787 221.27 cv
118.809 221.107 118.962 220.995 119.122 221.017 cv
121.221 221.31 li
121.383 221.332 121.496 221.482 121.474 221.645 cv
121.453 221.793 121.326 221.9 121.18 221.9 cv
cp
0 0 0 rgb
f
130.787 228.462 mo
130.693 228.447 li
122.571 225.764 li
122.416 225.712 122.332 225.544 122.383 225.389 cv
122.434 225.232 122.599 225.148 122.758 225.199 cv
130.88 227.883 li
131.035 227.935 131.12 228.103 131.068 228.258 cv
131.028 228.383 130.911 228.462 130.787 228.462 cv
cp
f
127.603 231.524 mo
127.508 231.509 li
122.417 229.807 li
122.262 229.755 122.178 229.587 122.23 229.432 cv
122.282 229.275 122.453 229.192 122.606 229.244 cv
127.696 230.946 li
127.852 230.998 127.936 231.166 127.883 231.321 cv
127.842 231.446 127.726 231.524 127.603 231.524 cv
cp
f
95.29 175.18 mo
95.29 175.18 65.9077 184.428 65.9297 213.138 cv
65.9458 234.6 107.351 235.236 108.625 235.252 cv
111.076 235.282 114.109 217.561 113.353 216.859 cv
112.596 216.158 90.0635 203.274 90.0635 203.274 cv
95.29 175.18 li
cp
.937255 .721569 .180392 rgb
f
83.7905 203.619 mo
83.2285 203.619 82.75 203.734 82.4043 204.008 cv
82.3071 204.086 82.083 204.28 82.1255 204.409 cv
82.3691 205.145 86.3838 205.744 90.3569 205.947 cv
88.5195 204.933 85.6841 203.619 83.7905 203.619 cv
cp
106.799 211.605 mo
106.707 211.591 li
91.4741 206.588 li
89.2217 206.517 82.0815 206.165 81.562 204.596 cv
81.481 204.351 81.4976 203.97 82.0361 203.543 cv
84.4863 201.604 91.3242 205.817 91.6787 206.038 cv
106.892 211.026 li
107.047 211.078 107.132 211.245 107.081 211.401 cv
107.04 211.526 106.924 211.605 106.799 211.605 cv
cp
.737255 .341176 .290196 rgb
f
287.484 371.069 mo
286.845 371.069 286.291 370.593 286.21 369.941 cv
272.2 257.412 li
272.112 256.707 272.612 256.063 273.317 255.977 cv
274.006 255.886 274.666 256.388 274.753 257.094 cv
288.763 369.623 li
288.851 370.328 288.351 370.972 287.646 371.059 cv
287.484 371.069 li
cp
.686275 .647059 .709804 rgb
f
224.586 371.069 mo
224.426 371.059 li
223.721 370.972 223.22 370.328 223.308 369.623 cv
237.318 257.094 li
237.406 256.389 238.038 255.881 238.754 255.977 cv
239.459 256.063 239.96 256.707 239.872 257.412 cv
225.862 369.941 li
225.781 370.593 225.226 371.069 224.586 371.069 cv
cp
f
234.908 260.232 mo
282.47 260.232 li
285.243 260.232 287.491 257.984 287.491 255.212 cv
287.491 252.439 285.243 250.191 282.47 250.191 cv
234.908 250.191 li
232.136 250.191 229.888 252.439 229.888 255.212 cv
229.888 257.984 232.136 260.232 234.908 260.232 cv
cp
.819608 .8 .839216 rgb
f
229.533 260.232 mo
277.095 260.232 li
279.868 260.232 282.115 257.984 282.115 255.212 cv
282.115 252.439 279.868 250.191 277.095 250.191 cv
229.533 250.191 li
226.76 250.191 224.513 252.439 224.513 255.212 cv
224.513 257.984 226.76 260.232 229.533 260.232 cv
cp
.886275 .87451 .898039 rgb
f
277.191 290.529 mo
234.88 290.529 li
234.17 290.529 233.594 289.954 233.594 289.243 cv
233.594 288.532 234.17 287.957 234.88 287.957 cv
277.191 287.957 li
277.903 287.957 278.478 288.532 278.478 289.243 cv
278.478 289.954 277.903 290.529 277.191 290.529 cv
cp
.686275 .647059 .709804 rgb
f
282.115 335.365 mo
229.888 335.365 li
229.178 335.365 228.601 334.79 228.601 334.079 cv
228.601 333.368 229.178 332.793 229.888 332.793 cv
282.115 332.793 li
282.826 332.793 283.401 333.368 283.401 334.079 cv
283.401 334.79 282.826 335.365 282.115 335.365 cv
cp
f
209.126 191.429 mo
209.126 191.429 213.494 191.751 216.483 191.838 cv
219.473 191.925 218.047 206.159 218.047 206.159 cv
218.047 206.159 208.829 203.661 201.709 198.484 cv
194.59 193.308 209.126 191.429 209.126 191.429 cv
cp
.698039 .403922 .337255 rgb
f
191.757 193.016 mo
191.757 193.016 203.445 202.024 206.015 198.701 cv
208.24 195.823 208.946 189.089 208.946 189.089 cv
208.946 189.089 207.326 178.425 202.461 180.178 cv
196.519 182.317 191.757 193.016 191.757 193.016 cv
cp
f
202.574 191.225 mo
201.282 191.633 li
197.247 178.848 li
198.539 178.44 li
202.574 191.225 li
cp
.819608 .8 .839216 rgb
f
198.481 180.508 mo
195.336 181.5 191.982 179.755 190.989 176.611 cv
186.445 162.214 li
197.834 158.619 li
202.378 173.016 li
203.371 176.161 201.626 179.515 198.481 180.508 cv
cp
f
197.761 178.228 mo
195.33 178.995 192.737 177.646 191.97 175.215 cv
190.58 170.813 li
199.384 168.034 li
200.774 172.436 li
201.542 174.867 200.192 177.46 197.761 178.228 cv
cp
.968627 .772549 .215686 rgb
f
197.834 158.619 mo
197.959 159.018 195.512 160.146 192.367 161.138 cv
189.222 162.131 186.571 162.612 186.445 162.214 cv
186.319 161.815 188.767 160.688 191.912 159.695 cv
195.057 158.702 197.708 158.22 197.834 158.619 cv
cp
.886275 .87451 .898039 rgb
f
199.384 168.034 mo
199.51 168.433 197.642 169.378 195.21 170.146 cv
192.779 170.913 190.706 171.212 190.58 170.813 cv
190.455 170.415 192.323 169.469 194.754 168.702 cv
197.186 167.935 199.259 167.636 199.384 168.034 cv
cp
1 1 1 rgb
f
205.006 180.557 mo
206.04 181.699 205.589 183.703 204.073 184.679 cv
201.191 186.534 197.207 188.715 197.404 186.445 cv
197.584 184.36 199.686 182.13 201.382 180.649 cv
202.539 179.64 204.134 179.592 205.006 180.557 cv
cp
.698039 .403922 .337255 rgb
f
191.757 193.016 mo
191.757 193.016 184.549 188.714 184.547 187.466 cv
184.543 185.905 190.343 187.865 190.343 187.865 cv
190.343 187.865 189.467 185.037 190.176 184.585 cv
191.138 183.973 193.087 184.23 193.087 184.23 cv
193.087 184.23 192.139 182.046 193.203 181.094 cv
194.247 180.159 199.875 182.673 199.875 182.673 cv
195.667 190.502 li
191.757 193.016 li
cp
f
204.705 195.354 mo
204.496 195.269 li
201.375 192.188 202.362 187.602 202.943 185.744 cv
201.639 186.567 li
201.5 186.656 201.316 186.613 201.229 186.474 cv
201.142 186.335 201.184 186.152 201.322 186.065 cv
203.35 184.786 li
203.459 184.716 203.603 184.727 203.701 184.811 cv
203.8 184.896 203.832 185.035 203.781 185.154 cv
203.755 185.214 201.23 191.21 204.913 194.846 cv
205.03 194.961 205.031 195.149 204.916 195.266 cv
204.705 195.354 li
cp
0 0 0 rgb
f
208.003 189.511 mo
208.132 189.919 205.516 191.108 202.161 192.167 cv
198.806 193.226 195.982 193.754 195.853 193.346 cv
195.724 192.938 198.34 191.75 201.695 190.69 cv
205.05 189.631 207.875 189.104 208.003 189.511 cv
cp
.819608 .8 .839216 rgb
f
199.528 187.105 mo
198.969 187.105 198.228 187.019 197.313 186.728 cv
195.159 186.042 193.007 184.538 192.916 184.474 cv
192.782 184.379 192.75 184.194 192.844 184.06 cv
192.937 183.926 193.121 183.893 193.257 183.988 cv
193.279 184.003 195.428 185.504 197.493 186.162 cv
199.477 186.793 200.534 186.375 200.544 186.371 cv
200.692 186.306 200.868 186.38 200.931 186.53 cv
200.995 186.681 200.925 186.853 200.775 186.917 cv
200.747 186.93 200.321 187.105 199.528 187.105 cv
cp
0 0 0 rgb
f
197.645 191.09 mo
197.388 191.086 li
194.992 191.014 190.383 188.237 190.188 188.119 cv
190.049 188.034 190.003 187.852 190.088 187.711 cv
190.173 187.571 190.355 187.526 190.496 187.611 cv
190.542 187.64 195.166 190.426 197.405 190.493 cv
198.622 190.53 199.391 190.295 199.699 189.797 cv
200.044 189.236 199.857 188.277 199.14 186.947 cv
199.063 186.803 199.116 186.623 199.261 186.545 cv
199.405 186.469 199.585 186.522 199.663 186.666 cv
200.499 188.218 200.676 189.344 200.203 190.109 cv
199.796 190.768 198.958 191.09 197.645 191.09 cv
cp
f
267.627 161.951 mo
267.627 161.951 270.913 161.525 272.853 164.24 cv
274.793 166.954 273.986 170.158 273.986 170.158 cv
273.986 170.158 278.513 170.626 280.03 174.038 cv
281.541 177.434 280.03 179.935 280.03 179.935 cv
280.03 179.935 283.472 180.642 284.549 184.354 cv
286.539 191.205 283.795 193.516 283.795 193.516 cv
255.88 184.785 li
262.237 159.276 li
267.627 161.951 li
cp
f
217.979 288.735 mo
217.979 316.896 li
230.727 319.01 li
239.962 312.002 li
240.08 284.623 li
217.979 288.735 li
cp
.639216 .356863 .309804 rgb
f
209.556 187.67 mo
209.556 187.67 221.769 190.02 231.242 186.75 cv
240.716 183.481 245.019 180.605 245.019 180.605 cv
241.063 205.531 li
241.063 205.531 235.915 212.106 224.55 210.818 cv
213.064 209.518 204.95 205.787 204.95 205.787 cv
209.556 187.67 li
cp
.737255 .341176 .290196 rgb
f
237.431 284.545 mo
237.431 313.074 li
249.571 321.293 li
256.756 315.675 li
258.478 279.553 li
237.431 284.545 li
cp
.698039 .403922 .337255 rgb
f
242.505 224.934 mo
242.505 224.934 214.955 239.132 210.127 245.611 cv
206.399 250.614 210.834 293.268 210.834 293.268 cv
234.685 294.471 li
240.306 266.59 li
259.987 227.513 li
242.505 224.934 li
cp
.298039 .439216 .270588 rgb
f
279.526 228.234 mo
279.526 228.234 279.526 245.611 278.61 250.495 cv
277.928 254.13 266.977 256.848 266.977 256.848 cv
265.922 295.863 li
234.685 294.471 li
234.685 294.471 233.723 250.762 234.163 246.897 cv
234.603 243.034 255.061 229.309 255.061 229.309 cv
279.526 228.234 li
cp
f
239.501 332.043 mo
239.501 332.043 238.978 308.499 235.32 308.989 cv
231.661 309.48 228.002 312.914 228.002 312.914 cv
228.002 312.914 219.64 308.499 215.981 310.951 cv
212.323 313.404 210.221 318.8 210.221 318.8 cv
189.849 332.043 li
189.849 332.043 187.385 335.968 188.094 337.93 cv
188.647 339.46 219.631 338.603 233.224 338.151 cv
236.729 338.035 239.501 335.335 239.501 332.043 cv
cp
.94902 .584314 .188235 rgb
f
228.992 326.315 mo
228.992 326.315 234.099 313.814 237.397 311.656 cv
240.697 309.498 248.947 316.349 248.947 316.349 cv
248.947 316.349 255.856 309.074 257.556 312.891 cv
259.256 316.707 260.08 330.373 258.792 333.39 cv
257.504 336.406 248.026 341.429 235.574 341.395 cv
229.706 341.378 221.245 339.566 221.239 337.551 cv
221.231 334.381 226.991 328.403 228.992 326.315 cv
cp
1 .65098 .231373 rgb
f
267.754 229.375 mo
267.754 229.375 247.776 229.428 240.6 225.933 cv
239.799 202.589 li
239.799 202.589 247.018 177.962 252.609 177.376 cv
258.201 176.789 263.137 177.53 263.137 177.53 cv
270.034 200.918 li
267.754 229.375 li
cp
f
254.939 176.625 mo
254.939 176.625 254.001 176.898 252.609 177.376 cv
262.229 177.977 li
262.229 177.977 263.524 191.433 263.994 206.864 cv
264.323 217.799 263.975 226.255 263.742 231.07 cv
279.519 230.147 li
279.519 230.147 283.811 187.809 278.69 183.055 cv
273.57 178.301 260.877 176.708 260.877 176.708 cv
254.939 176.625 li
cp
.737255 .341176 .290196 rgb
f
237.431 227.183 mo
240.75 228.234 li
240.32 222.372 243.583 199.504 243.804 194.87 cv
244.139 187.885 252.426 177.606 252.595 177.383 cv
248.926 178.634 242.121 181.31 240.869 184.198 cv
239.142 188.193 237.431 227.183 237.431 227.183 cv
cp
f
262.537 170.626 mo
262.237 178.294 li
262.237 178.294 260.769 180.445 256.268 180.634 cv
252.916 180.775 251.925 179.018 251.925 179.018 cv
252.996 172.339 li
261.167 170.874 li
262.537 170.626 li
cp
.698039 .403922 .337255 rgb
f
262.543 170.158 mo
262.516 170.367 262.427 170.611 262.292 170.889 cv
260.426 174.653 254.326 176.011 252.389 176.108 cv
252.996 172.339 li
262.543 170.158 li
cp
0 0 0 rgb
f
251.969 154.793 mo
251.969 154.793 247.569 164.25 248.947 169.654 cv
250.325 175.058 255.235 174.328 258.187 173.359 cv
261.137 172.391 262.538 170.628 262.538 170.628 cv
262.538 170.628 265.25 171.619 267.138 169.12 cv
269.026 166.621 267.969 163.675 266.424 162.97 cv
264.879 162.264 262.997 163.347 262.997 163.347 cv
264.517 160.604 li
264.517 160.604 258.729 146.348 251.969 154.793 cv
cp
.698039 .403922 .337255 rgb
f
251.924 166.475 mo
251.711 166.384 li
250.27 164.887 251.94 161.928 252.012 161.803 cv
252.094 161.66 252.276 161.612 252.417 161.693 cv
252.559 161.775 252.608 161.956 252.527 162.098 cv
252.512 162.125 251.004 164.795 252.138 165.972 cv
252.252 166.09 252.249 166.278 252.13 166.392 cv
251.924 166.475 li
cp
0 0 0 rgb
f
263.332 167.829 mo
263.125 167.744 li
263.007 167.629 263.005 167.442 263.12 167.324 cv
265.763 164.617 li
265.876 164.499 266.064 164.499 266.182 164.612 cv
266.299 164.727 266.302 164.915 266.187 165.032 cv
263.544 167.739 li
263.332 167.829 li
cp
f
266.093 167.138 mo
266.043 167.134 li
264.253 166.832 li
264.091 166.804 263.982 166.651 264.009 166.49 cv
264.037 166.328 264.192 166.218 264.351 166.247 cv
266.143 166.549 li
266.304 166.576 266.413 166.729 266.386 166.891 cv
266.361 167.036 266.235 167.138 266.093 167.138 cv
cp
f
250.398 159.084 mo
250.255 159.084 250.128 158.98 250.105 158.834 cv
250.08 158.672 250.19 158.521 250.352 158.495 cv
252.053 158.223 li
252.222 158.2 252.368 158.308 252.393 158.469 cv
252.419 158.631 252.309 158.783 252.147 158.809 cv
250.445 159.081 li
250.398 159.084 li
cp
f
257.437 160.297 mo
257.3 160.263 li
254.536 158.815 li
254.391 158.739 254.335 158.56 254.411 158.415 cv
254.487 158.269 254.666 158.211 254.812 158.29 cv
257.575 159.738 li
257.72 159.813 257.776 159.993 257.7 160.138 cv
257.647 160.239 257.544 160.297 257.437 160.297 cv
cp
f
250.344 163.007 mo
250.253 162.993 li
250.097 162.942 250.011 162.775 250.062 162.619 cv
250.567 161.053 li
250.145 160.522 li
250.042 160.394 250.064 160.207 250.192 160.105 cv
250.321 160.003 250.508 160.024 250.609 160.153 cv
251.13 160.808 li
251.192 160.886 251.211 160.989 251.18 161.084 cv
250.626 162.802 li
250.586 162.927 250.469 163.007 250.344 163.007 cv
cp
f
255.166 163.539 mo
255.074 163.524 li
254.918 163.474 254.832 163.307 254.883 163.15 cv
255.387 161.588 li
254.771 160.85 li
254.667 160.724 254.684 160.537 254.81 160.432 cv
254.935 160.326 255.123 160.344 255.228 160.47 cv
255.947 161.334 li
256.012 161.412 256.033 161.518 256.001 161.615 cv
255.447 163.333 li
255.407 163.458 255.291 163.539 255.166 163.539 cv
cp
f
255.727 181.325 mo
252.941 181.325 251.944 179.647 251.9 179.57 cv
251.819 179.428 251.868 179.247 252.01 179.165 cv
252.155 179.083 252.334 179.133 252.416 179.274 cv
252.456 179.343 253.453 180.975 256.36 180.701 cv
259.132 180.446 262.003 178.493 262.032 178.474 cv
262.168 178.381 262.352 178.415 262.445 178.55 cv
262.538 178.686 262.503 178.87 262.368 178.963 cv
262.246 179.047 259.339 181.023 256.415 181.292 cv
256.174 181.314 255.945 181.325 255.727 181.325 cv
cp
1 1 1 rgb
f
253.141 168.487 mo
253.545 168.613 253.988 168.693 254.257 168.605 cv
254.508 168.522 254.655 168.136 254.728 167.775 cv
253.141 168.487 li
cp
253.976 169.235 mo
253.228 169.235 252.359 168.83 252.244 168.774 cv
252.14 168.724 252.074 168.618 252.076 168.502 cv
252.078 168.387 252.146 168.283 252.251 168.235 cv
254.961 167.02 li
255.053 166.978 255.16 166.986 255.246 167.043 cv
255.331 167.099 255.381 167.195 255.379 167.296 cv
255.375 167.458 255.323 168.879 254.442 169.168 cv
254.299 169.216 254.14 169.235 253.976 169.235 cv
cp
0 0 0 rgb
f
261.195 253.63 mo
261.099 253.63 261.007 253.639 260.921 253.657 cv
260.611 253.724 260.401 253.913 260.262 254.253 cv
260.125 254.587 260.141 254.858 260.312 255.107 cv
261.052 256.192 264.319 256.498 266.203 256.546 cv
264.896 255.405 262.563 253.63 261.195 253.63 cv
cp
266.723 257.146 mo
265.478 257.146 260.909 257.036 259.821 255.442 cv
259.541 255.03 259.503 254.542 259.712 254.028 cv
259.924 253.513 260.299 253.184 260.797 253.076 cv
262.894 252.63 266.749 256.222 267.181 256.633 cv
267.269 256.716 267.297 256.844 267.253 256.956 cv
267.209 257.068 267.102 257.143 266.982 257.145 cv
266.929 257.146 266.841 257.146 266.723 257.146 cv
cp
1 .682353 .392157 rgb
f
244.894 327.178 mo
234.056 326.29 li
233.918 326.278 233.806 326.174 233.786 326.036 cv
233.767 325.899 233.844 325.767 233.974 325.717 cv
244.68 321.59 li
235.427 321.59 li
235.263 321.59 235.13 321.457 235.13 321.293 cv
235.13 321.129 235.263 320.996 235.427 320.996 cv
246.275 320.996 li
246.418 320.996 246.541 321.098 246.567 321.238 cv
246.593 321.379 246.515 321.519 246.382 321.57 cv
235.397 325.805 li
244.917 326.585 li
245.081 326.599 245.203 326.742 245.189 326.905 cv
245.176 327.061 245.046 327.178 244.894 327.178 cv
cp
1 1 1 rgb
f
216.707 324.632 mo
216.653 324.627 li
206.312 322.729 li
206.166 322.702 206.062 322.571 206.069 322.423 cv
206.076 322.274 206.192 322.154 206.341 322.142 cv
215.737 321.362 li
210.108 319.075 li
209.957 319.013 209.884 318.84 209.945 318.688 cv
210.007 318.537 210.179 318.463 210.332 318.524 cv
217.112 321.28 li
217.239 321.332 217.314 321.465 217.294 321.601 cv
217.273 321.736 217.162 321.84 217.025 321.852 cv
208.616 322.549 li
216.76 324.043 li
216.921 324.072 217.028 324.228 216.999 324.389 cv
216.972 324.531 216.847 324.632 216.707 324.632 cv
cp
f
265.66 170.158 mo
265.66 171.031 264.952 171.738 264.08 171.738 cv
263.207 171.738 262.499 171.031 262.499 170.158 cv
262.499 169.285 263.207 168.578 264.08 168.578 cv
264.952 168.578 265.66 169.285 265.66 170.158 cv
cp
f
262.997 163.347 mo
261.605 165.301 li
261.412 163.695 li
261.412 163.695 256.421 160.461 255.359 158.09 cv
254.298 155.719 254.674 153.635 254.674 153.635 cv
250.898 157.396 li
250.898 157.396 250.242 151.551 255.359 150.186 cv
260.478 148.821 265.66 155.863 265.66 155.863 cv
265.66 155.863 268.31 156.086 268.957 158.094 cv
269.603 160.102 267.572 164.064 267.572 164.064 cv
267.572 164.064 266.378 162.137 262.997 163.347 cv
cp
0 0 0 rgb
f
226.838 188.732 mo
226.169 190.785 225.532 193.635 226.167 194.391 cv
226.25 194.49 226.407 194.615 226.77 194.549 cv
227.104 194.489 227.344 194.318 227.503 194.026 cv
228.12 192.893 227.392 190.27 226.838 188.732 cv
cp
226.581 195.16 mo
226.14 195.16 225.869 194.959 225.712 194.772 cv
224.539 193.375 226.335 188.337 226.543 187.767 cv
226.586 187.652 226.693 187.575 226.815 187.572 cv
226.916 187.581 227.049 187.642 227.096 187.754 cv
227.176 187.944 229.045 192.432 228.025 194.31 cv
227.778 194.764 227.391 195.041 226.875 195.133 cv
226.77 195.152 226.671 195.16 226.581 195.16 cv
cp
1 1 1 rgb
f
232.862 254.237 mo
232.708 254.237 232.578 254.118 232.566 253.961 cv
232.203 248.812 240.404 237.844 242.053 235.695 cv
236.309 234.121 li
236.151 234.078 236.058 233.915 236.101 233.757 cv
236.145 233.599 236.305 233.508 236.466 233.549 cv
242.638 235.24 li
242.734 235.267 242.81 235.339 242.841 235.434 cv
242.873 235.527 242.854 235.631 242.793 235.71 cv
242.693 235.837 232.779 248.544 233.158 253.92 cv
233.17 254.083 233.047 254.225 232.883 254.236 cv
232.862 254.237 li
cp
1 .682353 .392157 rgb
f
254.52 229.439 mo
254.52 229.439 254.023 228.275 251.388 229.714 cv
249.211 230.902 240.596 236.854 238.021 238.688 cv
235.446 240.523 231.129 248.049 232.471 248.388 cv
233.813 248.726 239.118 243.566 239.118 243.566 cv
239.118 243.566 237.017 251.181 238.362 251.604 cv
239.708 252.026 240.938 249.803 240.938 249.803 cv
240.938 249.803 240.225 252.124 242.053 251.73 cv
243.881 251.337 247.089 243.738 247.089 243.738 cv
247.089 243.738 247.125 249.649 248.445 249.476 cv
249.765 249.302 251.341 242.967 251.341 242.967 cv
251.341 242.967 258.586 243.6 259.938 239.084 cv
261.29 234.569 260.734 231.978 260.734 231.978 cv
254.52 229.439 li
cp
.698039 .403922 .337255 rgb
f
240.6 249.618 mo
240.528 249.609 li
240.37 249.57 240.272 249.409 240.312 249.25 cv
242.135 241.887 li
242.175 241.729 242.334 241.633 242.495 241.67 cv
242.653 241.709 242.75 241.87 242.711 242.029 cv
240.888 249.393 li
240.854 249.527 240.733 249.618 240.6 249.618 cv
cp
0 0 0 rgb
f
239.118 243.863 mo
239.022 243.848 li
238.867 243.795 238.784 243.626 238.837 243.471 cv
239.655 241.07 li
239.708 240.916 239.876 240.831 240.032 240.885 cv
240.187 240.938 240.27 241.106 240.217 241.262 cv
239.399 243.662 li
239.357 243.785 239.242 243.863 239.118 243.863 cv
cp
f
266.431 200.031 mo
266.431 200.031 262.455 208.503 257.325 215.515 cv
253.583 220.629 246.533 229.375 246.533 229.375 cv
264.553 238.009 li
264.553 238.009 283.704 229.245 287.209 213.47 cv
290.715 197.694 278.69 183.055 278.69 183.055 cv
266.431 200.031 li
cp
.737255 .341176 .290196 rgb
f
266.813 195.138 mo
266.697 195.167 li
265.699 195.645 264.923 200.177 264.592 203.473 cv
265.747 202.038 268.137 198.775 267.872 196.615 cv
267.798 196.01 267.521 195.553 267.024 195.216 cv
266.813 195.138 li
cp
264.211 204.686 mo
264.093 204.661 li
263.977 204.611 263.904 204.492 263.915 204.365 cv
263.987 203.458 264.678 195.477 266.44 194.631 cv
266.648 194.532 266.976 194.467 267.358 194.725 cv
267.995 195.157 268.366 195.769 268.461 196.543 cv
268.839 199.632 264.611 204.386 264.432 204.587 cv
264.211 204.686 li
cp
1 1 1 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 24.2.0
%%For: ( ) ()
%%Title: (2204.w037.n003.328B.p1.328-temp_01.eps)
%%CreationDate: 4/21/2022 5:39 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KBj2KIfC8\5^978BT[@G3f[Y=a2AS"oDGd1^9ae'9&I;#babT&g^ZV,elE4`91W]n2R6fb-gKEfX<F*#:OK3S?j\"nq=9!V1
%V573e9hX0.S'q<4hnm8%b$iZ^?c'oEbV=@I6G:mZ$#8j[B"\nc>5<KPhJB<lnj!%UC=g4R?i8F.TN\II:Z\U*ko/ht\#luGV&C'6
%bo=EgZ83C"NAIU4\coL7!W4M,gU0qe;[s;1ISen8J_s](MfV?pNe2En`X'75*7<_G:)sb')uj,gIi)Ek>4&3EY1.5/Qa(4IgZG%J
%"V%+(!0'9+nD=lVQmr4TI](o^UIdnNi+%*oKh\YEp)=9O;(W_J@e?9>ro;n')Zo)MWso#hMY2G8c[*`)RCo/EK*(b?o)c@d1+i9(
%(DU%J#7+J,5p?c!K:>?\D[43P6SgN!C/rkBGZ2Au_S@0A\B6WeA"1[Ff"56X:H?YE(m\s8n=(gHM*UR4&q"%^4V.I2ckN"q2VU`e
%T>8iNDEs#rDhjlud!T-"["3N]_*$#(h0M)[Edim(MH(`YXO7CSaqDaDo.k!3`7Ct0AB0#=%=?doh!Ff#Jn@Y6kah*"K%b5CKLWT=
%ALn[bS$Ff@lY(IaaCnn;GrDm$G>.'<p&kPd/itBiMrq8rCe=?Z+M/+K0)(j#b=ZW"Po4bb#16P\`/pLqX_+CLM63PN>lKN4ca_-@
%P:nY2TL6=3e0HM;5KiLb/HHB+pI-1E=.PiPRU8?Al>Fa%;_F(]#IC((nCp-WD$Kbu&,o>cI^EfaC%0G&n?6]h?dHX)q7MA!#/2#\
%rb<;FX'tL)MaaYkX4]BHZYfVPgK;\.Z']AEMm?4+__Rg=AN]`XeNFG$Goda=:\Y`ajmuS*T?!u-4T:MiA!pd<Ik;FQS#R9_=J/dW
%Q2%$JOSO]WTDVcl.XsAcW/bdu%.V3L=:F__f^do2.K#*8&1RNM\4^l3b(pl5`G^PHrl(`oZ$=`R'`KE6nH4@T0C4tQP`Gg&+_pcg
%b7oj?P?aiuF%ULWE`1k'?Bo$H&`CRiUZ;=%i$GF7&cN<!+cc=6S)TCfR.K2<j7!-d6Q@DM3GE_L`"E%/2aibN!WEgd7hG[=@Yc9.
%jilfF_MQH+J:1$mTYX8mP-!\2jKus:S9U2T*.*\G%A")ipWVBXCu[tF5:hEm8f:&#WB/(is,8qs?S'3.*HC.^iK`pdQ9bYI\s.4q
%P;rA_+'d6j3(os-E^tcF,/]+$:(kZQ:45;i:4(hR-QW_'1.L9DLQBDbs1EX6!<8Vi'8,H]PtO$u4XUeZU.G<o-qCV9f7E4-p."XI
%&hBCU>gh^RLa8+_8(&YqI`-(pl\HK>-:pt4*g&i#<t8C,bT#\E):Rdk^'dr_`'7Pj5=P&=T5!lbd6%@5eLc]3U3HU_EVT:lSc<b:
%rnV_7hHfY)S)lk'n,-NFa1k.5r#\lk'K@LekPmG!q=j*Ds3ni76I-kenLs&Ys";(VGJm?;o;5M=\Ck=GlP9kONk]p1s6gkRcfal0
%@_kA88J&W%)SYBU=c^958%iDT$$,RNd8e\?l5b1lP?6`3==9.DcK[B*<fA^7X@sIfhMp%S_%1i6JeTTgJ?#B,lI1)D-`_D8`Q,fE
%iU>9C*#*mXMU(/;;6/KX9&JL!MPUXkdg;"c<hMa*+VeH>;@EGQ)HL]CFht)?Y<LK6@"8UgjpeF$a:dOk"3DDKo60SmFMCcihZ`*T
%<meH+iNS)9^7a.WrjZ93h[/^Z)6V;,Og*^1>tgYnW@Fc=d\;DX'1YXdhLh(2c+<nm,_<B-l*+_T+3L(GmAT;$(K-k(d7f0IAFj,6
%LR/5t7Z&Zn*<jGLD'K6k0JkME,(FepUDNRB)q=KK$*$)"9Xgl.-]:6afQT*-Y*@f-5>P<Mi^$p(%\>-"jnLeJe@SYpMN[hcVpp*6
%/Jt5&3uY!^ZB;0&c`69'GERJc!A18u\;8V"AXtB)cZrM/\hVfp;U>U8-n\KO)uNHieFR4+/WO@"RW2WE"WPZ)S:l=QU_dd8T$!Ws
%D,.%>*fd0PX*;m5QNg*G="HB9f5M'`ec_>LAE&R.`NkZ,6ki(boFi]/4pn/mik-=h-rN7WVNJq*(m,EM"$RoC>%YgP%Eb.]@iJF1
%>f]Q"`'%bs>K?a)]1Sfr#q8]nHuQU(JY?1B=^dC7&sn>lqM#[kWBjEpoh[j=JRtUu.oeHe:f8[<0)?1eqTN\2a%^)Q<!&JFK,<<C
%7#180`@3&Kks@C#q2F>:e"p-"neIX>MC)/4-N&Ut)-KB+M0#3564976SYGF0>e>1433FC1EDFO[8At0H]u>BVPb\sWLRO4W[k(6M
%,[#]YDX!ts@oe.ZhA^98694?U+q[lem5nCiT`Fi.SR`K+M/usiaH4T73']/)0)e@83Q#N]![MEK:@hWS&t;Upe"SSXZO[!'EL/7p
%TF']3?IlA%gWW+X3mr8QWX=0D8B:&-WYWOK!BIJkM6gs<\<4pcJnC.LAjLY$9CtGn8p/h]Jt@rt+RBsnN5RTn>!7Y'Em@!EL<@mm
%GX,)`Tn"gmpp@\P`B_Oh@AH`lV,8GI=5MK%n=="Z3>djF(SQ&HAMkk()PBeaY!&XJ&CufX6as;'_MAWM@*^;L&f,LNYEPB-;<3X1
%hI?<*4H*&hJA%!p^.ba:R[ZXE$%32A&dbb<98Po.K@VAfG[<!5ZEHnO!u_lgkQP?,bI_*.!l>%mjb:@`>]<68br?_3(eF@s^ur%6
%L[#dh%S!*Q_C:X$&!6l;NF>#&i!U2_U%(C-)U:ED*ne%EP,]4/SAZ=95r&q`l'c,8`J>nAf'Qlc<t8!AbgB6G_<s!$N>Sg^#8g@U
%F`J7XcfKi?P_U`#%]0Jp,"b$oj;&LF30F\r[637G##et?";.H\lOfJN-j`%h;i6u'a4<-+Ke;,5OK''@)(3Q.3Ba(n?rEa$aW#C8
%"e.nPcf$WM/e:<LVb-(d+?dM*`11;^'?<G!i)g&):@heg+CF1JE[Ln_kZCuBKBG_H,s%6s!=c7]bW[GL#rs,2!4[UOJXS<5IX%H>
%IN?j!T+1ZPZC3&,i&\t#TO<kXiSpZ,3n6)+]OaL^V"YmU[n.Z-(J&Tj*=eMmDVmJ!TkAU/@aY]=n8aGcB,k+eQ#T7\A[ukKR%Ocf
%6-)M8k8"<q*\)(@Y&)\+R0YIdd[WW\htt/.ls!;V@?3*a'-!5%Kfgjs9G@e=-ikL=+Q8VmcjP@L"#HXoab-=?l!iS4Vt?Q>Ed=$`
%W^;GXYqM>f&fm3Y(c_K7n:eR9Q_H;=3'`opkTY7pOne>gO$38m$q0Z;_d\NQUJfdel'j^B'ODpP(5&:sE6+tAF!1!MbelS]S8l>I
%7GI)KJ@Tg?!U#A#>^C7EG8Lq)-r^YH'.JlC`rskIP7_@<?cZ%f(*^U,"b7G%c8?>"%pl@IP7m*GjDZ`&h/Ot^OC6HDrj+nI4(No1
%@UZf"bBl'2:fc?\j:^V&(cX#+Y&gU)+m"Ou)JOP?aKd5(B^t\]>0$FDI3PLN0G%n,i>q]D1Qb`d[NL<V/I^k2da5r@e4)b&/mfG*
%TYWKVhYBjj&Q@a%d<lbXkBAHoPmGJ$G8rDOSC>@q2hW&..T;E9.,oap[?17[_Y'7i(q,9)#Dn.Nb)1F1Qq^)(/+g\eF5atm0,&@q
%n%_+SQtSJraSFt.nVY^2O^=4AP\)'$(H!/pKm\*SUks<nm_[a)eImcao/Suh,TgD.9TThP%[T(FK.qn;.gafmc\eTYbMP<p:eg!J
%M'=C?k&lpi3tW:-<t/<Q6b[NNGVitK;LgQ``>H&j'9gA!U'q5A"VDA#c65"[pl3jr:hO7O!'N9.YbXe*-l6tSCH<7_&6L93nLT!U
%U"F1)M%(P\K8L:/6./5'%lYK-X>ko>L!r&I6qD6:Ri+4^=B65-MC&`dUoR,[b)0>1OS<J\$&&G8PiiIsp%3!/01\?NL3'b[#Xsu%
%\mA((K-q=@nssBDKo1fN]:;$3U1@gN-S3ENJI78ZJD(6&LJZK.(aubU5q$J;lJ'9C+Hd#7r](H)gi0r$8U6RA>Vo#LoLh_tK`_rU
%'?$0""lB?u52icp"R.rl@S=W\ddg7GiPpt3=crl^,<RJ/98Hg'iWr(X6i:D6aLF`o2HL)lJi3+)-n#Jd(?Yqc$Q76[-jO`T3XVDG
%kV)-Z@%8i[<De:O3(Ld+jZEWO*h$p90Z7X\o$V`[<C8c(%-05O1^/_69uLKl02-NZ+^7!&:f33Y1,r*OKi&MRELtZ>_?k;q'lj`#
%mqV\r2F3?@Z2iQHSrFtl#oH"3U4=9hl5MS,Un"b>_G\VR691sD'eQZNEt6eXi*h/uYu$+X37rgWY*jNX;aqEA%Zr(c2C'OiktV-m
%$C&^3+s.[3T'Piaen%iEceh=G.+qc&_XV%_"KIQ<Lfjh9,,LkI\KW[Z]!3S1JnA:fO2'_)=`SI,__Ag?("[isR"`hW.r?;)>UklP
%n&iM)bS1HVMa!\k%_-"O`#$*09Cc'pOg@ri68:d^_mQ&(/RpVk'[>[sI,q8%F>jak8Um#nl76lmUcM$?+EV`/h;-/T;JagY_H#<J
%_3;2]N;h68AYlkkd_L'NTT9:5*[W:]D4"ee<+8A;>sh#7$SEWsaufpN\;@.;XD@%iE*f3f[D7?LZsT1PN+HRFi26eX'Yicb0XeNg
%a"]!U,8aEJ<hteeS979gN&2+B\-D,V^g280d^hI_mGmXL+F@!t.-iYelq!L]0+)R7?]&HQV@6CV`?UQp-7_)&DYN-gBP$6M:g>-3
%&3pOTdd$A<5e^pGLKWVa<1I/)NhIg`?Jn0B.BcQSp*iF_qj,oSaC4cdRKJGs`RL&U%E`8<IN\^*p]uRTg"uqN'i^.gNo5H*.8SEh
%H[=+io!<nI>ZXtm+sY&NC.AIn;LlqX&,#UWnpEd&e<e-7o`[D;!JR8CU[D!2&]oB?G-fS0\nN8<8KqrGW[F/FMJc:6O8@.e-$^;Z
%%70?mf<,"JbbO27%Z(^'&lHe=&)E/sISpt@"l)rjqO^@X+2*>eP7_!-)2RfJ([,Pf&rZRG#!o73Xp?aT&iW=JZftd*`g!k"k9I!N
%93tsXKJ,OaE"^)@Gl2oQd3QJF'03m7ib0Os_DrYV",T[C)%\94Ed>=EX*;08Oj30R"r%)IT+IB0*m"/Y6kXNYL2;U$"?QsMr4/ju
%f)7`q",QO+AahOG+\WW/)ei;p,Ake9O=s9ki5\/@i4.'nl$gt3</aD7B?4Y%)I:a0I`LUp\$Fue/5L]"c+g!T$^<GV3=B*\4QR)1
%1#Ltc&u?na:t(Xp&"YkSJik7%+4pBV>kk=l_``H$2Qi^d--7M2&X"5.^TbIF!h'm*^r<W6YT]XmOSr[\QM]#(X@b\UNajEUOhXT5
%==T45LB-tl-a+?K/hf6'd6K?4+.G)A*bahTTF&g'Lc\"f#IsU4I)oe'KRtMiOHh72kT\2MV-J@i`VruZ,=mcpj<Rat^S@_\SPieP
%FQcWqB"cRenT\q"-M8kUTi3R%&Ej,MF8Q1D6f3d5gm#(?G_5fs>[_EbapSkS$TQq.$ADu?p?/GTILf_Z8:Od"jO8FQ-%$%I*aK/?
%3-7K^oadS*#"_#^6O4hFM!si]iKY.8RP/#mDP"%!l"#`TQu%fVpaFjgc\aFSNspV:=sB^!Bg.*MS$b[M^8V5[69U3+&[>`g=/(cX
%*bK7K=&9B'La_@Y>b^_[IaTFX0;]tkrZ'2s+i8Q7*=rEY29;e#5Z8qj;50'PN@L:&Q-9OeVPm6nYo&3"]"0@;\q0[=1F`!JN6,49
%)?jVI?(pVsPgj3:=6X[q8F[9b)r5c`FUng<%Cinj#;<2A\l2kr0r:g[/Im`O#sA,#Oeq'5nRhUnq^.HO&/d!dlJ_O?-9.]u#k3%A
%PEJ:d+nsYq&Ljpq'e,'PfX;qSG/</%<CWu*H'.-'MTiDiX!O>cH!:%lUfoee,*S\]4k`4kmhB](2b"1SHo;?KBJW?T\6XjCQKY=&
%k-2GWR!]3oru<g(6L0Qfb`-4eR^\.'6X6g=l[(()iO6!^cfZK&f%2bNm6Xs*O+)[iNYQ#0jQ\2<Xl+edgnE/[+n(HAU@/FjUs=0O
%WKW`_l%JcjJ5fU55N1OS5E!f8/K[h8O0a7Ud)c"JYO8Mb".,.`IV90t9T4jQD$j<A+0m1M\ZJ>@KA]AjO`$'dc4fIUrZgeFMrN6W
%%gj^6,=A.>3ctRjq_chI2X%UYWMU3m^#.aWE//)W`9NmDX6\SXM8'6HD24AEqi`tC.UQ/8S.i:92c53Rl\>ESDA!WNJQ`589>:!K
%HId--.fXjAO5>ACEOXtXf6U]g?!"C/logd`Wid;cJ(/CGNPok3&D/"09b>m7cOTWY#r_q)^N\#C+[UPQf0?8&Ob&gt<Qmde4f*-d
%]&"[:8Z_4^]uI39\,j+_`/SWH:Ja2ZI35=1ipT6H>a"i4g?(?dcI^-Tg&&N1[$+<lSLE=_+mB1I)>9ZS3>n1?-]2nn^,inYCt?c(
%,e`u?YM\7m#l#B&J'.b`=g-C0`NRZ*qX#\EG8bu$'*JS[[TA4kPo;j.s4@;Epi#TR6+$eZDDgaN`cgaDrn%19ZK:q.O?*\?m<Z,0
%1FT0pcbI8^jjXp6L64N7qB]eW^5$8TI\j;3U;:<hD[%Zi/(CE!ni]SC6?#e?hF%flk[s3d:ou[@L3^<T/KRmiRbpfd%q1)PQ#H/M
%%s3\t`.C;P9qjOuAubrCTiS*c=8P>l-pK$C$4glbel&"!$?0E=DaV\fIJ;KmX.@CY.nP59^KRaE2Z:WqV3K+[40>R5EP5Zfqs*d"
%83uo-q?^pImhCM*F]#-'K4aDI;eZJ65P:KM*ZL;(](-dGN_1AKJo:HCXOdsp8[L)iZHY;2P7W;WkUimdY:'*bP'T,<&S:h3&cX<H
%7tAXa(J_&H:b0#lk5!W-?.:tVQ>#&<DU.Ru9'[fBXo^WQS*`hI)BA]h[=](6ODFC9G)_^sC5HOcQ1)*6oc%FRW98r%fKM:lVRbD`
%G$?oOrjL'-SS>[tV*6G]2GWB*3daSKYLIC[_f@RRlO42gC7&%'8")!+nK3fe[Yg>b)p\Og$U:Q?iS0jXS\9>0T[/<a$'4EBRm0C?
%[#nPgqkdPL+'4$,c,t=0*<<8a6G[KEl$&IC>udodAl,68H>7:9lp^[orb;Bth#oqp0hkkS:9>O&UUA9iTl5Cf,>*BfPhT7AMUhVD
%?4$lZb!!B^A<NVV,68]ImLFs;p0"iX\FRtuBN-JC"Lqj5ETY=!$#o\:mSKjGH`<M<2]AG!Rd>.#<s%/dV=+c7A6Rn@W*EZ:'At,D
%5"mlsERTbJ7^GQ_j4nPV`FeVI'@]WGPY,$Q]4/03)REW1B"ujh^BI3i="Sf$37[:am0Wt(UJYf(3BZ7R$#[#rGD0;6dl\_3=>OW5
%W_)?M/9mNFFMO"i"f%4>[76l)2Z?KAc%_4([*B2B8)^;'GW>*2=NW,$60]]WEaYlYOtVbp7\N[t"AKt)K`nnR7ILSWUO&h@$FY2*
%+pj/?ETk^2$RJDKPWDAi?2i2!aS-T9J@.^_OkQ1VEaokG9M-^Gc9f'E-oYI9i4frJ--2iTBI&p0Xir!"=X<a^d(*id+>23XHDNKW
%ji0mVc!n4d/2rLK-9IMLV^Rj8eYaX\b6?dTlHtl(Y(*($jgeoL)=sdZfhD4F`&m/4c6+,eM(WCl&?"&2(P6Q?\sOsE+J9Lb><dYD
%6dt'!D#'W&X5_`OK4T#7rT472<_d,#b2]$,-n!F+jh"49?!Oagp(/sI6rfOH1Jc.uh^916j=F*2[A28d?MLATW8q$Dj=K<0mn1B7
%qr<-<&5Qn:k0D>PU.:'p7n[qKkP)$nJTAu<q2nAGGe#nW^U43CJ7Ni'IWP,L7_KSeP)*F_Prh>e3I^dMXk!,`KjRej63E6J\ef8D
%UO0YE1]\A%*Xf1:adDTS!?+2kgrDCQ=).,nA9%La5<"NG0i`FN)P9QukEZ/3fWP]WT<g=rCE8771at0*m8c6e9`s1&*Fh>2':?;q
%6%5;\";Vnc^[aDl,Hf(W%tbKm0c\F-k(Ad!#NIE]bVhTu5"4V\DcYRn2aKOI1AO>+`Ru#WInofZZ`U].=AK8kGD#$hJ<ZQpD^W(b
%S5+P2d8A,2q>;l&K2'fIT0sVQ`]Od!h*0$6ld]5r#_"*kdZ=DD+"I@f`]U<t+*ha6[Z="&s/08m-,<qu_Qe-Xl6f`BS>]8CAJ,u;
%d.GMH:(f-&$f5`.3G!Q[G3dDm'cnB_^i((-0I4bM(uqd=VWj5>R2R#k2)\B>A#$]6iYdMcf[QCD',.-n'0VdD)&%CLGJTjuYSgq8
%\[<]KDaL)a:U!Q=p2n'bD(M:H:GS[l7S3X5BD]a#Le`idRIC:c&fI>3hhH5:BOAh+g!D!89T7[tJ4hEW6ToYj1sbXA<d1m=Q=)j0
%J*#9s61lY)dcp-jQ3Vc:g_G9n$.d[FO'cgj417&$8ukh^9**o<ZKjFre)X3A+aba7?`N96MgZS)/:C4O>g%_CV?moTDIO%(N=X8[
%=MUL:O#i-t1Edf^*hU^4*QFX)f5Cud"_4anOruJ6;a&6TUQ]qG8Kph(RqM]0c*h4L%aerVpuQN"Y=qSSNi;04\JKnR!B$>b>UEp_
%.!Jak<%GAl:TtcWK"TNL4isR)V<D2.PsAWRU*i%[,:#b%?bH:RX3HQ7r?fXp4t:_WGU+tSm<TB]YC;6d,Z"d.,_nPQ;Kmi77Ddln
%(R8_mflkd.h'#^tf94dW;Q4`d)7%pA2Y33NGD2>irU0\V+E$,f[Ja](s,WMZe&]D0<GiFhiSgCI_%[m5<gno:...f96qP7PM2BSk
%4&O",E_j_NPUX=%0Zb2>Zb7ag\$=SDP%7<^N1-?T]dS^WRL(]3'>>8/Onfmp]dT^kfSbmqM2>)6$/GIcfo,F5[FK(HareE;[MNLq
%9[6W*7:H4I]dQH32_bMOWqN/4np`")URq+k.&CY1Min4"M4*YX\ecZT-(U-#s#X:r-?2gU,-<RC]U\?+o+LF:S8i"](rGY;_HW(/
%Wm39ADP%[-7$Y+9S:-nqq_aXOb9T[#:<L[6;gS$*/Phe&l*]:021)4PVGaTDi9O(?c1K`^l*\b_5\BH<s-<^3`0=uDRC>*'CB%_E
%2KRHH;QJ&i[@((m:MMb07Hj(smhqN]jd(E"s)\usU)!`Ae*-MSaI,bt"=0@/UY.KhSjisM^Otf;ec0VI%8UL52_GiN[$6h`s!8cQ
%@A5?@9%aO$J$[$s7U^AYLUXW/G^R\JF=-;BQ;M^>$;PJ1,(^JI>Y(\l%PB6=_0=SPG(;IP^KjB`PZ%5#=Hm86\s?e@r7+^7g47N=
%^&^HoVJ)TN1UsCpeD%;C?Y1\"r4r["2CH4tRqm,;ljE&uGOCZg0ep<7s+Q"%%[5jMG%9LL+1?:W-&V5B2SOXhW40R7g[?Dt&:S*<
%_S@$DW=++\Xj;YKK"R>Z$.]07Fn=8OJ-9#ZlToej'aZF5B@0ob*0N#8HHc1=BUpf2K/qe9(pk#.L4_3%2K>22o^eQ;p=2ma:?&iY
%P]=@,'D%hPP*<BeEQ^@%.6O.al1]/.f70^W^s:X0mqhrH[f/>gS(ZmD^E9H.qC`SPXoI6(C1Iio"^'A7'&&)nRdY(;GIHWq>OrkZ
%LOQ\o4'V<iX,P*;YPFJ7(DiVfVsBDW)YanDX7bqV&ZJe`YM)f\[=j<P-:"TC_O\5V#o#b)Gl[s6;:<q4A&[mDYJ_VE0e,<UZ:\"a
%`Cc1G<e?V4H4>8.=qXm/e/3*W@WoHP/42>=OSsX(&t%`/8<ZciXf><i-K@k^`apq3C)^OnJdjuRE`q;p<iK/Qp-phdDq(8*D;YKU
%/:TS$TD])'B)/e'F-`2_+H,[fXP@pOK.\+%M4#o?=#+A85UWMI[tK#SV<f5#BaPT4/p>Uf\C8,?"Wm*u#`!%:`?&jR'PCS$[&-u0
%NM$DDX>sRI6N$heI=.kd0Q?XP#5C07Z7EUgmL6o7[RH5M(?qUN.^R(:/Fi9Y:miV9Ar2jWioNt1L1qEpGS+'qb.l.50=/U?/FbJg
%]M*D+V)fkT0hGS'AdP8Pb5A5i*/T2YU,,?hp5&NdVH0S^P_iVLBi9*s:A/*0agW@P^D9@\35E$G1m-j\L=nj+j+5+X+#HisZk*)W
%^bkI)R`)0g@q&&K-^ef2GY<Ntlj`%B,c6u\S=RUJCER8f0MR(O9^^1'kD\FHY.*:tmS+$QB;[CGr+cX8?TPdhbOt>1X*9$SkbUl#
%9N1XEH\*K[Arj9ZM[>gHa4V,2'Nn1M;^iHm/'1D8_][2A_r:&GeFXOnXe:Y_e-sJ+-cs<*[-9WRI%OO6?]5#777\e[X1&H@`f2cQ
%RZ<t.B[[ck0iM9n/YV&Pj[<>#7(Kq8CobcPJ4pR\l43cj-t]'*j,0&*,`+a1QgWd]ilktG,Z+_H6*a4<@DQ(f@iV"fH^;^>*(Of(
%o,-m0j=uhU0[!tMnee\q`[m0*b@=4!;eC<68]YCLeD0a2mFrNUR!H-cS:F/,Bul<JR03bmSGTF]fF5K;Jm'U[e(dt&cI*"*p1`)=
%2uBG[s"2XYmV:^m6E4'NC00,c6+P?E1l^UW/(I%t`Cf#&E_3.X`'ahH9co%b\lZ'\Gs7/<)i7PHr8$l*%X.`/S(aL[K8-8oFIjb$
%C[r#!8S#[kRe<-qIMim44%p:Bh9rGR;3U[b_d[didKm1,k@Z*cNXZo#fOi/.rNYG0D2o)%;i..,:@l+s"f"'!8\sXOrFG3=#t^@!
%R?1D8m2khe,t^[##LfP`_cIIM`dbU%A.[#j4nCa48^.B3R;M^;LCIUI<5F&q_j?\:VDfBb?o,tW(GB_HMd1WKCr-ltj4g><Spui[
%^J"TK(<cAq*j\u:?WR?9BPnU1c(_c=MrkZIPI"q?(<t*u\N^\N,rgZf6A)fOR*C5n=YTTjd.t"PX(L>G/=`2`F0fiR58haL;\[NZ
%ZKVYY:@%TDA^aGLN5e&M9?*/u4?!c?>U!JC?]!qY53tB!o5DcHPt2IC:@P4q;to59`1JPW+81fo,jBm56(bIc1<.8b9T&E;4U5NQ
%c&URif9;9/ek1b=`(Z8N.YN!Co(_nLWaE?o89%J>iKl%]+7"ba&R+QDeKc#-;=9IB;%XD1aBA.NkJW=-P-[T44m&Y1781*TS[s2j
%;St=70#D/VQ^@V*fl:'phldYU[osN5J?KFr6PZNe$?q22Jpfea:@l=U"\0k'R;WWeITLb?QGA@)fST'o9?O28kqU1MYVKRh[G(Vq
%CYrT0G^#/I<nKHNepnVE[#G$kEmmUe()W@M/$>''Sq]&5licKT"]b>`0]T:"]jpf9:na;lPAE\PiL_(qWM1DAmO-GPS,#=5kl]c,
%f'8+^K7:R0*SW@R,m-++DU`Gf,1ia%ar#JKEj3#lm<YhWS>,OnMIo'"bU4;lO<ZK8-e^#<[LLC.kq#M6Rep-%RO,Sd.b-KZ=s/CF
%G!2d_M?F^+.i]0=nEV?Y\@t<o,f*p9H@?8-F1cK0F@]@>#NIGMg@g)))&Sc8U.P!HQ1ia&OQ_.MM)(&h]$kf-NT2VhQ*E908X.r=
%)os9oIV'_CK+Ba?3AZcs5-Os,[W)p9aKs%oa49FB^54a^pC*(O6qm3'XL$[/-LDA:O_;R*U>%S[\"la[NURU10G-rlikKr76HEhh
%dDmL^6Pd<b.GTO/XW\XU-;dq$ps<8t__ri.:#&4/:PtI2LWFXoEG<)9`0<GD2Vk9A9UV`JpbO[+'*M$>J%!;\1`S-Q5L%Nk:1joN
%Je+:E'ks.f[6r/=,>uS2Fb]>6mBO8l^b[F^@'V^'W"UPpF*A9RF'+S5[jTUr^7D9nPZ]j5%Q1QRbsfu1<gqL%c+-2q4`26Wqr^Pl
%0G/R^4dBDdM%DjBRS/X*^12"Xm*nX_'<+Hu8]WY^8kVmjQu1*dm&n<d9trI,h<F&5$?>QtkMrFHCL&3r8RW$=rmmRk-R.lmZ'mGO
%F6`<;[u1_C-"re7e-Bi9b>tZnB&63jKQC@G1+@6)Bj3.gcj4N7$.;.`RqZN)[;pL0'#?+%SaFsC#LEgK0siFg\_sbk;h+W/IsVY$
%c/l\\<'0SnT.X`,!G0IIo,s<6G$7tH?,,N/#0kYHZOC=`oj`mZReNl5asB"1U?HU1?<r2uS^LN1T@]B-))37!,!MM]JD,PD+U3Qg
%\4ldmQqmZs)SMC8IfK1+r`cha5/NM]>;..+f';..oF320dX.&\+4T"7&=krq':Q6tQ((6##Rb@GIJb>aCuKk^I"WKVT8[9+NXfBA
%`caK,RIicI(jtg0Am14npa1o!jHcu.5OdD8q"+_thglK@h:2=_>,qK:r-4%H!I?34?t`%iMQA;>*YLh+CG^GLr+aSr#98kYo@o4O
%l2;d4ctYKg3=M-=1uA-ulG\8Jl[K-cGib[iKY?6&;*3-<N&eRBo-1pt(GPOHa.j_8kOg;_p&A!VcikH>K,A^(?L$<2r(un;+;G8s
%CD)0'K3r*m%KMCZlgs^U>69LGC[uC$o:(%DV">JKL)TH5Z_bWElg1+uCi,-<fMEE7(`<@0UM7]^:->Lj&B6&j;RKiB%S!%f6mIg_
%+-$MVkEQrlG;ac2/<g=+3==JeKM;M9e`+>B./l5(LAF=HB?<\A_3@`iR?<0OG:j01<sn9NP,ea;4!"HaGa:CmG5Z"]eDD>_dIifd
%4r;pLR"rd0p"u,q8#*O\rS-A#Y,U3fpc\oQ4TV"a<NVL_7uc8lPAut"Ut-"X^H)Mb7(<-C5be.)miK/B'>iL$W/]Sd9EY&E-7Fkn
%BB4eXhYW\uPCu<FY*YtN-l:+a4`6p0EqT8_bg,Nkn18a7MtVV+E]H2<8V?901cA)3Bh+cSV43Uf_i"NT2AY>_$/0hGgoK<d)"/OW
%B"fg:,`-&,.G`N?G+5a9Qu<#GW7+9PWuusZ/SM!kRR&H;Vj+,4SF5'I0=;b+Y#:%(WuX#I5:M;O3Xf3bC+%d=fi;Iqdr'9]$*"PZ
%qMf@4Y?c>Lb91q(DfcoRIH7Co:r]JWU<kChlZ'V3rb0Cq\#T+B^Np_R3n77fPcgF@D73BH?Z-`Y07t?p><bOSV7*R_\9Ou2Y)bO>
%-Cu-;\nkEiWE/+nBZi!NYa!"RZ[H0SS)k?Td@XlE+UAbhERf^g)h%lkeZ.DHWkLeg2R"om>IR'2>J9Q2fA/UceV[<rVJ$hcPAM2G
%,X]I&bB/N58PYQjPt\YfD)LVG84'Z;WGJJ<%n.`(O)F7N@']!qF+osUb,Q^,8T1HaO_("jMFZV6#d9bAW="Hkh[Z=,J2/fM7m+*9
%lWUuD?&(F_frTu#J]5d[,]8&=;THW2mF5aYde;!;eOj%<0XD5?#R;O9>McQ3o34]l-eqPJ%tZ,L0A!@S$ar<ZcZ$m@rnWV,bE?aT
%oSgBMjuU+[lr:$kob2!>6k=_e,`H"bmjP+upY/MmVdAqpW/t1^T`7+`9*8'XF1Vu6X8[R,i?3="LN6/TW7,D[nQMnj]SIf?s".nB
%R["H-psdWP?11ZR@:NL+,1NX.Y%jdKUtWVFXso&k+Oi'-m8_1s7\t9[DaCd446gHK0T#Q<]Cg3mDHlL?rAsR&eC(d'g97n7.HoT+
%NTNH>]pJeAnRJWaQRc<t=.rqs:*$b.NRW-R*;lr&dXFAd\2XIQXl8@K:"k#\D1Q,179/"@U`35,l]QPl&6EY3Wg*e45>7sP%J0$$
%`ma3!]iq1&3c"C-?j;f1XGBYJKF;2jR[*0_1>prG@qokahN%W=+EHOm$[+V^Fp3V`'q1h]X]?_[-0ge*A!rni<>s<?YEag,mP_A*
%el->hV#sF3efn\Q;_-]@95P^ih7b[O/O=<aFp+TZgB!=*MJX1+L^;t/7o&4NV[m:-Nb_H2m_5&O8$Ub-=R$I&*&h8@-X7L/0k#ma
%2)KS<ag*nJ,+G5>d^9AHK?E(;'dhd+&1X`WpU``%d^`3\pMi4Ug(Bdkgc;5m'"*$B92_#n9`hSNViM-^M/jSMZ8dkHW#q0Ph.Vnf
%aMtf*]\bl=7oP"@*9#Sj`M3ra4X/B_.TdL-4lboEY9C3=5\!W/CJilsp8*50TcX/I<B:lN>-,=up`/LmoRmM+j^`_rc!CT!g2(%r
%)X"oZl]J;-E"@`Pi[CltFPI"Wfk^h7g(U3*RH+mPI(uVPDq?W,.E2(C,4qPBc7A9$*t?JFa@@i>\@fAtS>3hq^UVAS>_)H%#F<-p
%S(Fd6o)0sNDna[-5_"l>dMg8Y<kHK\)`3hqEN'LSJ8giRk<Dju-5_)PHVgfq7PgghEt'@(p-f2.<Gm?7ECASZV864M7ai!9r*C2#
%?&pCX'e<q-G/bQZGuI:+l,/2F>bk&JapOE8?W=&#Akk@"<A&'9+)BM]'#g,-BitUHI>@ls,aA,%&Kq^ZMH)S2oFh:**s'WYId)Gj
%5,bHp+`(0Ld?\EVoKh-/"oHRR-mK9B6;K/Of*`lf9f?*=@Q4df=hMR?UR[G6@DO+N[8FX=O2%^=]"tDS(?7og$rrdbRooI4>N@+U
%*U.nI.[5d=dfG?#fL/S75AZVY8iJu1EEK5?IeYjNl<m,+4T/9;!ZOtf1gM.<CeN4]aW@mgcDpl_^h1"6ll@c>KcEH`nnYYEJn;-E
%:am80["bOa?F!K[%AE.GND)tJUi\>%W"_aH5@&,bO9QUp:r=,CMP9J1Q&0*5;fADj5>k((J<fCWYTI^Uq@',$((G[gE#_JJ2QQp(
%+:!%6pOG%(Z[Rt)h+-Q<:7%AFO_=iTd:9@g_#aKAXHc&#A;f?"8LB]PeQT79V]T'7ht-9?UMj)u8i6o<!/%</#Z3JUA'en#>$!n4
%>JW#mP(++2Y)s`S)qH(SB2G]i-\`!0Fkji^O$i(f(#p3AUc+pPTO6H=G%AiR\i%io"9"7rJnh7h%^jff2hjl?7BN+0=%?rka;Gst
%W2],M:%!ujY/F^1:kt\?c.4Rda1^%9hHmj6HjlcBX1hg?"Ci\@Nus*.'o4)t2qj5f4agJflC>=QPpocRc&6l^;]>V47o`,$p@X>I
%&AMVo1OPM=JkI3WIA>pK34H:-Ku!RTRlJ8/im8RgD1AL@D/]TX1`!2SF=G1@^Be\,Nbq`g@:mn*d,&>0Hi<.I=TP+<9k&R+f`5il
%=rAZR:nlepeOSO'Wi0o;DuLa,:hpn,WC4:\,j+W$4A>/^N+Z^U<52]9;9a$L?@b-i2#Zm*`<q+0%XoDfeZSu)(p],ji&B]lUTT>p
%leeA+ZW;%%\[A$19QrLY_5jBbR&0Q3eS9l(.6+NG&i92<lF0;EpQHN>6lcu!B7'^q=%-k@iE0U9#PDgX'_qY@#e>X@m+,tFdT*W&
%',9`hCOFT>DjkoA"*-Co+VV"M!H%CVK<IsKH8945)B-+*e$!_t3]f`3A`:PbEYm8KJtb\A`+a1>;@1&b*lcLp&7"ekW9r3ZIWJW@
%#XqH=.^M5m+?7(:)Q3LFOFh-t-0!&]-se0?/+rijW23Z]b'(q2V2uA6<)8B'b!jHkiK*n>-0QUZF3LFd\#<a1gZ%m8%KEAN;@O2Y
%<5"S)3+lqB][9Be;G1#)]O"2BJqkf=3,G5lfVI5DCoA&D.[6"f;cTIAqgg8hI\QpAbP)RTn9HH"n91p!H'>0]hQuDVf[>=Jf.Wj!
%<Ec@sm2DU2apaZ5Orr%kWEEp\'_AtV9=)kT&k?d\2Z]DAITk5R3)mGU6T)+7EO0]7--.<!1T0BsL,FAZIa<2upC*f"Qha8@3q4VY
%L\e`jkS@o"d.t^`SX]5>?`?XSFith,Xm,l$CB0TqmGWF/O(eJgQVE47a<U32Jp%`RTgP'iiRAjP0K]]+HkcOlXOK]Fd*VIAOhqVB
%g$_Z(%2<MQ&nKdY];!NcWg&S3=P5!aBP?1ujm0>FW(]HeJgds^;r_!5b;`rh"7i^F'>qeJk%U0P%>kY-kNf+9<ueARTTdG,.hXP[
%YUI/C)?*k$Oh,cA^[hUdFcKQ+-@2tGA,Y5$<V2(A++;&2cu5Q\J0MKWTUW^JS(EFjWL\!\^ds%?5@'%Z\bIEd4$o*k[f<Lk@H&I.
%_X1M5Cid(E$l`qGf20G,-qCm;\VI$Dd+[,p<-]Ea3jRrA0O2;^4=L3^J7MaP]o9Gd3B(]$:\%$^'?6;#/@q+Tgb+4L=1P7t3IQ<@
%psEa2p!>^Uhk)JXlfW_Da8Z`.]6=r!Q`C%KkB7Q">`7QsG)>7]0^YIrnN!(l4ZrgL6:K:GhEe(L^N9@D%g1+.1%.u]<t+f+XGMS1
%=)G?$V0XMJc"+?!?+WkjF5^l(YDq3)e:g!0]ro%6%DSe&\9MfFS(&"chB&(BFGl-pb\1c5e!75/2^u_WYN76s9\H3=p9n`OJ5g)@
%&RciR:2b<gK,;))o\1`hN5F<JF)Ri;0/Od6N\5M<GDqNpFLlatV&.D>LX4QGT=)@)EVI@HGQ2OCWjoRHe+ib1B0*a(\WBQN\3H<T
%0>3a*AmK1bF8onF&%Y?uc^M&G)18sG`373akMp+g4tO?u5BH6nmTHd58$mMp"fu>a+29GGL\pi1lfRBYp'^f06!n\f]C?TMmdn<9
%mn2p@[7"B.mOP%5+-u&nnOHaVi6):O>(2E;O.i&FqjHe<q!nDXboL[R>jiR"l/<[ahoo/*a(tI8L2%GYLT<$%Yfc1]@QnIS`NQK8
%lg!Wq-XW50K+EGo/#QaF2sDj5`e1PLekK,:R(rFkpo")9DHq%M+)>r:7tj\rA*c=+@-#m>&$j5_>78Epg]JS\^%?=9r8.;I_SuK:
%$\aofitG:Lk\3<R`.=3?I/6GgC`C!4iSOHSmILWGr:tE=ENf2^[U2udmGla+n+=lsC2WG(k/iMA#unr(@PkC[on?f4KBm_$W;LtF
%$.PB86X$[`&J1uFqura>s5bVY?WUds\TMH1rYbX>I2EFG+ed#k3dU'0+8.I+/,/bn@J6r'F>:882K.$"Q84e65HPWk>X.(MXM9%b
%Q2=s=c<[W?+$TSu[ZXQ7.Va,KjUGEp85NX*rgLO"?Zq<fMVJ$:rN^O.Y<79J^9Y;]_k):)>&mY%GD^aUEN`=;q/bs"`QRnrPBPCe
%<3!W6cQ55s<m+PsbBOkXF7\?^#2I\*cK;`s@d_qGhO!Q9QPV0LF7Z!:mMaF>`cg\DroUcbY`jM2G5_R<q.1k]lFhLNfIh+"LZWX-
%B2p0X[2.%.B<?;bA=KE4[W:b``/-8Dl36gn;pQM-dT7s0:&SNObF5I^cgphVZgMR?Y&LZB_'nAfGFrt5<cI[Y$1lL8r%_JNc``UO
%dW=O5?de2UW<pGrbbroc?aOgKF+RiD%mJ:8QhT?a9g;bS*g!UImQqL?H^?qU\,##]h:6u.VlS@5B<C8g(OoUW+\sbgk8$:bVro-;
%p<r^-Q1OX""1*7Bn\0^`i;U<rQ!Sc?I@jj&4K>;$]\LT(='j/5dLT,;SYT=OCjnrgc<$@]CR:=,C$k'@<LU=c+Do?3n"l#hCHHAb
%5'i@"+3o@.47'&:G+\.?Bs226:TqN.InFXDkU`.oj2FqErT)(YrUeR&a-Z%'27A[nXZn50oC(kgd[Q0>Hg0P+f4X@2$]P\]mJY%P
%qW2H>S)3ZOcI.&8=-h;?MtV>jeTnTd52+jNe$$/<YL=ki06?A:onT%$G@uu?YaZ/A?9@CIYGr\mT9$+0l1:+VUNH<+j'MSVr+%1'
%<VP84lUC2dqI]]nf5uF*Z^(Mn3rPLb5Lc=OV76EKgjC?U41CTH?^t?3HLlH#-3$r6>AYs>T$ql]NB)XYhEX#@esH%GF7.o`V7DTY
%g5!3dp\dU'c^JdecK25>O62=l?CGri+1J:l4!1'_cg@'Cc+1aWX4l@pp;uj[>7DMIOKHgQSK4QQk0@n<l\ga>IBN,Z)Ru2RI%4sl
%\D,Y1qu1AXIdX.[Dgp)]H8WHB3Bs'A4gL^+1ZPT!D_2kXoBqUqRXasTj'r#@iKnc[KtS<"o?WK)ir%*dp#Gk#&$O4Qj"HHpkMOQ<
%hk0r42<O'""2?i<>TV_FJ'hVPJSsUcL\\"Heme@DhVA+ZMgP1?jtH2*I+l0CVes*EEmI@m^:EET3;\$jaid0M?G=5Chg96O=7>OZ
%S6GXs+1<6J43ajFh>=F"EcB?3T7;@Z@e]!7^$F"HcFl\o/$k>okWFT;()Gfom4>>\mXJ>HH[]hJDJ*#d*pkOC=ib:n7giO&YHAXa
%?Tqe&3-$e#(>d?Eh^j/T?@Q6/J#V'.?d:hW/2StO2iHq+D_Bn]0#(T6/D`3!9kS?REW(F$?[Pnr/jVFS>P?1^`SEK)[Dh1FLQ<8/
%^"PMSoX0ReGSsWP(Me`Rb[P4-q=OYqlZDh!C9[Eo^3T9(F+<6#`eXH%QZ_p!pARqbrkX@;:[aoVQ5]K^FfooV?eB9umbdAITA=Em
%5C8:AnG\Wll(uUXpL_P@m.I3q?ekA'AoZkUdOsb)V;p:WimNSmIVGeZU9V%(c"ZlL483c5q0jqE/[+8;%[NZVSL;TV5IE8i>@.c?
%jb(d"H25^Cr9<e8HMZ`DjiK6#Zi%5r=q;AU?WS:Z(>mG&YWio;5'ZqZ]RKA*\/.8P[93/F]WDF2*h6=1%hGfn+5]:rf?`<W/2(@Z
%>g_C(fuh>+\au*'BC0/>mpVp$Ek;.F\`1rC(0809\s\iWgn=i+4Bsq:cTTd9gNsGQXk)Aogh[]U&,/`!q1ilQ*Z,D\T8h*N2s8ej
%X)k]/ldaO>-S)7CqJ(12]D(u?ok!fj^3X7:0NLDf38IlRc5^/mFtVZdR?cS)h2K$l?HkUEC1&ugQR>G(R?O13pG2`kf?Z8'(U`P^
%g^E/ig?RYUq3kNZ\(:,@kF^?!fA"=!]@S]"XarH8CL7T9SSLkkfghM$HN%)pCAC<c7JgJ!41Qo4C?Mc/9<1A!Cgh[)#J+>[Dg@=*
%5$G[0gV1,>?Ip3gS[3^7eXdkQkR1`J=^?N)ImnibhlQ)ro:On)D]WGtoQ"p3k[/Prmi0H(URGV\bFad,p%c"8i8e2]+2*$IN%[8Z
%XuU^;Y<b,0>!'K.5(;QDRP3O#baEAjghWCqgNtNYA__'(/(Y<cQ?VW<=^1_"K(XG,J(Z<R?>A'CLCYC%_1UNAgL["LgVqt%OaVV%
%FCq.HQ`Ba\n*Qk@i.G`*hK$/_(2iHeb;[_g'E-W62sV!E<Z-nAmf'3_kkXh)q_Fd"h02XQp>!g6B4&=IrF`^>#;6V#gu:oCHaS.l
%aSQt4K:20lHFWsIo(LW1H>tPHlKd]cqV0r.Z!KG>>_$]Mm_,^Q2pD2#EMH@?hqC%BI,*C'T>%hMdIsus8(uD(p#oQX9BFR;<GD>m
%ms\Afo_%5"kJsW!hrZ"FGu.gr]]WXe*hT"YHhk2A_D7]Fgj7Y$o!iZ<n]BY2#MW&"hX.$C4D@b5MbdDUo@Hd1lnq!kh/DX"4S=UC
%$W!6$hg;f?^U<bdlPTAg*A&k=T9X>t)qjk]O4ROPIp^<8QJZ"\:G5KsZ=!%s=1S3hY.s&1=.Pi9bD+TlIEHEOk8MUn$?VKXlod&n
%=afI)ri"Y%OhWm53[rj2djZ*'rOl7j`I9.4piq+M/MoZ[*c8&35,iA\g]u#lY<ShhS!=4;Di=?c^U/k;CKFh^0=ZI:4Pt(d[aOKb
%O122jpX@^enfDt\ol6\4]Cg;X\bTM%?KRjr%[u"qhct"^H%,@XHFa"DpuR_,m.0_6mFUf"q<]il<qF:N8)J[`,a_qaEHHU$n\s$M
%nDr]Zrqk9ia6u3_]S*fE"6E["mju#o[l]YsF?J5lkNIBg_9UTQq_,S)/:Fi$Ulrpi*l"lA]3fRtl+IhpnnKgnDnb*j[H@5WDB=3S
%lt:L")uG=bR_JfNY4HW4lfRm="9$B75M1G]TlY2(rmZC^rclh9jVI0'YP,Z+"mG+!`JV?V\?pFP*Bl?p3/8mLg=*s/^"4oteq1lm
%7pBbak=;0<QQ+!0\IU42md\ar`s:p'qo>&jMt>O28gj56F73J=^OCD!m+(Fan](6Yp$"1mftD^;HZHC$q;l]YG@X$!VqK7Of;J)m
%Kt5[p`KSP*p@F>PhX%EsD7mElhCZEHq0^M6>PS!ir9_Q!])+,I="`@3?gTt(GPlEnrpFB>H07?&BK^V?d^]5I^AR6nabSuuV=]Q@
%6KR$Y&*Jp"+4D;fMpT_hNP5#VO0;n2m<kuW=.N-aDpNpe:VXO:<,itl50LTf]m7'"`140^S#_h#bN=!2F2#Ys5C\":0)>7McTh2#
%T:MMKn"(O>q46o*=6CNX#7'E>jcb>gk(E9CP.T=0JSn(M/bZnXJ%=s5m>%$8b-+E@Z[?ibIQ9)hBNB*Apg#MNju3c'N9=P@(]1+K
%3Z$Bac\tLa2mtC6Nu$%oY?U\lQ1:l_EHSL/F)k9oDDj$-LZON<X4Q\+/%*&2FA0I%#Gpf@7itcL^,.IO+('AQeaiB)+mWCB^,5cQ
%UWlkXokfHf2finTT%lGTFEDTq8M@fVh-]a@f/E*(&%0iSp:1+KagC@eSf=U#X7I^")S3@Ah`*SVqqS-RUgHAG?es%(XKSPVr`h6r
%A:isMbf>q0f`Plf[CgJ;rSNee1@Gn0(?eV.&\[oCrlQsA?0A[Ki!F?>QiEnP,"Ll=IOH9OBDCFma%J/C:$IrI?S$luSH&8s,q=mu
%\aIrqZHbA_rQa98-ZRa:]_!)+k.#);;#GJ2fFJJa$r?8cire1ds6G.T*(RFljBTR?LCAnbE6q`&2cuM4mI5:CPS3M)ZIHiYr42o%
%IV!pJGgQ/"Qa,#m&\_3>(*$WUNF725\R-jgK;Oehl>::Jp<BdAb$C![NN]PKlciV[`5Rl3F\OJ!go?[3\CMhkRti)'gKV<3lX!l`
%417Mk>j8VE]bc)b03QSi?_Eb5[>h5fk]X([>?G6TI!k@ZB?S1hAD&UFk]R)oKQ3EXAR*Ed#Ls0#jmC<pg,?N@HekOgOM1+J<cZ't
%R4?rm%Q!?!s'/ik!u0Ebm,#n/FP$%F?%l(>I@qNBdhq(*s/%[3kI>8Rc'8_ZG&!q@Q;_]s8]Pi<QI.gU=eL6%KAkK!IP<q&EDaP`
%>h@OIKXm+WiCToLkA#`AC=$q5N9L@beR]W</0"8O@@8"Xd[UTQUB59cUM70.WlBR,7WX,m#]Vs?)RQ&oJ]FN(Q3@s(lOuTWfWUKY
%%F^>ffUD,<*/cgLh/IUIq[l4)UXTg4$.HJ4p#_6@SLUJ*4f;;cDK>^tXa;"5NNLW?);E`DgM(!MJgo^C?6[X@M[jX,IW*EdYQH-1
%f\W:ka*"Uu>8c5sm?0jL)cjs8:%N8q0Jd"(oJ!U;2rPY%RU_.0U-[[>3ZT@1C6!(=.G&YuM^r8ce2!W]JX-G`BR6<S;%[Se7L+*,
%5h(scRB[SWq%.4Q"tE+oAnNq>LnI#W%"."p2Zi7^$O392,h/^>Tn&A:6PI6b!d-UDgP^SIr!_V.H1M@c)MA/+@oZ\Fq"3"/7-]."
%m=0m/1d/3UDJGFkll2=Dj>Rqbd;p!MdbjOLNkm7MC)Cj.2Jk"DH$Cl"Mh0ZBA]'a$(5,N"hR79f2])UuN1kl.'m0PAdnR_S7733!
%Oud=a,a5<@^`Ft*/XA+3_c<.d+CZ&;=9o<?>`D)sB!R$prEecSm`POc`\RHJo6X[Npret#g'^&Rl@]#YWAMK6&SAd5VVBQW1;ehV
%do"R-RGm5os(bY;[mB-@K-Hg<.h#apc-5-!LU=olca^PBW8Y"BL.mCb//skPS'doV)$+-QmRFE$($7J`iAjG0m/r5\:/XnD9*NR<
%5m]@k6lB=JJ7Q;j5n"`7Dbt].V#q_?*$o6*//?WbjCR/L"uL0iB,H*]Q>M`g1a2/D!=:P9CSHB<#LS<dpXpCTcL?I?nHfkt&1dqd
%Q[RES5`'3P</!6AmLiR^5-jQZ<Wk6Q<3d9?"[CFe/ej+oh(nE2L-Rh13C$fF.1:`4#JFHsT`C<d,87jB=1+'c)/<18>go(oHjES>
%&H]kdL/!@-Fjjf532-jdG!N,Lo&DkP]P-GJ\cNP\SjYhs:db9`h6^;nTK+&dj`r^)2Rl"D=4j#Kk+DuJD$.`9hRX\YKEuI?L@(qY
%+Q@?^95R:P:ks<.,8!b4Co7XXNh<eaU)9drINVVkk/@EdF`$<nmC`fU^]]*ag]BbjANp1q'A-9X-t/^6JIon#TS@)GlT0bi+Ca!5
%!aurK6=(k<"N%d2&lr"?/jrHh"k3gILTh4m/r6+:@7Wp\)6ed&,gINg@j9pm<HUtefOiW\"He>P`^4&mghIfYd#*,TEUTaZ/E6R*
%&YGCEs'm2o@6>rppD[VV>>R4uF`>d_B!S)u(5Vm8;4j-DCi^0=]htE^%F-$84<EAK*Tpc/JJA/"Af9M/GQu*#Xs:'!#LEadUB4_C
%Ud-0mW7CbHQ0P^6D\i7F=7CDQNAtOd+&#>V)\f/l7t4:R``.8ik`=_a4&pt="4`01c<r!NM9N46nEEaag(<:q[gaE1e'fu`FPp6L
%#sD`lo4SR<Jn%0J63j\X%>!^iC.8Domj6')oSdL/@L:mG<="7P*[VHGkDXpD$iklBfauRK2ZuO^8OuDjQ@tCXX.s9,$C]%8f/&Z2
%,D\+0&/Ym7CaqiNRh#H@jRX@u7-IDK6Z`q26-pi#"T_#IA(h+l0jLT45r@_$]G1LY@GuPh<$40l]Ij^UF>1rR@#.ZN5`(O1,QCjh
%_d]e&NWPpBo"6"Kb(8r%"8V^\o*UN6V"iK-%qStO*=q8adTjt7ph%F&@lUjC0Os>UF0BtT$O!([mQeU%7Ftd6/8u"?&WKRQ0f$(@
%>S;)l-qkVF=^i.+3\D`c'G-#(Jt=,"L]t-u%8%af<2KbmLq3kYkea$lX*`g(e^Zh7`js<X\fO9;RUI`6LCcHSijAoD,Hf%['"+s!
%L]G-\Rmh\1B^[lKHiLqih_.EF3,`pt0SJbOp;Us/n!;@mXq0F93DREIXjoX\6jD=)7g!t#[(i$6$qaA(i/S-IGJUWdaW7d8?_C;F
%(>mBr]BP4ADPI:]420/`DkR(N]D1fd0CQGR^uektCdW9?9%4m9Ndt-t-#:_%8fA2_Gb30D@(,3s&7pDd!P0-XGA`0fnJr6>GPleZ
%*>SmB_ojefT#)dh5sXS$\7\Ys)Zc2K6XVmnYal>d*ZFs/(sfXa)dLVZ]Sp>\'K76J4ELa_&4=o0K%S/0(^,d*O09`M)&L#aV?4Tl
%Z'<[#"P"Da;e6dI;W8E38+.qiBc-9<9na/D;%,el`Ro@FJ0>8oI0IkT2%k[iZ$!a0ZC;V_:X^bM_duC\n7`BNnpHoN#GQT3gg_6@
%Mh&;f<YKUMbkp$IOH+<<?Sb]T/AlQM6Ed=Fc,355QVr-pTMfTV&rJ+I'=ShrV?/VL$cJPG>'-KjU=#o90l3[HJQjd5'(2jO)07B/
%,.aq.$rN>HAqj'^E%mPPM'S3[&hH=D0Z1h!1O-4EdWBNDR"O_B-B!C9.M+c\I%<*G6-S\1bXsU;liZ;)<>%@t1Cu`P'OXR)$+n0A
%:JCk!CBg$Q;(fbtiTS/P6\lRJW?2T`k3U>60+$#]5c_+TJ^2"LrVd`G+3$*h[r1p6qD?uU%a$Vjf6<,_N!Sl:r/?Jh]B9jqDRHST
%_i6+%Sh\'`7.-[grg$)9/^I6IcK2@.;Wm2H*kR$c[g1"`gactU:/"ILR[u7nC/9F$%3oF^dLl[4e-$jLV/,"1R:(jr2='37"g/SA
%d?mq`XY(=t?6+inWntXEan?s8*(6d`ph)X6VP>M*8)k8&m$>ruC(@B@$t#0FF8HFo?UsEY(7a4fdF%aQSAo%Yh.7(BfUAXPL;@@>
%S(<EMZnZM%.W/V0O'H2\/E;!!Uo38je09k]UnX)=#Xei53uM_\NIX(S;Z94SCMB@AL`Y*)?k<uT[[C%I&NWtW:-_FVJLTH(cY/*u
%k:n/9<oOYe!NN:o)khDY;@n2S:aE@L0q6-((DK[dD&b?W9P.`rU-PI*9`a6C9ScNp[U?Hpr2=cg5c+5U"a$[2YU>(Yb_&ND[:s5p
%2!7DH:W$G/WBcU"*XWUYO$]f5)>G0qXtN0'X(bC!"gO##EsYj>#4;l';G(a"1o@B`CLO[b<)Q47JNNgbrGPO02s(3be&Iqu4@c2'
%POa8-UkG9D>/E-p5RfD.-3Dt]LCD]b,@`Lbi"2C@clg106.@GXs(Dfkg)pcl`](DC*YT+.jm+:kDK*&:QtW`!"&f\SW7[:$dai"<
%bQWq941'-i5:^O0F2V/k`oU@10cbegZVri*cbOPZG';?sO>r!4QEZK?]&dYoDe%1ucO&EL^eo;D:<>jdE?g9UbA"0G>QY#REci_&
%^g0&V5\%5T;G%^$N'On<K0[X83>!hRJfDic>!R1nnHPZsqXtttCOG%L!=YUXViBc79oW;s.h:K5<?SOamGU>RmOuAa9FL>D79'fX
%'d4J:,D-Q^`G#ShTG/2&h/L6^5Z@mfa:Y?XW8ect0gH-1,VsA1lT(q.KH%mO__k-dTC@7#,O3'e8m?m(@/^VgU`gX)#G-MH;A9oJ
%U#=b60R:p^!*S:G&f]H\@c/]I2)J-G+ko-?)aOogn0iUC9J,8a0*H;XOb71l=,1\R6T?E*JB*?D5Rqh#U];Ja5R?!n_+NVp[07ac
%b6JHc=Yj>G^HmYV(k'[ggoVk06<$Qn@f/M'PQL%f+hDP!.54KLQ>L@<IF.GW0n?j,`(Gem(?kt!0B>1=r>sDCM'2G.C&/:]_*Fts
%m1r7s7Gq5%8h!RWO6!SAZrE\&FCsa,KI0<P%Zrp-6KEsgfa=[rB=)B7n3mMunO0KJ+OP&*n%^<f6g6sAToHm*1V3r76=U.ZTTV\Y
%]&C"N/gM^6XJCs`Vc)<uEE+8bY*XRMHnGkkM$Y<7To%iWN8Onp,3YN7#Tc93Jh'Yh,/_9//k74`!P_d]kT[NfX-cY@imE:Njs#mR
%n_TC(#/rmLCeo+3Jp>E=8N7i)l#$XZM$#IIkBS$ceaF"X)jmE(h/(-U0-oc\PM9\'eC62qqu,8]''JA*ESCo?`HK+>5o;Ck"ZauI
%afoBT-msckO^kq&>]kX^lKXfY=.K[p;3FQMrm7(uS>jeJ<h4u%J]@3":1pSJ)HE[9rjAn#03t)uLlOMamY1f!M*msKh6T*uC8!jK
%C13u&BA.D6[3s,1`W!gI\7;C!.2&8Pc`WqsG"<o7>R,;eW8406^P#Jh$6Sf5AHE0,OQdXAlV<M(]J0unU*X,)JhkgE;G)#SbFi$>
%\eU<)CkMjljZqX1L0BpT4H#5cM)nI!d7@68(in84KNJaj7cf*>K:h)n]0'H(ne7`%c`iB]I[XT_0_?49R.@Zo>pW5S'N-XijlDGj
%P<=]5<VRGk:uNduK_`KkXG]_4RMG-R"[sY5Tjl)OCCt#=FI<PdJf=b4M9EqVRJ_"qFC\)!.3CmW*9uMb=Tm7a)`N9$!c<=H5m7R=
%LQ[ZIe22,I>\O[FcoFYj.mTs+(^78r;P<Y5]M]c)j`k+5',;4@-A$uiNg^?<l_2QFkNO'jMnr*m[`QIFUkbifi*LUi/t#Kh$/JIP
%St5C6@_2]J\=^Ym8O1lXi02quQ/TTgkNEK\pE\\@TfqpC0fbJsW=Zp./G1%Q6mS`.OH^#F/)mY"ck<>k3eU)iJAJO-H5]a\cn[?d
%5$o!K1mf97Z;c;FnuS=eV*Qjj!JEB#EW9p-"q<piBuK6U65;OO0M*864%qRJ!ZFPJZ>b_W8nZK_Nb59WO<]TcP(8A24enPV,(kY[
%GV7laiO\rc9b^.I(/*fngkc%t%WQ"':98bK?rVOio?Lh%l&0gE4BYW*naPtba1N>YbJh_^Z^=g:\54:$H<bONM8";&l;N4jP)QF8
%"jSsf9QNt:joj:o@YpN8r6K(P]Y?jYKP0^d_Qh-/a<T&l!n&kuF#bMIfaeiuSa"@dcC@4lM$Zf`=/TA;;V4.]R9agDA'+mUq"&YC
%P.Qs)'>Q(&](k''#\96ld5<M'qBQ7Wc6q_1'VMGk7S7BPiJF(:9'K2<9!PW-@$PB*4NCC$Z4%fPW3dTHU+o2@3)\F'LeK`N-6`PQ
%Sir$u`VE#b'ps"7iH9<uVdbT8,.91YS1"t;+e8u$"HJq64:"#J\/1,ui>s=gl(m+5Wek$GC@_cX)FXo?#9,Q9,1K>Fa^?8Q)OebY
%m;qf#,2osaAsa17b(5l@)%dE'Xs$R,_e$_&JFQ.]'H#"Q9P5fN+dN-IEerpT5YA;D$"0$r0l;<V7B)1Uc8`8dIL&e?TtpG"_hLKo
%\g]@r.jg:$A2Trd`b4'%dn=G-3J8jgjp3<__@Ac<Uo@!1Nfc%*a+u+1*L<s8_c)K8TgVV/O=8*'45e6%1&$hF$1/WR?9Kec+]KV,
%"I%>T;#k`CTqI=e]3a+;PiDg0X;F0JH.KsfdNBEp!();A[nVKt&_],u#!I:-dTHVd15?uD)B0K_@d><U5/GgX>[k6?gerD0%O5/C
%$6dQt<6nr"K?/:.N8Z7E,:(L?Y&))KIM#CJnO;"*!bZen=U[CB0s'bmRlV`<2AIt5/FV2c3DgmP?#.]FRITVreY`CI,oKbP$_1qV
%RHC#Wc)L58@\u0cF.*biCclVf[U90n\OEFpW_4ZN0NoS*/,'(hQ:tm_F/kKPD-<F3R/@23-H=QZMC716,1d8M\PDB84_(_KJdF\Y
%;cB#+,)DEJ<e3@Z*]57mk#%13aup`5P&U_oa^Q-3\mrNe9(OMX*(:!pK8l=_#^+U*1(s$=gH1]BB;&gH1tQ8X(-8rVV;b,Y*N16G
%!0qL89TW>_&i(Tr9''><.$])MUk,]"`TKV,ShJL&!f=o.!lL.T9ngZ1P@65VLH^H,g@=8;oM;RVjUqQ>FOjm1^gQ2t<14],6)Xdo
%:_CP)E^nQ?>k3^I;jL(NOX\I"GV5QO.R;dfn*#e,Zl_T.;5c/eC=J?`VM>ct\Qfd(6_GKS7&Q%:*/11RQ(sF?W&VBp:Vc<X$4/c]
%Etf7iHZ^?_U^SYdcKoTd;P0(I7]+kCq`L+',jTk,?%kb/T;sR9LX$r5TDALcmJlM7m%O(OBE/$IY4nVk<0Y',]csiLTiYi@h%.3!
%T]e,Z30^")<LXXtXfD=h&&"uQN#m9k@i'XYQ$.bt+*rp!_U0c.3GbNPM-M]Nm`[%Mh<LjK4G2&tmY7QPL:kn_1@PDm\'gI:4<^19
%grh6Ie5p)7D-$ZOpYZi@PjZNVL@5Rk%9$Lbk1Fj%K9`:^:!jBq5M#X2'3k4p)0l=F.X(&W.pXr*"]XKGd`bfZ5qA=P9Wa>%p'`td
%(HQPT.lNYJ`RS=e/`#hYV!l@!5>M(-4`CAqpi:ED/_\9tVg-peb9J#8LoTbJ[*#'`SR<I)klrl'4?!AGNHEA]8;H/K>ZX<iFDf(r
%2_#LXbp[lF44,dNY1kC:1_NcFNEefN4JK)dI`R)A*^/=!G+sN*BLF[&TQ9,D3)lUhFV5=]Q]AD1^'B"]^O"9d7^q*e<8l?`V/m$O
%s3Y]@f["D5e9Dh*S*[r9`6J<tGNj?sbl&[a]$!f:D[&(6&iXrH]49itrYChif6'1Y#Q7-soDuqO&)1N#?>WJh<q/]o:I%'*CeNQ#
%!'6N,&-MX53n@V304oeA?s38!)CD%aJXDl#^mE%o'S:NkpRR.>pZYuo.$(L`T&iD&&uUq).]%qpGV:bWQ)[)/L>*?7Fd(cA3`q%n
%7_6*VhJm(1]eo2uSI+n"FPY2dVG6e?JBNa-08ZHUCsR&8BU'\6A(l#kP(_h7kF0R%Ju<!u6g/]p&jI/&6Tl^$VouEp"jdJ=14Jd*
%mfDlp_(-\'O[r#7*OGrM3KQ7m;H7p[OLESb";.E%`[!5XE4$WWLro?8jEkT"o3c/ObQN5G$2]S)IY?pE;T_RZR"QLX]3`^SX]8Z-
%m;uR!55b,l8bHQhGr1D(ED-nh=p3=5G`6MQZ5jB^n,ZW@DF_b@nQL82p,mdlT8R<Oeo)#[AABD:9d&XA5[>r)fSkDk$Y0A7n-uE;
%)2BRO9X%tYhI[6Yf^q:gWI]<A:&VkZGXETZ&&[VP-[rILDsu4b[uLCpJhRJNo0f$7a"u-U5nei^_\76l0[.6Ji1JX3h,FD73tMB*
%Jp9qu7Mj\o@eLX\@N>u1?-HjmIK7kS;^>+34=I;b\+9atTrg9D*d_u;4<5))FS1jbg:BYS!FD@X5P!#JGm'L0cqSNG*(9]%mO-c*
%_\3>k!danS'*sG*EKGrOWI<gY$gRX2GiZ#aB%Jnjc1q2R5,.9!UHLj2#"(I^E&"Qs2pLG*YD&n$&^N%JWpgcX)])if@N(VGor&fH
%V8:?+cf!_E215].,Dc\>0'3."35I%an:M,*T8,@70pgRPIU_NXP'<ar(]oRc6&Wni6[$p^V<d**B]MJt)FLtKOOb;@0F82?Ck/JB
%"+PR\-2=qb-Q(3/__!,.$**%!NHfjXk0BW0]YMZ7_*E"\N?9<?aM$W-#[qQ]&0%JUDE'oU(cc-]N/O<gMpZc8)%tH7!#0%%=J2L+
%Yu%;grpYA-4J'i+3o=4VhueK6?IBO29`bdXaKfMF-Hmb)Igoq>K3f3,FBp"1Jj>&.DpE=sq3qYDd8;8RMk;aU"0ZNn\p29%%Uh,C
%J.;dpout>.gMC14Dr@Cc=91S0KjjZ5^lNt``E0sS:e2#N,XJ_QQldkCdi=HR)\n@SQt$N?M:!DUO+JL-C8R[k%378$(m6#_^mG6j
%/m9RH4.#-j#jR;I)JDSBf>Hg\83HVZT8c3oV(jNrj2>ArV>pe_)g_SL1%6f3">L^:3p<569jEr,&1oe*d"/Zr3N5-`V#^o0""bMs
%`oF,F#h:=K,:H`"!pM*R#QfG<Efc&<W"=XRNCF"H@'40?"2.,,%FY(ap]2T.,D%K/\?Zh@OQW"`FON1/Ol?"q*=d3OILMuB<5(mA
%c#l#P7*+WpR>,EKg*fdRU3Jt0-ZT5\9ii]s0LLrPG54$#"Ib]Tjl?[2Ue,4HjJ8o8L<^qZ`Gnq1VWUrrh#1^iSnj?\"\j:QQR%1c
%F@4V9*Sli8+fb3E!bC>&Q`M,?(VY8@K46fpk)u)n-:F.D`j]60e7]U_N+k:=^/8$H_Rp`jhp?n2#T/;[eRTAeUDcK0;YC/+K+!F(
%M\'/FM`Mn9Vh]r'U-NC@%i!jlNflXW$_No#SqflC7f(4p7Z[af)Qmq=51*&E&j26reEs4(n0rY2DY1TS"7;aYG:ZW?VN)1WE#!+c
%B#*O]MIGd`_(cgF38CIeY/+?/7=8c\?klcA0Ve/B'[j+.'U]ke9]*YO%I)/HoQbEhiJoBT*YjWFD-D:*kdFNb]LM3`*X@8QYbeIA
%89N:V3s4Y!9gEU`0cKeRo]82)&N&@3Mi+XZ%@uesq(O>]TW,e"mrHj/0!m2#2#p4l1^VGfGYA7s[L6n@&D.Ze2uB7M)CF\Z'M?f'
%N;b&Yf'k"h>5Q8r%Xcq#L-mhR*$GX=4\Q<I5[1\,+V[2ElNdiB[^^&bT\s[s*""OoW1Y<tAFk-*o9gR"Z6nkI65ANARuM3$e.g_-
%C#Q_0paBsJ@h,+Jf.72MpqA;$6U[!N,mhug,],rbTem6#1kF75jotb.1'Q/08g$Y`*9#\@0'Gk.3J9M<M^'\@\m1rfph[UC'7D.H
%UJk,D9_6oLY/<@f--$cN(ne<,dgW4/[t,`Z;E,99qf%=k1mTV1[)EXFd(b><]ohrb<cE8dbD?8fT#V)4JSO@Y,_B0`>DgKmLR7Lo
%<,><JQOX-@<hU0qZ=1=<J1OWn_a"t?&8$G8,@.oLjXc[Se<h1UFWAHaUN99bL_9nd+qT#?[9k"\3@,`Z*hkb(KB8\p1_M&=:YRfj
%*nsQIj9[5P83mg%>7r&:=EY1ZREu*a2`!Fa2**+9fe@DgI`iEkWNqL".6AkNHU`;aYD:/VLCmuT'HIdAVe6TVE@N3_e4eg7]!=3+
%#F[o*3af/$67Kpk4LuMj2?Yfr'ZOo5+sto,RRse78^N5B#u'Q$#WOXOXUgQu0?M1\.;9q1cbT:b?VIKPTF6&0ib$t.M`7tlj0mO5
%0M+`DW,Tkl`!FQ)[J_10Ep)V:1WmM.Z\GOTF>?'M\<o-$AWMD&,ODt$fAcLmG\Ra_+hph&@OTo#5eJr,',),`Da$?(Y5fp.!.P[\
%J)SBkC3X6m_;c\$hq93uKB;Tg;ZsW@T;a$3Ud2mgVccc8%:.B\FrSbh-BE^9Wg`!P\@<F/iAR=e6i5pNi0:"0haFT$rY,u:F%-'0
%e@Q!`+Ipt5+b_7`!.>4d,WR#!=83OPd"DfIQn&ii,FfK"L8P3jn?G+V3Z_RVJQBYI7l_^2/0"O+%%SBN7(_/S9Tl4\9Mg&(8)(-/
%6uCmGd-]2YV&7K_&k';4K0hKgj)']E^'J;=Y!<H-9%J"caL$UR7Rit78>?glfl5[^+QDB,lpr`20d87\:T?^9)*p7&3Cjf@%GYCM
%E$4:=W0i326N>B>/Iq@8?<RE(JhHR-%_$0Y"[0jG5i"kiOp^2sn!*$%`C'%Q+@T;J[_u!!eGY2T_d&3'O4=51PB%BTW0eX@\"&%S
%\u2-T9su;+>u;+0:ei;B_(?/fA42"Yg7BE--5d4Q-4AY$(sT[[1K6GY0.lF/Z^pMF?t`D!)&D)?XjN<'\3/R/C.Z=D=ll(bjs1@n
%m"0(^/qJoaq!A:M"IlRN(+LC^8$l>,2tOYmDu`11knl+-l4uj)=BhOpbVh%eH!G,&AFAtb=oP&sC)N4l@N(![e/mI$9aN41dDS>k
%SSeiZ^C)PR-tr\P9KkcW/!4]47:sD[:]JimcZjB"rmg*NoFD1<rVt^(SUY/<1e)BLQFg(;bsZoEG\+o8=L.D4%f=]_4()9`JPVJR
%D,3H9)(fllKcN:EQ45>?)]!TFEq*E%2sm=taLfGG&H"WD71BIMj4Sppr*@c]];VLk5C-KShZi@TaN1Q:6EP"Oie%KY(XorqmN@r6
%L%HDj-0-49,ihcemU?;CI7nlo$6gO1oaR&B6gN'HI1.AQOkO6:P\HUBGY=KXBf38NbTnJFOWQUWkW]q#LOa"!eeAp-Ci[jAA\`D(
%SfJ&cetjM:`j;XdLF4:5-Q:JgO\FW.9jsOY?qb"N1n)I'VK+DZWp@;dgtPBFWJd[6l&7B3$tD7`g=/Qc[#9f/G6VTI9j`:6MW&!i
%(H1aj#Z^CSQ1$Q!+L<NH1o[s`;SCp<Vd9QlUcB=B8ZX@7UbO)(dG/]Mg7[ljoQ3#]&e0kT_-IJ)7j'bG`IM\ie4^.RUcW&Tr!#,0
%*aY<cg_&@O_K@SINJ4'pjC2i_Z[j)!nJpR39[a@;!?EEQ4YU-B&;rH<ab3Fj(ces:A+1lR5c//_FWA;oZk@mC1?:%\TJQ10B)]js
%p`gV$=9J<2%e<+@N*QX)am",E$Tf38;<+f!&iu12R6tHD?HM1#;+lZI(MpcN`#L.[7,9!>P?,%UAWmqgiYjh`AY<^8L/S-_HCDee
%+BhcWR&]0N<l7iRCq10mn])^?q&%_(j@Z4^;pGLfL;@%md.IO_'FU%`9:?qGQ7LQ14dRot#\72^o9Dn#==/`q^g\WV%L/PNSs%JY
%b.tU@K.YN/!&Z(Pp*cVKisEI%',S,F,'"a"HkfOE(CPggY5!%9a+Iifc:s4ZWf*[*U].FP5JOpF`%W=0k<!f+>0u@=I0P"=-9&1j
%`shRB0),3UMp/[1cec;$g9Fo9JR?e(^dk."Z/U532`GTh"`,%DZAl:6:K)is1as:lkqr20*Fk$g1F(N*,W@Y@WC,2rJ08lOARr`<
%aG:`*18^l&"#[A*f>erk"do(LZUp2nNlY0b$70FNhoZ(m$R]s;+!8NMPfQVKhI-,/=W_'2VN-FV$^fDAK,0n3#Ddd)@3+`lL](nj
%.VdC)dX31_dp%Ksaag4a*tC8)TFkrc/>RCrCg(=TZWW"5C;u#hZ8K/AgrZ4f+>^ocX`GQ'LWE:%TFm;$e0n:n'O`lHI$dkTBP1T6
%C0GcpfO:U+@k7pU%_-pu$\_Wn[&0H1nrYDE$4I)P4I[X>8Wb'I&!,!,kPUca5@4B'N"5VO_-1"Gg%o']fq9*a6JPC(ZHrZip'[hn
%BIdaCh[EoaQJg5,)f[TO4#!=Y95Ri\$=e=f+E9X>B3Vb"j=i-25q\8Ui8h!9mU[RE'a^o%][`Sc)IEQ77&99m)dt!0IM\uE2R>aP
%@ap#n>+.NdA30ro[&$b*MqbQmRmFW;39I?-hB9jL?[?>GhLZ:Jm6CtIo-h\_6O=>?fl)'h;X9%8)S^Zea$[G'r,mmgj?EC6<PU7h
%hq<Ncgf4<]#24f0n!>C,:n?=kF4H!G-m)>iIs7,C,7r@thN+1YU)Ri@dh"K@O!hR4-'bXH\nUL!CVLf?Ee>@<RFOO2A4pj0@uLiJ
%oUO.W.FU;uh_f7#ME0n!5A$d0J3"i7@N4N'T@iMsLGi2c7lf-(c#bSNR-i6pS8@uiFm(%8fXAekMTMWqA`R?<A(k%3&!@P<&T38N
%SX`JNJ%VYIN83Wd!7=[&_6fM0L3X[rDr(]MG0Jm"h.<k2[\P/j0aV*B7lLXD9CT,53MBkoQ:!RH]$Xk2)QjaeWY&"<6>1'[oO--!
%X\-M==_'j3>`uMa$%?is(_hiu-:74X]:Utsh)C1FDXT%,?kCGh[[!fJPe&c(7n3'efGFh$WXBGZR=9mM+X!BEK`_(An+!oYg@keG
%`V.`Lco>O4`b$(!$C2BRH]10SWTr?)D+%kKGF=DW@cTX[8S,Ie:p7>$=-"mf>C'`)5Fra20c:cHjR>kWWlX+6HRVf'UDVkQgF/Ke
%;6k-QNhZ%?`j5b5,r]?4,a#m#:!i"VIn!*f:?>o(.g%uepQCd]jsZXVd5GNj2%NQ8#:S!l_XUYXJnQ5cK(p%#&TNTHjRT2"oYUun
%-7"kA!ai0M9?(@KT]?JI?9/4HR1Bd-Blk&qi[,"nrQ/-ZaXsL-c)WNWC^mX[o2*cK(5!<cdj>#[gIfRe)rSl1fj5]_BZgL/Q:%q-
%'7m`b@iTot[h)rud>r6^m$3CVVE=-'TPu)X'?4+I?R1PM:XC&I>.R*=/BFkZ^?A;Y#_p@"&Tgk$8WFQR<Qri/E`Fe2,Jn.F.u9"?
%l:afLS_u,To#:mcqoEdbBh'/'O%fGsT8j;^EubGKql?dk0h2[%iO"$:ANLbnHD#d^>qJb\B0fKj&K>B77A,&eMjWff:]A^7LKJ4%
%@:"=7:OYQ2$?$XX2g&V"`#Pej5A5D*52[Op&+lSO)%Gj8Z/C9%/4h4%WP$$QYsNSh!I^ftGL2+4l3]QhGo!ss*ZS0L_''X\nIE,;
%oq`DIe,no8-*?Qk=G6E8D:<G<;!\&-n.?d+OU0K67+58&*77e<FJdRApqn_<%Jd77>2X0ZCbgWTL9h(Wpos6eG5X^J).]$cAi9W'
%HaEuEJK@2"]9co*I]I,5`R?l3nL$4rD7gSfCVFsOP)K0g%SkTXE="`E3c;nl7uk(*<MV8hR!^!VK6mW@\`Tr<?#Ge;^bGLaZr[rp
%,3-*?bE"KtM/=(G17Z.*Qn9H8SNPq)?d,;[X4U/a>!/"ZYL\/6kZs6U4FQI'3,!;8[K0m^k(XKU]"K[$2^JVnONe'MH.qN<8@h=-
%_M5:p`#(CJD&m&=;!Pr)]+,P:$m_Wfdp5J`e<1QCO1!RCG%`TqMW=i;i[-qqUFB^f];m3qKaiBN,'jYoB,Eb6QYYVZCFqEUKWa`;
%od/O-2VtaBV!:T4DDl:OSUpXqdUAC!/uoqbIWD]B.^g2+5fr/BX9]tq0=8_U2\])[r^5Ob#aOgQTk:P`plq\N,5Z0.VtdT55?hl#
%,ZM_4dZBO:/?C;ZSsaDW_?,;h22c0U`sDO0E=&AC(C<MjH"9gQr14i5@Cedhb+s8$5*r[P0rdh=0DN;N"UH@LWUnVROEeqA6eY6G
%I++O)K!GIK)D^b4//J)N$nSHsD11s^a=FX90R!u??RFnmQY"5jV:K<qP_:?\F[N,e6GJqZ/[cLjYflt`j'#*uI:P#h57g=@N_\hH
%aFI_4@%iQO4^V-^mfUV+9do#d4$pc&jTt"l/r:a'3;Jb2B?41OO2JRQ:(C;.`7i1Bc:.0TqGe37VDTHVVJM;_KS8n2B#KBDclR$2
%ZYl)Y@aEVi>QbMMqZX)@H.g5f0<!2$-NEa4:&PT0Es[@[3[m<8Q>,]GQCp:7!b9-H1s'qEXchWPQM@.j+,N@l<["G@3t*COhr-2@
%:r<g)^?1VKdYrNcci#@mHCp0[s"s!2=/U2M.5gs9_>qRXe-=$#!rNA7-1H:",1'Oj$q1YiiJ(9A;?b7u69*lh:3Y6&l5X\$74?3p
%)2%Dmm2V)Qn3Fc$R^$>0eJ\@&%c4r$0lmVd[Ebt:NQpE0_@d$E`Tg87"U7"<.;5E=1&?a#TYlO_PheHL]M(/gPB&@%P\?@f3]Xc)
%U:Ls$bM,C>>9&c0%H_D`mO:j5Z%b#94"#YG`@*-S+((*A)Ch\T[pFa2:^97$R7He!"tj_^1<";9!^3t`3U/Fj-6aFBG4&t>_\-Md
%0G]VU,s5K_GQ_CZS"Y?RR$`epPgRHVV30i[N@l5SIR2B@JtRhMqJ.k?\e#o&j]B3TVSuF#TSlo:(M`j!YP,J;j:=5V*"4XlL"6he
%69caCV*d<rAQg@/lI;jG?EJUTKKL0r_-_MlS7E"E&J<LdC&,3XXW;FuDh%LpT0BUQXnB7>K"p9iG;Bn>a9QYo([7Se>9M.29&qGB
%%>L@.>VauK+r(mcT+u&VFjJ1f6KAZ<UEd[Ugan6=mQEe%=J'e@7lNc:4h;jqik>7--"Nd7=?8k0.4bSdg=&4:*=`5b.O)G8HUp=%
%Yqf'uW:P:KP!^UC>IQ8t8O1:sequnt>ojtRURCLl.:ZZ4!dbUTJ]s'`W,bGodE+;/l>4Qd\B+9BJi\JD6p)FMmDYDKTSTdhjWVKC
%6nq6!_jdDXO``NIKI)dfU6DU$\>LnnB#J,JZk]!Ln$Ks#.W0j:a@"+Q6N*]G%(XX(/cWY/P75K[[BhabAp`R,jK<@WcqKc$Bub6`
%$3?j[apD@N2@o!HNT5[_Z.!1![)FE38-,Q\9</'qI7Q9jAM"(W.SM>?oHPf:mp/kfKaij]F+UF9IT3=YP[ih=ik3XlE%q>,rQu+L
%/%0U4j3u'C7M<e"A&R#mloYPJP?/A&!S\-Y<6%F,G;=SdjTMke*%ap`=EOYibg,'1+D]dP`,GiGWS4-5aq9'7UIRDYf>*Q1=4or'
%XO/Ob@CWb0@JRaGVFLd\i9'1TS^;MpgObJEFG[`JlnA^-YZdJ%c<+9UUNY77@6Lo=0P*i8@LLm-6DC_I;(F/cbf!c)`(WYT)MWUb
%'=H_s>W#YeG?NbCoYm^;_k\W6/[f3QYi*4Z!&GA)C"K7$'K/[p.ZolnDhX,V_oLYJmqHS12d=H]>JtZP_j>Qe-Y%`Z6ORaeHf-uK
%Im\?ZYq:q&*tU5WhqB2HlkPqENMgrec(5s"VbCXO0T@q8Mj3-^9C/>>BSs*PILcMG+Wju>]o>5b9*BtNRVAH]#S(JUOR=\C9HmhA
%[j5(sC!?!@Re"[dXbn_[aLlKurFTeNIdW?0B2q![Ir>H#1\\VW,bL2F!"^@7#t9?PRJSE(ca:OJ=<BoVY1)!kA#)$Y"lrlVK[Ud8
%rPJuACI291j%s:$07W3$:&HAE@9\C[rf\4Os"G>.8grEb@<(?s"J4+O2!Sig7:3?oH]-B8fNcrU%E#>GL3+<n!1g=\UKd8P@-Y2m
%EjA7ol%DVe*=0OAh@f0e3P.Otk7>IDnKR\]l$<(fRg`=UZ*g%J&f2&T4q/g&U@h9R"I,ldN&bZjFgfHt%q%f$HQ]`=KZD#C@S!=b
%^eC[2"]#1#h1.E]BVp=aePL'Z1dq6TZ:d99jI8B79M;$oYLg*r)mT,aD$jZC#kiuU6AmdK<\=r8/^#;FB/4;+a:H)*?o4MAAcY>V
%"IR_?G9"U0k3!.fhdf<^GQ03d[tP&D%MpS&J.*s)Ik-<4DeA3i(@!R.#nTsqN8U2)_XE25K,'q*pGZ556&@D=%FX'g5a%jbCo\?2
%[*UP)p>78BYmc@!g>k?N<Q7;\qFpY0em=R-X2ABr\;cYY:6#fLm[9I1KnM/?:^f';m9maGF\pZ*dsh'ZV#Fg:Do83TD$et,N:*&d
%Z6TEJ\/FEI6GEGVb(Vtt@q\&6Qsm5i'k@YlohM[umZ5mHjU4$OCdEh%)(ZKZ&#Njm2<&1.mcJAqCXZlS9]5imCfZHPGg)L<dG`pp
%5e'nr1*%(Tc?t#68LH:?PgoXEMuA_<FSHVuYh*L>p"qmcR>3F<[J45&VOn*$R0q>;[TnT9eKN\MCR,OMeNp]g\*kT9MPN3Kig.0,
%53V?@</mGOT[^e'-(-$`a]hk&(0$jEdbf&go;5]^pV4KfD'?KN/gW%d9cPdKM=(aj'-S:01jZoUp?#<\9bHhR9rD8jbOkdEg*uSh
%R[c"(e+=d<[<o-P"7$k1WQeILZ#LCdpESW0Zk6II&J*/$Gu,q?]%a&kP_nOG7#YlR?4L]rRV$'JB.S55Q:2'NQ]KgL]7T$u/j3CH
%^mdoD&jbFlXW)qBC;<Pe;i?<QFheV8)'!Q"8UJ\n?6\&2i,_jR7;!/$7s,%*PWY>ieV9'Zk@"R0K[CR)QBnMg\8qu*aaD=n,]'!r
%*)D""XIiX+2Lr(^BLlEm3`319U?%h0X;YLf%,#LZCIL^bpb8-NTVVW-'RM;67=-pMo6kK%idPch-(rtn+Y[.,86TXuJ-l)bq7jSf
%$^.,uf>%fib^6%$]E_*Y2"`$eIF2RdS]=9&KgU8b@8VKp=YVPa#OM/A:UXh)HZd4<(H#)?Cc3eNHX7+XID\1YfStq&46C"m7X%?;
%H0;\!&)F\aXI0MgHt)tH`6?kj(emp6D>)>5Qu%sh1P6<rJs+_48N@eC%MrQP`Y\ugqp(HNBj)'7&N<QO,5mk[Bu0I;,mmUm,tBnr
%:ZF<f!O9a5P8)?K+I7DN\IWjS$78$gan5'\R<p.6"*K*8D1N"kT:)*Zk9Rks"h)]H3qJS!lROqD5K;C.ip`+gM9M.I[Ea+9Y/8"0
%RS,J<SLE=T0e+:_aJ@C;nSjYL'N'>M>i6M>FR!;C_mF*dR?@]9K?%"i`s*g'TRrsh=1a?F%MV>'iiIl3]m7P*lWL>=ojK!a*O/+7
%,_2#:8t2N&nC8hXntS$kT8?OY%K)l5?lD6MK,ib&"^_k.NY8X"3*7W!h=-oSn'+[&;rT*m/`P%mRi`/8Gub)@ERuJI^PLsP`NIt7
%HpB-m\KNt3)o='OO58m:.mVpT+Yu_A.!@hl\uUaFI[J"i3>"a>K;g$9JC-]i+8-8AU0C)/,9e[LK.Th/*b6Z%Y8(X*M!IO5:JQVU
%-,W"\3c5mFh%;`_)-DfOb0iup%::J7;\IXr"c>,`[nLW:*gToknrVFWK)kANU$mLYd3tW#+fAX%\PFIZDG]Iu^h`Ou+seY9^qp;-
%TOCFcHj/M_Yj\,gETHNDCBmpVPrs,5qdg45:?pO1$!8S3i\A?2m_7FA+4f-A3V[sSI58_!fD5j#Wisb]$LuN>itkI8s$\3FF2T.p
%.=\nV$==q/,N1epN2,WO$1D6jK(##ph@WW65F.^d>?bMb!i(-hYQk>-5mkK<96l#5$4<;53X*=5>]DA=h6G/*h%0J,lQ5_M+CmPE
%P23."I+Oi_".20ScPcF!XRNB-(k>#cr/T-`or\[#S*8!I+>1X"L/PGBNn4kgF42do%g!.,;!5.mBllRco/go5@L(H8]d40O<XqpQ
%ia5%=K6QX%Q+MYb_)ln!FArD`?P"kLFTH9^#EPa&ZNlOM&p\QI2hDjn+3tup4keeUUDl:nhX4*P7!I)S?IGJ(?QA;[I0VFRGOQ=4
%bd.1S&Ce(u8q4\cZo#*^;`WTb`uBlJ\`k'LMtE'C&$[2Cn&Wn9*E6tOVDP#/Bm_Su`rI%NX7-S1aPO."V>pfk&ZuZn6*J-1>/mUY
%;n9hpf/]K_[s]KI&c_\%+]s65"ZUgK6.P'i@rpOR%/=`"#DGU9q.9[J]hX-R]5/i#4jjd-^=&KBJCSe.b;>mM85,@a0^**e%)&&5
%IsdH`^Z5G:]t'g$p=\4U\9lnV^W@>^g8E]I0_As4%,GHQYjkk6OIkOp\>&'^fNVj^_0nO/T^,iBHC]uSnPdBH9.nT=Rg\M&k,nI+
%mNqJcgN%Zjh5J#aK<u+*agk9rI7jO<KBr6P_UI.i%hR$:'_lK6MJ:t0ZA(0B4eEj%@PI>bgVMC)F`b&fkPGn2faUI.DZ+^:(L(F^
%OIOn<,n64Pb1Z]LGV=;9G0p-`D?kSlBDXmb4/r1)8,`]M#[st:.'MjljX'^qLAZ/t#f#:dB*H-Y6DO?2o"5p5g+R]gGIo58<j[/k
%<G`lA6[0MLmFnJ(inlq#EUhdjPeYLQg=DkIiV`Mr3\GCT"T@S9ImRUL6Aj1.rl`>ZHg4,\`r)R/ILpPD07:qZm=J[jY?rn:k*PLa
%QK\>o:<[X_l[@`fHM`t=fUbQf8P<arBJnZ4VK[F\5N\hE_9WAK_r#uM^e6$@BGP;`+cS28W&#jX&4$@=2),O\&6)r>Xt]YFr#nD2
%&P@)N[NY?FGh3E:Kl[e4]<t)Mm8E\F3WtH;m%'p+(qdCL#5dLCl[O<VmLT?p?b^KBNn[$2m<qqQg-:PV\$r!K5Y4"oAQsoPY:gtE
%dMf:,Yf@8-ha)MZ-i`9=^]0@Er8#('55mXie(K4R;7d3)fcGKJs&)&WlMp^ITDnbT]h,H5BdQ&.nDCt,pP7(p-P+l)n>Qi'YPg"D
%+`b5N'GT4k0Nd?N(K;YrN4+;I;J$Ihk../oi&lfu$\A^DW&)"NGLR:Ck!X]C5qCAH<]@IR<2M#Do$05cG42klBFcAA=ln-1iF/8R
%gFH%?qn`OJeGK44JfY"V?ZLt]:56Mi='ts<MTDak[)sA<-b!*9ph<1Z^Zr-$"n+JD[=A=Za?4s0^@h_/pYE!P#e*CcBeE\WB*'=L
%P?b[iFj*(MdRM(hOq=F>^aCGCJ;l?"<[r:b@7OHK'rg""HOGn0HOISp@t223r`rf>"+n,"?M3>aA!'+s5$GMWAj[Q>B`%%&qM#8J
%j:VD=)rb-XJ56ksYhb7!,uWVe3Hm[,^cP-u$mfLe,k7ugoXE8:LDX`^/fg5]2kqN*JaGdY(%!MJFPlB2/o'p1Aq^2a[;PGhW%Xgq
%?6D@'FOpDGj=Bir-LaV)<Waf1E?L\`Ioo]XMN5?FB</=(l,XN<J5@$`1Gd^S8kpCI\JO2q]PZ!(33\'!YPC&TaM@['>#?TS^+.@#
%7V^#UY3NOBTt945+^PN`b/q($>o3GT&.a/q[NY@qp#HFb!'BWn7pCfHAKL@:;MSY"3.'iP2?n*fOhq%q=<,b[iTh^(#8A73jmakt
%2`<[\4QHs"8WuN`R`\unah]Kme^=.\/i>6bIZ]'(`!hj;#Wm:EefXBG:m/9-$k:;F;-!1t0(_je7M,gD`%9m2_iB=c0.9KWCuA00
%J,WNWnlN6imn9bk+KtU"^@fZK/!9\XOoG>*]b9EeSf0[R^aoGi;R#'CT)GaMYtQG;10o%W$Hm,.jLB&<-bA\kB*43H^M\b?DM<SL
%>@C!_54U7Sh$U>iiPuF`n$E`l5=DfO]NAk;H>>l"NC#kQJNiEKJu):8'Bn,dJ\D6/)LVF#CHMsV9JCIo*D.It0isKq#E&CZ7$?uM
%$]=4!@(nU-Ecgo8nbcMgT]b^[cZTRWF!F0>qU5efJ!\FTn"Z?=(Da=DXHE!d^W?HMiq`Fg4s7@le,8E4EnugSEiQL-Qf>\pa=@'c
%^R]P*3g>3q]hg<Ok:!XWDe=-VbKc(UPa'%&Qs+k"dRe'P.F8*u*B8YHs#6l*0MjHF6Vql(FX@VQ7C5/?Qp8AG&Y0TY.jS>X_-@-#
%mD5[I$;If9^"kbu3@p7q,9E64YQuB*@ugRG7eIEu13u*`\*,7:*CdCqpCi68GK*_I9?tH7?A*5]SLsE3g;<ppL_tf`;@$F\L$1#P
%BHARpG5SQ\0XP,YJmZ4=ZU/Y>G&Y>^gnH@`F1qbg8`\1R*7.p_Z%tkjs5@7)l1Vf/o^#9o+)XppN5&mBnssTgOHsr@@[%a?)3'Q1
%@BN,bOmRRB>.op%<u:'3nUY"7HpK'Bj!CVaNo"#/>RhtRrJ.l,?(aR'#C7!P"k@"@Q^gFWQd)j)N5Ss`bYOt,)DFS7]93%3.%l%e
%0V\ck'oLC@edh<riX76(*%s;uGP(#A@UoZZ\k_r@hDI60htomhhXp?s(:D!R9=?#$alYT-0'dPO/?O=8"&5ZL)@@l45NKai+^`29
%\r6?@;C:R"%`t9TfgQ>!b/Kl8m.\ctg\8!4rO.at\*,O`^#Us0)qd>H`"h?PiFWf,/YVO3(f3>DaGIYu^5>_Y,2rt[R2dk?-$T"D
%,3!oF\t2-fpW_7CpTcaN[Z:s.kV3pfj>,d8ffVpG"-J-hhhZNM84qPS#?6a+W`L##&Fk<X7!q9HPN*sejGr)%6p*a/8$D=Z_n5'n
%m<daSfpb/hgnH\DJ&sV044u_d`(<qom4)S<Wc`HWJF`4tp?E!qLei+/nJ,&\^uH_rjNcWK,#66q3hO0&pT:jXf=oY-2dLg@7;XUL
%Nlurk,kEPfZc^hC/ci3$FEq00<GVW;0$#2A#;<sM5qB_600!P**P%!7'kd;*Iol%V.lZpEUF37YHaj)n&H7:)8?WYONa,_6\mI@!
%>YUlJc`o-.5je=i4*?6^ZmWH.p52`hk=Z;YS\<^Q$P^Db2a=rlmK0qH:NREB("H]PQ^gFWQd)j)**HjtRRnnDs'BA02/Xh`9#pHh
%Z:+-m.&8rR`(uVm&)tpFU+n;Ard7;-?#72eD[u!5H;he1]`7J`k&0&Q7aKr`n_o?HKCP:E6b\c/ZU?oXYN'5A?rVH^W59t1fuHO.
%]L'Xg51%J&^7\YQa%O^sH1^7)MK(\cM^f/!OlgQ<qaSogo^UlU[DDW2[NXPMk*%"'KGZkuD`<DJZ1#g4Yo/i,-(-ul*^\YFq*TMR
%P#Fntc[>mtfU54l"%%"'<_+]a@#:58o]g8haQ#L2YikNuIGGP3b:LY<l<p$/lgXUD`-XdN!!fX8mrlp1F>eX0n_Zq)a0LBu(mtt,
%"\3j1Im^1I)Y1qCpKonBs/@Y4P?Gp?+8JhKq4B]pIh.D6i6ImCX0@SMaQ63rj_/cKqbY73OK2K38-?,@(Ds.G?Ug>40u!)Xf)6%D
%32[)f*T1Ji@3$d%[T#@7<?/+On68],hc_*AGe8+LZ.0KZlTte7_bdbM6%/:#:VbhJQ5htIqX+F=G`Ke)1#L1?f/)@HcN'&UQ&d\U
%r&l)%?SLKC3WZtQ4YEBk<D)RkNmTM)_=u^aOn.>"Q4+BQWXSPJ&tX^?.=^]cpqDEZ.a/2Coo>2<W!KW1"\fRZIKD3DKb5g`[AdpZ
%W<9qb=A^/+8HoB%BdDQ8:(.W4%,M!6Sb6/%GSS(uX;[9GYas\Z1<Tm];D`A(L`;-O`$'$CT7HTc2_8CoeV=T#?&#^-o9R3#M=]YM
%^B:O-USEiXHp/Oj%_5]b[rQf?(&/=abjs:D,_"^h#1m$o,/"/@5Q-rM-,-_\=PN/<!ZCH4=LV!7!3lgr*KGGVcTF<FqM4Obp>/XF
%>RCAp;o'?dAmh?&&kf8b#cE&q*=?*9%PD9MRV!N&):nb)6VpB[#uE!O&Ar5`"".3T)3n99qh<";<bk2a*-o/?fYMbGA.>X#j'Wlt
%R/h#P6`_5F\]>6P%_oW+2QjB7+8`b,IareZL#*L.a+GXE<q"-9+SaU$^:3YHYd]#cjlabS3L-4Z#O),#\I)[tIJMAV^G.MEb\8.n
%/@^Pb/cG@$:XjehWd&nYAq5BO"^5R<lB&4dd?8J=CJ;tSqe)5*oE<e%Yto'Z)n9F>dcP<OXj[U^?N\VB-XoO+**EM!r15qk*F,_K
%>AR2*J:e5t.^A4)DhrPr%3IFR48a$u;,eh'=(hD$p-o4ZZQ"q;d5>,KG4:'UNQ].49%O!TgtmFYT)":=qP3?-2Dlo2R=:f#Cl$H%
%VV:4]-!2FlU53l!rQC4AWiY+4k[:,'M'1,aUbu5C[6#NoI-V[G<n^f4gNp.6H:E&G`5nR^'H37H1(62REm[mOb0eoSkKahg'V5OE
%o*uMr.b!akTeWMVlFSPb'dg6",\!r[%=2+Bmr'k-2Xm9C\pIq`2h)HO"Ufr2Noi:AqSDk8eGK13MYc8VG8qg:Qf"u]h)A6t^/P!%
%?^b0m*K'W>_0ZZi7R?EI<%37$?MA#"I"#4E>qE26B4tQLNN.+9($uWtX^Vkas8*2H;Ud2B\"ibAmUWU?W./Rf7LX8fBVMA:fcXCe
%&0tB;r^0j\lKanfrnGuU\mO'p^LVtu2f/"L^#oo-FI`EtVZ(=Waat^m;7>=@KGMn*43CDB6TcFIK]XquQfHt"ceEbu&urA>LpNN]
%0:gW;fX$cCN3-$4[;/8!!>]?:JaT5Ul(p__JS?uc/)7fKO%SKRebWI#ST/AJ"a6o?aX&GLWae$`Y^rSf5G#LdD1CKq"S5t6bl=i/
%)U#^7O!hqbr3Gn:rMt=/dgjb,2*HrIZE4$!UVS(fF@OG7Brjh\fDKqi='+\Q0`)&<lsN8Ap3$DYEBOY=Jr@'L"Q-ZtTo3=GM_f5n
%*=f"sSG-ZWNd1/>4a['.G<bNdq<Nt61*71U$0$PqME`>f-=N`b($4<(`BWoLn\:jbXG2`+_1-MufpfO9qqIU^LiBV8/Kk*NVsSU2
%;!piGr)`c'eC%h^rjs:EHXrcF#Y/&f`7<auPo]\Zj)H!HB+h!DA.rAi^HFm:'=>*LhO>_KX"IRYBdb"U/io;.d_bY#ro[Y]Z![1/
%^K5ib:KV+2q)%QWY6rsDUQD1(01usr$4![(]WH*Ec[hLq'F1YaDS$o+Mq@@qU5S^>3ic*.WJYh[lHTi#H=/>^p#tcf^&5<RfOI6.
%1"2^*Cf572R!r&4^5Pbk9B10`lZ%\T_-.e%P(%bC5..8o'iV3Z2kB6cfc.j&0sI(djSJVDHTeqfrMk8DD3V4<j/<FE>REp!>dMD>
%oZ`?q[]oE0ZEf,@X,iF/cF%P6Tea0d2cX'/#m,oVk]q@DS^?S#D$ZFES@"rAj<0csKEC=;^3N(Sq],:Zf%R\qG.)S.eY'D'*ZFnE
%BYQd<2nakNZ/@-niX]sCk8IX[l@D]l<Y(<nVR2*U$.N1h60mj"f5D%K/rQBFdPX@I#/!3><0DL'$VG8]BuN#lDk6WhglLViAX]7)
%g--n![6_iR-^2Tu+'*iOct!Rb3nA#mVHESD>%),8!Eo6_"^1Zc*Ql961(L\-DJpWAL5sl,]\6\sJ>%#O7pd6^X!`7fDdrb*(lSh^
%)frgOBg"3#qtG&f*WrZKm)-N!bO`gI@h-'0RuSrIfU1o,n52!j[JE3qRnAFp18Mb-,ns_4)NfBHX`:RU6.4ZBVDq\&46u>?hgJta
%_K\@Cf/?u<nNj/)_GE<A37`9Fl=cNr#?$8:2]p,q]mg:`:15-MKH34Do'HTB@,6(>f*UpV^Uo(UY4E*Z+XXgcIZ4O,(9o"'!<5!C
%g%<bpIq924;dZk2BtZ1Dn;/!DVmcX(#TqMV"NJnCjBrbAea5s&nOH2;r)d+(.Ate"7?J*#9TF+=;:Bn(3A(L!FmO1@+L5*)$^!-_
%/o<j9/#aLj=P(OuedQIE:"4,qYKk`[nojJhKC8e,_nh>__1Xoid03bO)fkX]"0Jb>;a-^u;1++\nYIL</<BWOGm?!cGOQ/Y=\U*u
%lBLkfm!@quaY-q2L9X=!+VFC*[YZp','aDHP':jYWO9JaB.m$,qg(0^_mpT&GETUPF7N?%%ULFLi$ir71@A)Ge@XE!7InY85RF*)
%#5_S-UMl<>j<AjS09UNu'</CS+_NGdd/&&HjhnVF`Aa&EMCG[n8EOPEEPheB<<9og=g&7PW0*T-&>\;n.S.Z36=N`38(PA"l@[p.
%F]ef6pXp6iJ)]bJq*mm2mX90G*C/!'+sYINFhJ$6?p*3$OL#lFBY?Qune'\Nj#[QsI:Wju7i1,GGS.ZBVc;8L4C["Vd$&'iZQ"]N
%e#8c*1RO<VMmhk.j<AsV0>_pPPH)%*+_N`/d!L*tjWh@'`ci&E"nD&@lj^R_hQT`F'D:MJN\K!@>pYP@"+AuS[n1CO2f<c%]H\67
%4*Zn#K:>E6r=(d!Z%:K\ZRHj?SKtqKgt*Hi*EjkX*@LRe<iL)lEDXE`,2D\c51c>Hml3Pj"5#h[a*]s.g,ZU#j)s+"F*;BSDG^!P
%P^O&D1@dtKq\sSL@KWa9B2_!aHVo/<a`#qY.>huS3@/irS1`=Oq`UafJ)u^d??"2_mhb.TT6ng0LNBZP`+@jR;JUbLc<d$6p[r@F
%LN>,+mj.^MY;mnKmPUoTr6mdHmN:lum%:dt^(HmakF9FNbND@$$/sZQ2H^p-aj\u$OL#`BBRN%5ZI.HaiT!8>Wu%cBQnorG!qBOB
%WR`06bZ<G.\2/%_C#"@V=IX^CX!o#r@st)m5/I`HBLP</I+Z8qaC_8.D'1D/Z+nHI!o#3gMVGKFOqFs30HE3+WEC<dYM68-(]pbS
%]Q$,]o^6Dl7'%2C*ui-/(1m%f/(ZF9aQ1CMDgdZhPOuH3O6<0cUmt!bY=kl;[9;<f\(1q9@B;V-^IY=eXepM[m<&m&e#'dQS-_kt
%nS`*t\ohNF['%%1=6,UtAd8"LaJB\ja[^_I.m6iOML?M%lN!"JN`-8cTfB6%m*Z#f7\k/J.%nH<:I2rB'TE_>L8liLog[O.kho6h
%g/:b))+\8snKa9$)hJ^pi&<V^;8%'#H*s`_)da#PR5<)si74><l=P=T:AuDmA?rbJ1G*59<UO/i54Y@&n$A:EH(_dXof?pdGR9lY
%5h9peYGFGk?)_h7?mJi[*N\Q6_9Rl32J[+8)*3:9np-AINC]]$8q$[YQH7K(2ff6]PSuK&WQr$NoWA.Do(:&_5V`2IAh78AnfW%&
%,&Iu7\ZX#ol4P]MoI^E8fr"o8X>%4*F&l*pL$:D6bQ;7-n7)X7Z(_OJVJWFt(s8;o^8=N(`^4_t4GZ72"PWu((u!a\18#-'j"@>n
%R=51-DJQ:3R)-5BLY3#M.]:\Y`X*[TSk_3Ycqrbc;rLnqp*J9Iq3hUWGnEcS#D8!GPcG;lZjWnd\)RY/r[\5"6_P`JPgMI[>M<ZQ
%F'TC'pH%s?dRQg$XbL^LFJ'q]WL@ONaTcUqfhq)/esm9=&_VQS[J82#TUr:U@WW'Y`Rd+e&M%AHc7(6C[s=B?kjC<6k4F?#3Bb`1
%:64Ot3Bc8HRF@plqj^-Q'^kS=YGC@[,oa5;l%]&)T$<gIH7,3N1oE!IE+2D9J=B"0X)k5iVfnVeD*oCUrlMO53XG?']!E7gib0.,
%YAZa4?otqVPW!)f[FXX/-1^VAJ#bkRY!"W65q&,6:U#M[EU*&c=7";eQQ<J/Dlq^6*g+W)55i!DYklANdq*Kn]Ka,d\=jGe9lo=A
%ltB]q:!]nPO[7bCl4"Hs7aAr/K#=2;f\'L4#to`T^Xo,;f01,LTMW-08X/ZlTLK!Ej!?d/p?%7<gO"!"\4:*$jKP%(8."f,M!/(.
%hFtInhj[rjZo3S[i?-BRR0$]V_;\]?"Tk^`QkJtL-R4l&f-2.,3*sqH*9^/*0HOmZ6XbBT<.OEYD>2lL2N?@)/MC'=0[(ROa#m9>
%*:kS87]6m0@Y[)0\YclcL>O-=bpuMN#*5I.9@m=YUoS6m(5eq8_g\AS1<i6cM.nI/P54$p,$MIF[?n)!'bNB8*F>2QlZEO"YC>&\
%f!qtXi84XOo4XDEn8)jG^A@>4O+&d>@YrPc]>bXa(&kmIcT:@TI&[IbOSp6Z9o[;A6m/e"QSn%dl,pklQ+C#R?)sT^8pWWJFLbb9
%:_;L((k5ML$.pUB?.iSkk2b5i?_\Me#)]-]]kQqB[jli&"f.6F;-k:)[#4hSY0g%fA8OtNeD+DeTn.ng_IRcF7(=r1-3F@!+eaRF
%4c:o22PYWA)KCb2>/U)&7m5AFUoc"sRPh;f9P>i5-3kLLlN4gA>Q^\B^U&:)KF\=Q:N?%+?(V^$9P(2Yhd7et10j^p2UTT]Y"KsR
%'GbO!8.-jTNNJUmJb>qnf!Pq@8Q`TE_S3W_!4\P=Q-RGTk.ZHYB0dV]9$S]!EiFF(b/rAc@,,,1qAhWm1M"-Z0cAbuEtoBe:bUCB
%1#)@67-chIep#+1jdNl^fElG^/5(f1ZAh;ko#)i69$ur(\se(mFNE?XDH:sJk-;EQEB$^4g$>)leSUnT8N2@=GQ\5GVPW/YGE&b"
%Kb[i+b'0.Nr'%WnAVen'K@`^&QtZh`ZU^iR'6#4f7I3Z):T2$aW\MnM(I8V!B3f:@#7p$'Mr]dJ0r'=mUl@IT=-&ja+/BGPlksRF
%XD*aL47h/rQTi9-Ah=To'J_MMA5,[332,ZI%G-=KKm'[Gqc/IF\5nsSk:(lE]b/>04K7a9[6\Q1?(usY/_VgU?do$oJ5fZrFTkZ4
%+gUfVqiU]f!4Jc^_/2X4`S*Xof*/.ihSS_)l5n_eYA_nP$U"f>hi\>Y[]gf`>U`Ph!S*@XhD3,JGR*I;UR>mEX=o*%94gj:l]6Xb
%2@cZCjXq.9h4C`7^KWdogYkt_#LL$cF>FL4F&J1JYe+UeFnHJ=&Hgk*W1$hWBs^l'_*?N9T7?&[3ha9,LluGKjesED4!V\YnO!u>
%`mh=W"Lp?O9JL;r-^8</JDd=g)PU#:BZ2'!>@f`-MA2CBYLhIA>8<dCrqsY](77"pAs5AG2,1HTZCupa:F8E:EK2cO09e<lWc.!Y
%J>-:#DrI>i,?,m8_C`:QF:Sc9HFC2^kt09CIb+NXSVV&o;CYIZ\<_*?ccJjudGJ.nqcsjE!^W=SJdU'LD$1ap4IWeMfkf9e3&lZ]
%lb.();-fT*Iit!(YWa_rV>2Ddg(0ZtQFNaWOP.TsQ*[>=^A8B*qi'"**p`OSNjPbAG*Gg;B(B-G<u.%156A.:#&'D'_mM:IWg(4N
%&?67,CS1&BDeSHT9Th.9E&Z"Hi3$q9AmqF$$mZ_NYkKI]o&%Tc'=(:mk[7<o-VJ%<UUV2EK^fTQr=^.2J,&d_7URYqb-''=STD54
%ic9s<r^6c=jg#bWc]=/ObRTPd7^9b*J(UOWcP0@Fd?%dAc<f?gXkVlhJc:Xnh3?t\=GmZUq$3V(a@nX6T1;?$LkD`h<"bm*-n@Da
%/Be,9JL7Imj=#Ro^S4#U&"3`5Lk>;ZL/D`X4ufh5!bJ&3'*9]dJ.gK'/ufkY4tG55p@WQIlX0C\opol,G8>`k60QBi!aeIm>cQMY
%hb%rjNE)ZF@Ebfs7d3[k$mJ)3&mh`Pi]2^)HaZCj2R?^N+I.<9HX#5IHe)fK;2rJBf9`XorW16%\.X[WEb*"=BjFJJ)UpXs0\j#:
%YaAZ.r<'+*S2R(rbO1QMY\AgW]F('MY$%-J['[A9*ruk0aF@AcH`Fa+;&_q&1_!hj44XU%-OHLh-IfEs6<OZrpD?rG_[X$uRqY/B
%oW:@V/@S2XVkqbiZaT5?i,j>N9mRi:?$S#2OH4[5\2e1A%r38\P)3=153$sXMQTq$d1fJBZ'[80X%uPW$-cj8_^D10,6R,\Zgc&#
%!o"mY,fr^b*N7m%WeU-q>m[D7c.tdcIQ$H+=m%I/OVb=!drF,JTC;V_m6o%*]s,CI@S9)//qX7\Q"s<'5?u,*n>M_h\H1VM/=m%Q
%D&thG=,NSlabkfIVHThPobEW2f1Eh$_D/dU`Qtgi1rTOV;O:Jp)e"ZQAW`A3F>:Sa5r.\IB>f)-emg_1LEh?VOUWKeS!T?rQ5UTA
%a,u$(b3?hj2piMEO.Q;[Mjd7[1%G5LDrnQ8]dg8TAF94rA-b&#bNJ<(^6#2+0stlS+%?[9U]o9C6F"Nf+Ng?b5=UgN]=04)fHMnR
%CCY+1$UqAeX+C@0DBfTnP\^0rn>NEQB.ccK5lV$=kbZKqfR,aebAlF?W+tg.]1#QU,@%IH62f$34$t3je,iY2BAHJnXjQGo=hAp?
%!j_N'[KrEWFm:bu,:S3Wk+.ts<nGE=[`p4UmgM>P;/(cC/A`Mof\DWM(9m\2.[TQ!_F"Z.5;Na5J/XHp&*?FOe3J).riFs5f!RtB
%_"n&+[S^^PLgNF8!)G%YglYqP6;iqdo>(k82%?5m"R7\;'O>(-\W2=)BDGAjN]2Y]*)dDMSMf`dL;]2b&n7$4$E!o#0fia?5pKSU
%""LoZ'nLg%I5G=;;8::&aRqj.rBXb9N$ZP^J?OPP+;,jq@h$(S'qkrc/aVhiU4hJ_peqr-1b/l=_QKp`NdsGj(p'OG(f"VZa<6!I
%i,Y>MKgUFe]1!Uuf$dRO!R;BQE1RsCjnrPBhnSJ>$4n)QQ*DFsg,h#)hY7`ITfT[W7oo3T[!MI%428CMKoZXSD*9R<!66<:R8VW6
%)RpP`Q&I6c5._$m8gh0EgJn_[.e<VHeEg9&83]5NCC;sU_tX\>N+"Ar,ABH5/2OHfI\g4`8_:3npXHM:MkLpdQ=eQl9dAiae]^dn
%cAKJ["t)"JC]7/EIM@fo[LXc%Y")/&CgA)00W'99&S0DX1VZ6R%]RP9EbX\.i.]Z$gtg\b'4+=rPg[%0lt4(\Tr]K#'Pakeod`!B
%Wt6]g>_GFY2hJf4Tr5C_^OA7VN!;b&mC(*[SSQ5]E;KcjJ#RNgY05DGY#l7hqQi<-A[3TP&jcUV0rg?OR:$TcL2$YN[urf]Z4JlC
%H!+`O\$D>'UU_3Y[M+lB%kA-r9Q#4Vo.Th'_^8Wcmr6F6+I`4L;&THU#eU`LJu+-^'Srifh-+I"1_;7V&3rc%2sg/KKEhn-N>`M^
%,HQT;F\3''S?Z^M?@LK:Bgq0M2d97&?0<a]./!;jV=-@t)sLPGZ]W9bXH3A;g$D4%iU?d"(q'Cp[:m.'FOJ\,%4aLAb<u#>.:/*`
%ZWX5e(DoKT\\Jl?Z.Ie,o9Am%N,TZ853AW`m1=_A)K+k^hFRWXMOsD7IG$+._.dP*MluiJd(28T-m76t$.Y&O-]HS*7il@iIB+`:
%ldd+^1diZT4e2QADQ'[F:PO"kndqm!l-rgJiL'OO2?u;;A;79>BZt0eS7\l'3em$K+n<7H\]@,?#;0qT%(<0joHWkKQ6X1;-)"^&
%l@S/cC9.h]KQq;*\"]PNY`0ul)CRkub4`).;Z8p/Vj@ZuWjTI/7cL1.-[V2?26dJdAp0acX2d:9SPh-HPO+go00EY;N5Z%-F<)2U
%DnM%53g"W",h9Bd7==AE%WH:8nhDpHM1pB_DB<B;L=:C$Ko`&q5p>;!s0gL=0!&448lafcU&JHfklT$icoP-X#>X_Ba&EFS?hZgC
%d24V>D[saYJeon+f>4lpaCp#RnrDmqB7>'uN\';WHZ3ZHSb^IedH%7@",Fo5Egt7ZP<VcVnN8GK-^Sas-C8>]<UGX^>8h8#Il(Hi
%Rb@b.A"VX2[Gch1m*Ca:^#)-5)k&-'YFosb)42*t8#Y?"U*hY"MCfsHUqP=(5C(i^>,d>J6J\*'e7cJ/gWt;7c_TSf"gC;M,5chi
%d0BLEOD?Qd'k:HEPSobb@g!%`6&u+;U!U?-]+k3RGJjAiYjI@ndN0/'oq>^$@<.mD-+Y7cZ6_53.UfZO_^N[M>a"m8*/U(]Bi*?"
%#_Qt<Oa.L=:;fVMclr`1=trY"[NNj'U@\IS<lu)h(8O0MU+Flh?"dC[@-<t>8McT3H[E\$\BqN.(4OiHiI(Eo!q4Rc*&GK->*g3+
%^!P3<clhG\oJehn"!\og"gggMIGrP8UJp:/5qLQtD+F-oouPG_U#_1t>ac>+$5=2A.bWGS-ZTpr"a+'nRpIiTFC<*\>,gM(I?F=V
%j5.Y6LiH!?nR^K2Z;kgL\i&M\pmT:LXSJHHZs4';`]<B>J>M3V2OKS%Zt.t1\hRBO`gA>%"ICF:iOS<64b1#$9Q$E?H6VCQg17I*
%"SgXKYa/Eal:a]"mV-ZE_oOM^Y$uKW7$q)6iaY&$.sNsIQLmZHP1^f50PW2o,&`8Z`g`I$qi\</j]O),I78$hpG;iklT6(@95]6;
%gH2R=]aZ'[LkL?%iHq5J;C_CX$9o2sF`D.CNoJf1oh?8P<:i60fi!^##]Bh&CE^qnreXK9?PX(@[0MWWK2?p@6J(ss\Bo>]jpt<`
%N=`:2=O"kR%'ZOA+Ch5C]<("^"/N!k*V=6a.Sq)@BHX]dL$f02n:Q;a\_='F(i"lk7T_TIIIR\(N=*D2gD4$o(r:NkSBE2:j"l37
%&+_O+j!>eZ8HQ!8^bg=q@i:4K.+56@_0-u1Wn&`_2cu[n4$fj`V_+5q$k:k>j@RjV('6&Y5`3G/'0`#MdoJst;um5kaVjFi/[j>C
%4)\L3n2Y9mpkkelCslLeajHf%0I$*<W#LT-r1qa1OVHXoX$m^&jeq#Z&CEZJMRnp"\;F,V6mA/b\QHQG,J=(GC0@KE)hpK2ZPP]U
%45sH#C+%4]>5gd[SQ;!>5%X4Z!E(<eU$<4N"4!8`FPn@f+"@8r7g1fU\]tP]+Ef0!,Qg1QfO?;f@\]5DUHM3S(tC@p!7b74*gN^`
%Y=4gCYN:^n6d4[2AYc8>E]_)uAo+u]&uOfcWfh(nKB4<QRi-NIj9XQ?1"#cO\5*LtJOA=n5Ck!s$d_Gl9ZJ0!7"U<pMF2l'cdJ*i
%Rq_.nq5,/RU+)>@#.urMs+@c@arF@`Q4A7"_Un9H>q@uV.+6uaCsn]PK]_3E,:$b;h?tF859#ku!K-089OsmN#!J%r^fM$g*p)mI
%BV$1CB@c]#CO1OInQtGEHSZA9)k\UohL[M7)@=Ma%nh;ZO:-FBeV(CqSM_A"](7S:2Q-&l+]Da`pRdU53Yg9cR#m#GF:]ZYP\)(L
%q7oPr%3ePOpT_+[kf=0h!B"\Q<bAj)bLBbhIA+QXL$ikr1Dn8JUkMden$u79Ojb)\LG"8rD1i5S5pf$T$j?c[Q,H-1:!t_mp=t='
%&2GmD>,[8.8pYsfD:IX>Pu*Fj'FM7@W,VP4[RJ0JU*hqWeIuKaZ#=@FgEYPQP5)YcQa-/uU*4$Da`>T05KtKcX*:>ZJR1Pls#:Gq
%/4CQ&N34Z?o-GA)TEYceTakBC6Bt4EnFmfo&AdR]29aH[-&$'JbDA;#S:\:3A?=<D8u'(cQ=N'uf9b>7*R].dpuJ0`Bd!mk_J?K3
%OTLO%[K>,Yd+tFUA5K0=*j:R@+ftW$-5fZ&\-sE`?K5'A>3Iol7B0-DG/%K)4$p7JjnGRpq"I*<gsAk_7D;J]Y^-kT4pbmr;cc$?
%q$kl%,?o[J(*NEPnLG4Y0[^.e'L]F5^nK-*glO[0)@J$[.:fi+5G*n.Z+t0@<58auJYteRBM/>/7D"Npfpb;$OX[6ej5mVkhZ?cT
%%Qa706?FqG`"kKAm:3ZEE;0tO2;a5U7]oMqq>5J&DeGJ=UJoJeb5P]q4\a:A0W56DZu'p.%Oi7g\fr>AW=.u66""k,K=YIS6u%,k
%..B8,ike$PkJ2Q-)J:oO#il:^f6ec[U%\%D0-Rp[TEID?gA-M">Fkn&o2V-rcNhmHJQAg[ag/.*'i!?^Wp=l(pE."-*9#!mI5jq\
%+7Q`Qap>Y-X4/-bLiDf*PKI":8i$njj9[\=a1CEd?"CfVrl-3*>Vf*_'g:!a^V,T@Ib>68`?50oKM5t0UQD;4dPAIlLbcu8]ih$1
%KHpGsj:jD[oo/>SfdZ7L-W=a*]#Ei`j&tY.K$?r.Kr*EJ,AL\pN8(UrBl1s4GJI[3j+N%:@m>odfPS?*S1IT8pq\d($P<:?/#(7@
%-li?5G]bKKh@nU(U0=t=X9CnD#<(Y")i\qc?5=K3=;AIQ<A$-f+dZoBN);A,9gf.u6s2Ysek]IfIXrRdir5,NIj.M(50.0p5+ERb
%l,+Ns$o8G8L^SZt6u(hSZ?!iU>QgnoWlTQ#7D0,bqRQ3KSc[))S*$qFf317FcBa.Y1fSO0KS'lt9d1XW-1sPSZHG.-;*QO5$>R@3
%_;_R!#uHKE\Q;s);+h&6bP%N6\Dr*>"'[fb\t[sa0Jla_lemfD-!^V9ncnut%Tg:F)(2q=ri?\I"@Fe`5V:<H6mK1Z\s5Y!;GO,"
%;[fQTOnDf0r4(=FdMZk`_aK2\>J>ge@%@U7?75seL^t\8N0+lIUidj3!$B9ca&A_'E:fnoPS8nm,_f+uHsVBu)U<c9%cT>6_1"=5
%dJ%sn83XN*bL51d05$O\8<ZM$q!Weacu[J6%r%atFo[pfQB73n7e6aE_HT1WZAU>58-@FWq55ctL/=0F*r/J:V?'kAn1P*1h%,5q
%Z^9N(>f?nWVn5Y?U;?XGojl@H)3(k4TEL^5$aVO2E35D.ER:sL"O5s*1P@DbB>Tms0#GolI>MsrkQ:!d\D7CReN0DSR2_j6q8$)8
%8EGWO=G/-d]lo\a,:HFE?3)MR=-/S$6gt#U=RDNo=d+L5@[Ie^[8:6E)epskC.D2]Ota8`X.cuR+g)cWXkFCi.j-Y:G_YRc!k"6m
%X[V2dcu*![K=@*-b6Jp-K8Ee"ObGrf:^a^.(a/ZEcZUQFB]0FM7KA]*blp;]R6ggI%N)q>7tg`6Xbqee9_St5\G]at@/;t2S&h-$
%%V_JU"&:H(%g)?FkW]PL.0c5R2m;fK:53qWBaDtJqYjuFW(m:S>E@@'JqS21j*VVC<^9UVVJtm]&q,h0ZI7d@;N2(HCZo:G\I*)H
%gL7?fA+sU\kp^k]o<h/%80[@d;[J^t?M+ZCdp"ok=?.%.[jT@lLBqoedP@IrR[qot)gbPE5(L"t@4l$_WIRS'IWg1IjTTCTlq>:>
%?P.--bB:rt9E/o/6_*=mBV;&8B.Ud_[*3$='!KP9ekMBf?IuBD0:SgA*%LZ]RMJ@g%R/g4Vs.rq7qoLk=.=P+iP*j-K'`iG;7]rJ
%/nOlef<[JN\ZYUZ8-4:L(44.K',Ou<4<c#3Fq(qE3UI2a7%HKq_2i?rc0Xe<X4dS9/*#<SmAf*-cQOf88XQTTLbb^Y7?=838*9#R
%[E/@+\Z:[#n#]FB;Ceat4Q`tiPhSqb8*r?91:!HofYg,M:!>G+R#7ncN8C'">%;7"'"c,DJ3I\sj3aQQ"(AI^P`a`PZ9c25BJE@#
%%-1F.^?INkmsp<X\#'^k,>lTTUa_Lg,":7hpV$FbZ1dP8QGG+hH@rc<dF2e.iRqr]PeE_sN..EP1^8kkM+I+9Ub!+8$>qgo5*9E1
%12bRT1SjhBT+?T1dnEV/\P1$!XR4#Obfe3gTV@5_.BM\I\a)(S+-PI<_3ufA[*6FMD:M1]*8:&3*Z,aHKBUKe/HV>=;TLcdAYePm
%lI!chdTuu`"D5MiKlkaR1eW@2=.h"TH#+T6?Xf<#ZKl?pJs<CDK?k$@XCFW^pQ.<RXL9q,mGh%F+M*j:)RlrYeX=O4X<A*@AZu>A
%@2L8cK=0Z6=cbDeBl7Xn`"sn$&"kXQ?1keAmXX@-b/RK!B<r(3=ta^"TceB;rXP!N$sQ9'KGm0*<f\2/-8BmHU&"JXMD_V,qp(=.
%iU35u?fiN7)nE\i".[6nr_Y%J=PoU@CMt.!a?i?UN[3pd$DI6.dr7T')2_lX.oAoBM&"6GR^LE`"!B<k*sTbee!':@b(Bc&.rl4D
%&fj_TeC0p(PU%-"VF=VWlaAfDF`;bj<=+\=;Qr*H7.29[<NUV,"S3@A7P*1_I/PKs94C1J+W"m`2j1`al&3k+%d.mg:q,l+Tk#r=
%:dVUA!918Aj1b:I)#Ng_^?05`1AcYMTk(nGDVu8c$,;+AC+(<'Im@$miet#cAJuF*lr78;GYX,fKo8S15!V8U(&l1Lc&?7+68@JP
%L(VVS/0r+O\L$UbeZNrA?J9J,He7Uik-#rIMiH9J:QDE\/P6)UZUNV<=tRWKZt9Nhfr^PABgdB`,?>Gt5ME6hYLE*EQj)>4MBtc'
%gedAhMHQHOL@XUCWr4W&l3\GWY1#]iJlhl#hm`3AktpZV>gYpd<t%.3g61P_AH[cg_'U'PXFgg&7!(L\,(6oUDC-b)ZFCZ1Lkkr3
%%!*Y?!*[?#-(f9k8g7K/r`7YPMtKMLjaA-=;]YCs9p_JTgkk)b)@=(0Jo&ZD$EIU>7p@LTeu.eQMS(Rp1qWOU0[i?Lr8S"rR[/b3
%IJBn1+2\P:q@@omqVd8$N-#mPF9)s/'n[j^31ate&UXZcL_`oH(Vhc_G73HklYGZS^#r%:#s-h0)k:hW2FeHZjRL!&"UHk8)[[uI
%>Vjj:](XpJ&J3,(@NZm`&B>_)#'P%bb%.g`JAI%g/##5*.ef6>jR+ji<()bDl.fZ8G;l1IMhq"50ZKgiE9ZBHJg.pp4f\WCBCcHa
%186;0S">BF-5qiCib+0'L0t%>N4I:,hI[0*gK)ECJ0EN$d+gs/F@haZkhT$+h21bQB?4.N'(]dHd)7htKrS,)kE$7Cp5]+gl<lR2
%>f*nMa$Uu"iZNB?M[bcr\kK\W^uJ7!%][jmK2@!ha+OJ^@_M;G/NDP>8D!YjpmPpU3#2iD<D,;P';06eNEUGr^Z.(>dUHRU%ml7X
%fb\ZPm:_kGU:QKOPEYp98]]3c?T,?kBTYYTd&:m02tS+eUes``L2,75,>;UL[iNTsJNO^QUB)G.phFTI+FK*n*q+78mA5l(+tE\i
%/'Z2dLbeTgR?[]6*BJPRUXnh73?R$$ZM@`h$1\\CMVR8=Z@7%kQ$+s[M*Z+RAkErT1bUYrp<:^%g>DY81rq'8B]PQ$o4@e]SfQSK
%Of,Q7B9.>^Y8+lo:?-olZZq!aM.^&5,i22Sqb6"-&F`&KPM7OBk"-BchED2K.lmGK<*"kYA^F6dFZlfUaCr:Q1!FY@*#[IhQu6]B
%MBR%jY<d*0I5I1$0-UeG*oL^3Aoud6Z9r8CXsgoq2eRbi6oNrr`5B/f^,\dMV\)ZGHc^hB]Tkfo&%$F[b<UD],@f+r.#P!flZu'2
%a9l,Bjq((8aStS?#/.S@dEi-ck:Q<HXWS-R@%b9q$@-Q5e@N=PB7kP!2G[7*DjAJl'!f+eB`]ZB$:eSU?LcGJqPlD'*_I*NmA4=M
%$R14UNdtrBpPq.%>>a/pA'5`>N7n03"isE0`XK7D:'ioEF&.BK3/7Obi6SRt2S&B]C:<t*"&[2O6H'7*'K/%OPsJU3`2,idB-7ce
%+C8BV_-C*2$5_bO*MP<a?*=:dmA]/%I/>k$R1Wi]-,`RqPo:2Oo<WnD$o"o`A@T+LOoY$a;W1k_O+L<%*#6$";PJESb+dHlIKc;m
%F?D6A'F;qdP:U5^[5&%3rW5lI:T70e"a_9VWeF,Ylu;2c_SAJBY!URt(#D*]^EXSdSpM6G_J*,fVjCPV$Gdho1cuG^A<[hO;FDb%
%R,E"^&e7BTn,XX=W_"f*//6C,Y+qCfG%,?"&7eJ3F@oI6k<Q>@Cp9aVD8be[_a)Pg8$QN*KbVbCKcu_3U/c#=ATU1gn[BWQ6W1rD
%4W6lZ%5bm:_:N9N>mC*3>.<g4&AiZCjDtXa>--C9TTm%dZGD^C:SBMK(jR6[6@S!bq2@fiJU08(48u[lVuQY'\IC[,1*1nOQ17`W
%!Qqt;P63s47.oD5#/C7NDDM$]3K"&akFiVe_&(&9+$1EE]A[^'_&tJ`_V&7@;rdj9oc_TfMc;WmcDKf5TIk@T/$l]4aoIAK-o/4N
%^EO=dLA'D59NWdZn]^176GJu?8ST7Reut`D+U[WXhE9D=h#l;t-GrS][Mi$C3AW=S/Ep+f^k^'!<J)`T$R*h+30tJ9`P!f:Kdtb]
%N'(SM'2k$=Q_19U4])u.4UNh[$P9'2!$XWiMCX'o(=j64_;8S9@g3(gar7QXl$D?HNCZr%>3AB8)iL.-%g`!+J-mY-1l,[&<@n?s
%MO;5?!ea08,qOQVQ9<2Ye1.>(FTaAuMF._EeP-V$,'m3K*uUA3(a/<!W>dYY0u,SOE;ShS^')GEnB!-pQf(,&)BgF;!FdnlPn!nH
%gS[TQ"U7=-<%gL.1+n[i.R4%U'gPs0Hrh#ZR)Qiaj\Hn7=XZTuM*r*p/5YcM!-/%`I-,KW8,;H)0DQac\%3%(09(`/D/#N`+@2bq
%bQA37(+_/\_@4;BPdNulT*B'F+N[+#OUu0[YL)@Y!nj=mluAZA<LGrt3#3a@\QSSA)*M<3X3FcS!LV4Pn"TJtCsm%^gD?:K6niU=
%*B%(Y-C>(6lD0$R26o.9^dBC$LAsZ<9F<#(ZB;[fm!I)qV0F7^S=g@Z]r+r[it[N_AJoOV7emoGhNtTLIJ"jo-26DO>5GP7k?*%J
%RY@ZWKiM6!G'JQFUiql0)(#R9\^?*u2W^'(#q6@pq`i_Dkf=#Egh^juXJ/`;81;gD3c<+(AJhSMq;CK&F:BRoB9?$dkVaDMJN4(I
%#PH601KgJAU2iK8ml*Q,[.n,L&`&96lFe"4bX8,78Q&J`c%Z8Mh(1t9abZ^1`]cMpk_@Fk58[@\0#JX\-BL75rCTYWnB?Z-ltqW/
%i\JR8d[F1\cHdC<;(5L1/`jHD=;7HH-KED"-I?=Uf4(2kcNRF6rN%IfY<'!5IRh)Cd5,CVm)dO_de5&pSBbfUGu7T-!3r./&b@M>
%;6f9U,Lm*l8"gWQ@Jsu+)!EP/m4HpunnKEYQoOEC9h6Mn"s>KuUiWEmQeg;G0p*!"ZiIBm(d>k3F8eaPfr'_9kkiHt4u./FhjY)&
%epsHI3[l0hPR\l>5U+W&AAqK_0$^3?7!/MrfFhbN(gljc_AUR^4FD%k#p3"U8i"4W:&^u(.UU%5RRLFg)AYUho,`koJ\GqI>4TC[
%Zq*4ZRW5j$%2\KZo_cK)3m,i]jbb8s:*0kL22Z5ii^gn\N!om.kTG6%8u?"'=]SZ/@U*Gf,NLH?%)\K#`C2+'^hX:5k2rV!@`md=
%cYj3rM4,.Q=:hs/.'fkd*/b:"&b2K6BL,[`WWI/_Z_,_6%uP-p,?W?M,AmnX#k37,dcEDp;fr8Qj#D9mZ:\?P\K3?R_*NC%PtV^a
%9nW(X!0VQ#U=cmq$p"sNc.FBI=qU>."VlfoShJK)T&C"a!0C'X6)_oCk(<bJ0<2\/<<(M&Z[cS@`iq%r3^U*>e%/7"g'\pU_MA?5
%\?(gmJ:3Xd"GUu,TE,H!Xk>-oD$)W3"UE-6T-0"#?ZB(T\NqOB[M2s,-3D;?\cmlk.sHhW-g!Fo/A03Kk"'NjVCJ;G\>lRA@47dR
%PRF,MZYO^c!'.359M2\)o`6-7J&W.mq=5er@6g/lht&@C,M.$G3[*p[!F##G/u<Ugo=b[gU7m:rfgPWF[Vh99W1jt++`c]I.L>@E
%CTb`UJ0t6]I"b[5&5O3eH10`[HK0JKC'maTah/0&QO-0e3!q+@Ga2f2g85g:-PJ[6Q`^5m;7g/TAo>/%iuWg'QB:13ekHC^0'3at
%&/BZ;)=\@\B[Qc+.:A)GO5S2thG!gQ<fa?!<EA&u'F=qB&NL*=,FVqP5S7?>+VJ"Yd'4IQMhN^T3$F4hClB+na??-^ai6;e65K&q
%8YM*!ilnIQYk,T@1b8BBX.s,?#26nN6\pT1J1:kW!;16UQ=Pa9M28g4KefS7OA.;Ln=fn$bf(jWP]'T2p.=fb'U@:&W=bF<>$ZAM
%`7GLUjHRmh57o;787j75]1'PZHuqp/:sdc3iB-[K_4H2h<^:1Bb-Gsp=1GX+C6imaKhJgg#Sp,TX^'K2]UAIhY+BJ2_/e$L90=Ho
%]#i5'8n@_KCW:l!a/(jEO+9Oi3l=4V!i.X_IpdJXJP,Jrq@@?4pp7%W76!02kJR$^2]i^n/_<$nT;-\6%cacdXtP>fWDB:!9?@%H
%*]:&8Ae?=6Xur8nlHuBj\N.MO*^%G,("H1dP@8;Dq-'GL!K&I5coFHZXl*lsbQKJDE)Y[3WPP0C-qM8l,;RXup65-t0ZC#130W!S
%c4=W.g#JW=V7d8$T$[Z.Z]^CXCQ^QM[]1U-8!%?N7PEGokb0fG)'dY"[sm]C@Lk`f,7M^3?7+\=fIEZd@Q$9732\b$RtiEA`X$nI
%+L@bce,RN/h/<AcL"CJ.)qrNMKZFSpIZ-H"9?`DtjJL1DJj?+T"6#AA4EqZ^gN)ld[!6dG6c;glG;EB=ekT7=/tHh>EP36f/-DW8
%^pP(HZ\"s])_G<b30sY'Z#L>\;\.G`CN%Il*q]PaG-:(,1#%e5DONUO1`P-uUWmbsFZ):G;r_Z,3@b_62RDZ['P`T"2&e#(GY6Ri
%lnXq8U9DG4?s6);N-.C[F'2,n\+B1=Z/F7`/F47C50-:P$Z/M!FVIYP(bVJ5EKU)`5j^J0mSt5E3D<(.IQ!R!L<XDcrmXEBr@*HQ
%4m7t"HUpV.)6a4;Snd:%JR'Z%XjQtKf\fFh;(4\+)oC_;BK6$!7W'9@B\Y5:jl94g@3hNjo$T4mTmDu3b)ed6&fFQ8Q9?/sU#]1S
%Ink&liQpGWLFcq.5$$^lUZhm^3e2g,F>ooNbg'-&^t6M!^dgb=<J2Y]AO"23eY6NcZe6$jZ-kN]]C]<46ni4Q9h%bSqGUs"&?bWH
%>TA$[T^YKGYQH'-"2U=&g$>T8KY=s90BQ_1TpBEs0aDCk>1!i(!f(l7L1q@?%6)Mgb1SRnB&S1Gm=;5"RdW`*-0SeDqfu`%TA`Oi
%&UW:t]VL/^7K_&G9STuU2o??+YW,8@$EKm4.^X:dOja=;?319M+j*0?bYUk.*NNQ[C71@FFsp(c>m+,PaJbHE]j_]G*F`H!em1cM
%L8GQkmI$:)Ap-\=#SdP#B[\,XA2lo^g94DFa0WdDa^UetS:JR3g.MbS;$c\E$`FQiaO+Ji(;%e?JI+HNjDIAu)e#+:a6-;EHtEo7
%laHS.;ofUF;P'q"U\Z3gG`#=R`iFANAZV"_cOco:P$"gVaM9Z@MS"tR<AHXK1hO(Hnta9ii'qeFj3O0%DRoM5^!G2qi6U]B'mc1n
%)$*&]8a,KaJ.91ciu'Vd7KgjWbCQZW$9j_`5$#U>7o]m_Q(cQ9cmM1-Xgi!Bi!Ns09.IFh\O!u_8q\O'*"jg*#krmM&'gG;9t4pQ
%ZT+"Jbka):0d2uN4:I9K;;ksQI[A17`]uun5W,N+(ntT"KfqdDW\BeS`7&F$3rD)V,b)(0!_/+f!F02H>JWsL>q`mXngEI'Im^*5
%p"q^Q`;b]pF!h8F)T79u6:HJuW8:1T?=3!)H;G'05k*W1YRAV?ho'/2_+7p4eJ^@I;5S8FK%N1JqY'$Ce*t,?/77\hJ7VUt-3i2(
%:A`:Bl)7:Hc$idZpgeeFeK`9ClQf?XN)*9bJj$/fN!'M5Jq*:p-5Qak3,e3;WKMWop!m#cUPRZ+R0$<d2_8R67s"@A*E]G*3=@5E
%g>q;dC`uQD4mI1HM9;*=$GsqA9$DSa_"-\_4Y$/5=)JoP<nk!q9ou=#KPSOH1N'`YfLhDSKItI9bK5O^o&m:ba)iR!S*>3mQf\I;
%#-)!(01s;h>imIW)hbuLJ4PLDrlo<jPY-""2<3[#3^DIhBLIJ6U+?#?>ZV27NS<%\cD[<;=j&<G`6kuDo`dbf,*OTMM`"Y&`4'X^
%3)9upkW^2jSJ<#JiQ3IWAH;;lEBl<OEfuCLKg1e^(D+GKpnLLnBLFo/q-#6AM7':nin[b7g*Db+!@=pHGhii"#`UEB]9O`8B$R5Y
%lo1-7Bd++BYn(>=9pn)"-IkL@PRo9X">rJt<(MUqM#s)cd7-^>kW5TgAZK<6H>j:tCS_:7aC<LB0URNuW)5c[oe[oA8W.2VAa:5?
%"&+GAYG\Hfjs.s$/`-n=Rm*j[;ceHLr`F8d"T9sP_!>S(=##,[$gK$%Z0DIt-#:'+f@F=<h2X[dLPM*2#7;kNCkX=uo`iRD*o<S(
%NS7P/joXT<0CL4Zk-g==++3A^qelKmhP/>_>bIiN(KB5)1oJ1GbN>WQ+1SA;0T8en=/,FE<O6-Vd0eVOmF"J?0pT9CZ]*rk:T%P&
%)afSic$s5.cIuGuXJ[>En3UotT6*@]&MX,QDY:OrXW@uPgkHLTYkP)>$c9[S%T[tBfe]_1WoB0c/<OP4@Kn&EPs!qbYKI:-9/*)6
%bHG4SljRuN]$uhf3*:g#0K2aWMaoe8`=/7C3mi^QAbbYXU9?H)6`MrS"W-tuqX1pr-%Ym.j/ZZ)h'6i9KdTTJR@26,%`L/A3KV7r
%I[EDM$-Ph7dI1\g@J[*T=DRAC%iIa[Q/RrCA'-OsE9m`sBF)HNFP$OgP2C^1Xo?L-]t8:[cBj216kB>HZA4$2$fiqobBaoQNV*M`
%HO?i,0hEf%s3c#'B8Ci]&p5St2d[p-^Ti`i[Figa_$g_!]XQ-YVJI,k$U&\kaTDUuIRT%D^fn3j+_Pm^ADI\<!P9BG\C/Ia0l[pa
%Pn0'[B_"[K3Pu`=DIl.G15kNk+ACqd./t'N!)`"$_4;VShp8l_eZ&4=<JCOd<0+?!_L%^GjLP=,NN7/"+;&QPX9M37ghr,Imi9)b
%V=\N!<WZHRV_+P[58&7OYdj+SqUoo7hteu#7A&Hk/e5D!:lXeS^h+[XTn$l?r*T6O!#7;B@qVnAY^h[GW75Y]0F`BNd_V2DVYEGD
%0cF0sVQAIe6>HE'TrJo&'F%jGMIOS1QE(,9`+9"qpXuk$2>!7Fc'^l/3#,HZ'ep&jWO7u8#KZHAD`!R'%O!+&N>#%CEQ6a2KM;hf
%PL`a60<VQ&<^h[X0\n#iTMnSt/*8euW*?gek5&6QE]u8U.79?R7.QC2bZ"S%;iC9\8QpmP%gNt2PV8CC4hBPb8Tn$_&Lt=5[8D@h
%3uB7JB^MdU:bS8uEa3G.75N.s'nJg1<eAWI_0_`XFNA*S2;#OTq\Y79d)[s<8dNIhdg[>dW:VG)_RblpbH%)N=#9-;'PX!q[$n"7
%$)HBKKYVOSo01/DMTqaRZr+sgJeoS('r`BNI3FF0"a,D6",=&b;e9J-(1n=6Dd+\1Fir1P$84V^'%+h.&:,4@oOk5Wj*Hu%O\egY
%mnQ`$4h:"F[@Ya]PDTTZRi"R1Ynrh`Z1Fag&>Na0MU>*^hGp'i1.3p!rNJ9sd?8\t`&Ib=1Y<V%.*l"$b*a'DibNWLr,mHpHj'Y?
%Itp`o!-JR.@GLNshG?JTW.UNuNX:E7,Z^KP;q%8+$Zcms5Qb1LT%;^l)gHNC;Np>)E.!A]+:A=AXKN]!;MrSQQ_6q_WqOkUEF8cH
%Zs?TLok:U&%TO4Ar09A\$oh6T&fXNpl]ZmNZ8,!&q8.ad%t-587kVH;]Z2d#Yf4F_fh`tad6^-gJ<5t<I`bD]Fpep1<[f@HO4l6b
%^RLg]?NE]uUu)VLO22R9/ln\Ke3u^Y3=O29j6GGBV5eZsXI0QbOhFBG[=d6B2f=L4CJCJOY>H2A`7/o#d`6%mQn>aVb!EtFV(%;J
%>5_a"eHA)OSkWl4H^9VTI.jL9a')X>X=@;NH>K33hJ-BcV):`A=7X=m?<rZs6q9&L<1HF.AE0Mf\-.o!T)<,=PlPJg_pKnJ::7&Z
%akt@ib:`p%$*..qMs].$RMF[9PYbB5'0lU9]h-=?$T<`\]t'4:)?n'ocm<HU!W5f_5%08\H=K%bF=smFg(:Ed)Eg%h2+mp\q("N/
%;QI@EHr&iiD<nI'EA3o&Iep<h_u(CZ]N]*iAMueqm[^V8AM#%k3tK%gp1(L@72)3HAV[4%AGRlO79,;IK5N3GeDZ9>qh>_5dR/UY
%A&q%nXe_`(WduM#rlFjNRMCi$OWarMi!Ct+*8,kWif+u:g="4Rr?-'Fkfds*9-[PCWm0Y,4C4HDDK.6OR\;ei-V+AtdKP:67_D\;
%`L\Us=,%p\JFfk7?=36LhLQFQ]445QFUTp>H-#8?W8HUabpnpn>,bLs$u@3#RJ+N>8mZoV`_)Qb(RakLKbgq(+O&*I1hU^FX^G)1
%5uoZLd5;9U*(r3iX=J9,Ij-'h:qPlM(XZQ@#9,PV6ZFF;eLYjn(mAp<Y4RgT)"SXs;5@NsL]AWHKCT(db.XO/Z%K+Ih4lb%/ge5D
%9d`^Le'o=+rSGg6OgdAD<C8=1J9$`H'".0.E^CE!YU<P"efc`%h%**tY*!DK^fu!I:t*.#GRp[3b:p!QRjMCgV\6tL76V2XA"Wr3
%eI(n:2@)Ve&V'^@=S@_UY%]=$0ci8VP-5T!:c7)8d1$u<O\0/mlCW>Yl/<,M%AMVELo#ECM=A,X%dCJWPiKn3+)D@@c"n'hc.kG3
%=8DdBJ$<'u]>>qK&t*Ga<m@V;8AZ?Ha$4'%o+(!e2>-#u_91#B*R1Q?V^uDmD1EYFap[!R#+C.0/rcFKrmh07]6?)U%cV*%]>sC(
%;-,6%S+oJ0;</eNl,7%VZr*IBhP11L)(d:DhjPLCh/$;V$ns[YmHs^*PY<aldb"TVaMH9!HUi/?+E#3q=f:(?gdWkYJ%ah<W5J8K
%op%!,"c#UiAOE^a(b%:>*6T'_E(`?9>!n]92mjB&CJ_0Sd]mYmFi]LAUJ'i8ITR1RHu8;%p@iI'p$Z_a(rZAdpGKF&C1qNA=XY]X
%5e5]N0Ai:m6>Y";(afZV)5c%,boqZpd@>=Parh@PeK$l(GV2d-b^j%2^7)]MB1']>mRR+BNoI7qhknm!ms:m,ll@t64c'dGd'0r3
%&'S6Rq=%M?;4>,)#1\(Qk%1`=kfor^N]u)p[T5#A:CflW?a<%3D[uF'p!MJRZocAl.5:Vo;^%FMGHho8*[Z,ZVk`<W4*L3nab^=j
%Y,cW?KHk<[Wd;H4JWt5'QE$[<*sS.1&;HVnE@YhpRd`QSmEUEeWZIaTX0iu8"m\tK=Rd]*0IsfPJB%+>(.C!P`e<5d8iHBOoWS'/
%/($I./__'uVoCrcH8NK9;O?f]?1?4S9$0U+]ekp$$<`dXfh;E/jNN%IaC1GrAr?;>hJT-<1HeOF9RM6k*PLt1+,0u8?`<P=%ht&2
%UktVOGggC/Bc`A@$ipeeF#t8OX<ULaD[[MD[%(,22@%[c(uR]!!38eKHdo6i^"$9\nZ+F+B<Bkl:ff/i6qe;rj+9T-X868U^ULe*
%N1)=PZ:^[!Gp3WCY2"s@ic+;,=b_D,.47JQU,dLlcqd\,6B$L_pOMKF7QCMZAH52E3eM<i2]M<I]%$2HkEF(uk>:;M@&=hZPAB..
%YjOYi-c0K3gn@!=!H'.hlQf]K.>gC),.RsSj5/OtMU\:%h5K4&?"0'`&V1@)9=1RJ\g8PjMF_>E=C1asdJKVN.@uK)EY5F:if!4+
%"BV]E@6(j5#\MRbb/Q^KUHc)tf:-A!T1%,/Z8\P?J`p\oT8F`ia1KOS:Oi/;J,5Mh^\u>OJ,Gr-I_T/*JNs(kkMQ<ks7Ok@rr#([
%dsq5YO2$&9q`k,DTAKV)mZ.$9rT?EDq>F+XDV@)(rhk6lo;=hQnb7P4D]d>4YZCbZ5QC9:TAKP*G>EQ8q,@=ms7t82^&.,&DEGKo
%p+LpllQ:Vcro*!^?i"0;#8+j\?N&p!r;NU<+6hb!r:ITcr:OF3A7X:Nq:OUP>mJd;YPS!^V.YT:Hh4H?nXojVQb/mho,n#%QTtE?
%mf3.L:VZeu:Oi;c(Q[;3oL4\R*steiKaVReB[QkkkXV6@r?)(1q`k+A05<S@^]$ItoVY3.rU*I"s53kF&-)KJfj?,YgIF4krRg31
%Vr.O5J,V);rEs.lo!gk@b2:pV&HI@p-'/*"s8Kq)rpmhZjE('0s-KAWr6tOmrQ%5#GdT$M$^m6N:R6IEHbMGG6jm+69HfiqKdR65
%@Tj<i!.NY'S:Sa<qs5-`VGMTkknqnQY2#uNA&e3,[XYWMq[S[;1IWT7ar8N))C#sj%!omLKKLTk+K3!j,6>rkS9o'&bX`Sjg@O\X
%%?tFbN;&P#+YP`JQUCHa+\eP*QkIk8RlaJ^UEC10!K'W4H8ugU%r)QL%mbuNA7%n^^++f!aZdB,,Xa1.fH6hf/a#"-.c0Y\/ZOnJ
%68U[CJagPW]jsFUJ5T@)E))N].t`ca3FrlL3!Q@K#gZ%i-%`@uA>DDpdj9gt!Ptt7"j=>^MU=K%Tl>DS5<O;1`eJ"BR=6A9V^NRk
%-^@bo#jcWk8nFtCq5\6V4u43^1,"eNMfQHHg,_Ga7fh/Wn8PUT(*ejB@e.?_%<5/T-&5r='RS9HWjE9ZEL5Us@Nu!)@s,'e9.S+]
%R?8"H1UGSeP*Q=WZg99\?nW0s[`+GMWH5tGK)7@747u<\`nCJLQ[1t4L5i=#A5$FLdrHi>,=)F#kH/E^\pf@9@XWN/Mr2VGr@su1
%r$pHU4rdpKh,%h&S0m=B\_lt2aR\lP<G"`Gl'*gF"hC9"pC_dngIItSA&\/OgE<qkm*OFT*OTeRc.V%CAFjg2s7^G<E=)QjQ1Q[W
%/jJPg!QJSrNhMOPr?VNr`s;U@8V1+g?'-!6S7X<W":bT?E#'WV4ckWK%.Wir"iuX>+7uUd'5SYb32-Ij)0.AS4m^bc'Shr40_)5&
%eKor+1GNSIaAg_!#d<Jg`Ie2u3!`u$AR6K"Oa`kf+]d*H4?9G]@%gsP()bdU5B)nl4?0UNYrAH[OeCs'c;fNnq4+$@A!'noA0F"3
%%%rL"3>dl2=*rYI%S0925/>^t#c;5d;&@3(d*tSA6jBSG]>hf.@knO^?2P:9n!P.aH53*HbG<H1+B;3"jrBp`R*[k&jak]&32l`,
%Q4\RJ,Ph=eX[VB,V0$",5^OO+dNq5d_C;KhM*BTHn@[aQ&LfYJU*LQ#@/NfQrLZ-&KC?;sVfB0`fN?bWaBo%Jj#.$F_a>O+$"fPG
%f/c'`6C)FiX7(G2,B#6+F7^JL(1Q.9#fa?rc.CjW6YB2<e9ZMNk+d5j,]B;a`-ne;O%sgp'5g_K^6"N@FUGA8HJEkuQu#t".6*H,
%$;SqNF>i5Y4Q!YE_:cAI$5-=SOY1_%a@3I3_1Cr/E.C+QB3WCbge6]a1[lTRN&^>ai$Ohg&C7,.OKIpNE?ZNY]C!?Y>7gE(-OdoY
%Zb%@JTKb^TgojH=Cha@nh`0NWaI>ic*9H>(.[9gK!OX,3BR@]&D-a]Hm./_tO6[COI-X-G=q1"\&qWK*8hJu6JIgP58kf+8&QV5,
%Jg#UdRdu'7kRTk4'.g/e]JYsCqn'Nr+%3nkk7$IOJ79Ct&`@>5&cad#J&Mng?+H]ro%omrlOfgQ9i\f9l'-]46<q%P?8/P=V7Ngt
%KE&IRe"pGl.M/7D:.`ZX%#Sl;l"eEf;BBdUJ#AKm<d%\W;]tu=A:G+mKQ$<#D>)dap_098p_G@slR'E*h8J*n]H/*-;<<!e:be+f
%4Ur`gYPTa'$sa$3E6ps$U$%!7\5B9+c*^(BPr,TE<O17R=SE'<bHrmfb`T!%.iEhMr,P%)[fsJaQNi]Oc&BK`+>SbQO;)IdEn?gX
%oPnR\Z'#>QX$ri[UVS^IB5(aCFts2]@Rd@WKGukm45bmZ#]hGp``s';*MOD01KCU#k^!([_!e#,g^EgsK]+A]lgY>pL-K06,?$L>
%16H^gp,9#Uf$@#./up&??"XSC@"!p>`k]tcK'IWs['<XOB<I%Q*upY@mu8(PSg&>Jeq]D5,)G4`7>1l&[FJ*L%.&[=4%b;rVAfl_
%=_"TF&oC!HEJ4s(3r[s1_tf8hCT;/%^QeYgq`R7NaOBDhFJS54(/ShU9=SAZ>dDU&[+2\=+c<'e5[b;RUpD`^_XI$4V:F729/<^D
%]ccu_BNslC[$aU*,<J@!9U[\tTZHnEknqGl+:'Q>ha6[U=dqcdFCR%.K-q\1JcC[6N&``B!(L'c:kY5mh7@k0-YQ#[Sf$uV)#4H,
%h9\*7ZZ'b'0a'0!!<45-2t8KXMklIL/5WSIU,rAhc94"d]ntRZQg?(9";pXZoDNV%6/mDK,md8@Bkf*$?4WA(P4-s2/n1a?]cT0r
%fL^S$4'M>%5pK9[.4Sc"l9Fbr7g:-;Ud>&AXV=W-/?b=XB]jMG4`W0'Yj9:Ofuo$LX<%W$[GRSgoNE/+!W%N"ZG;iR.`QYYVMN>=
%WoJrR#*gg!\:e<<I;dV3,P_1^PT]UcArBEF]MRfQN64B=IJ;s[^1T"c=%`q+s&5.9'gWhP'qi?(=`t/$G2b"T5fVkD=:hF4'oHhs
%UIOi?p2E\=Fp53+2$D&h_Eh/ioR'VT<M1lilO6Hg:n;T,#>oCqV5f]<!J+caV4F8h+j7faL<3,/=RaF[$]SWHB`<NrdH$EYV377E
%0hX7lG&C84*@]S^*YH7B2&mR)AKHeJ0(c:83^$UH&ePqV+D9mQ.SXH.LO^BSFbqeX)8&]M6E)@8Z@i7f.ucXKc=i:HA:Yptbp\YU
%U>qBB3'9;63C5rOM(mF"H0_D@O#.DS\&]hF1eO8G?k^a"nMm7,,H..1[\3%WMi;mk>i1mtilbqb)7R_>[qZ`L1p/Q&`7_,K@)M-?
%_0D2K&BQ6L+LP6I4X14]6H'YDao>`(QaCFh-/7f/]`4(_hDB=ok@#eC:ETq)(6Y=lU'MJc6"N8X/X=D,00b)7Hp`#:'UbM1QXT.X
%\bdE7RN4HpA_LkH;H;`^@Zrqp1r:$NMA6Jsiu,m<0URI6+Bpq_AknkLK38mK*)?<i`TlU)5N5T^MoajJI(L<n0.3X?,V1/d+nVt-
%%R+"L7>Q%:0o)5qhlS'!.jc.-\q$c1$Jt43*)GgLiUj(GX%cPDQrhNi.g'V0*2sSZl8t:s-9,/C.Mc5lP`$"T?3/If[n/pIf:2W9
%\P<Bs;:3#Eq!bE_jT")52SR,E!=PXEit,TX7NU/*S>g+"';JsoOU\j5@.9#X`-+6l[n7JkM!FAI*[`^MfMHUR'@ZPMcNYNKT7*DJ
%Rm=3<,dJI9l=gB+_fkd;YEFcjWtGAWg`p1=1>T?gG))2_R51'nBA;KR>a5dhJ<iV:%LAeHOn:@k)e@WM%WiThldM\4'kfsV`#_du
%e50lPn2]=rDlG+u/BWW5$^$Yo!jF.]?nt9Bm%>/H1XH%l;Zr7.pmp:_9\N>Q=.pn!'A+qR42q.&46dA5!OD*%k9dV]KouJP#p_*^
%p2<c._%I"0Fr!N@kE3i9QIS`2".3*L<,63<OH1]=!>9EuA@iZ]#1%K4fm6[d6N*d[kS^+1K`eB.i8Rj*8O^j4W^.Uso`6f]5ES%[
%B3I8%S_=dg_+,L2h$]5<&^KS^D$YRHAA2iZpM?,=Qki.d_f&sO*!9ZnUZtS7=IatRlpY+fF99e[Kpu>"2cB#lTIO.^2FO`iKJ=hV
%(:a<fem^<60bJ\r)Z^mBkA\)u\IfT?k`I^P_DU=dMk*0)\FJMuBTHLXr)=Zj;<TP4iVW*CW%WB8HKpuX@XhTO+:Mj:,_=rg2'#SW
%O/Nja>)G.%)KAt<Q/-MKOqJfAd8\P=^^A9p9SlB,0NE?o2!qfQU^.ce!5+b%Y:TD+iJ2Rl)%Y<_2OQsl%o[@p/qb"G<ru8ncnsG+
%O;?OG[@2?gJ0g%`'\5a<+/=]A=b^W)QAi[[f:lspNC6`VWtL?A'u.7UT#pM*[?b6$j3M.)aom1UG(-QbJX413&]g6EDd*+FDr)DC
%"8?FS/oJb[ml;R]0q#L5XYeG]Ua8f>&l2L]\J$+^BFE,"0Jr;I68Z/-`Wsa(%\&JWI<%Cbn=2/Vrf)4)m.+V$79K:t.%@aELN(V(
%c>6]($?\\5B"m180K%'e?H#_T9[p;&HV:hJM'5&M4UUO%6D"Q@;(OcE<T%,3d(OiQ?V&7#^>`gB?T:mV#ub$TEqLDm&AX-nk1Bge
%/s;+%D"F.AH2IS*cK2[KmC#CTf^5N?@O'LeG((p%PVArtMrFL4N;YntqlD"m"k-Ak1Ba?fMa;<k\TcKoOV6-?BiCirZ#1<(/2'C>
%OBZX-IZlP5M3O<5V=pbYV3U"$CQ>r)j/Tc_\`AtjK-rN:qIOO46OVinrS!KIc5\dS]:a>`&V_L?l-&?o1/3lg6,g$d(/[q$dJEU[
%Nki,nUnce0-F"E]IMV7b.Q'b!-fHVd:ip=5*2p17#pSTm(nP@s[^Otd?`P4lc-4A6^)dl)4m'OVYF,mR4f(66jA8Ku[V`$ophq:*
%!5%)rM;hl_%^NAKiObgPnKsYno-TXZ&0Cf=9a*gT#co?o$:\'mlkAi&dYC\eA)jkgMYN=A=$Ub.2,Lff#fF%&Z/,WbLO5h6eE)C3
%,On'Xhk$pf\1NJ^(-1rWG[D+W,sQbI12j%&]3I;OS+dC(=0*>#QEqH,69?t,FrE<Y1i6s-D>E#*hd!3S[5J1HD58'dH:%fTK=TO7
%mSHPUOW?P4Q,?%Si5D^<)\NoKo`:_ABldCdG2o<>bY.jsHi-iac][>7:S`O17TeKL#EDLQ@0m4UZ;g1Lf@mK@pE`R:(fq'2#F$U?
%N.0S<2\#O2?1dgCL-u4lZPn@DfGhAS9PhnrJH`/SRn]bBK7Tt4BhY`40C&'DUjF7!1.j655oaC`NAkk0DK5b9l4ofA\gEq">h4,g
%L(ta09C>)*Ad&1QCKt9V[^*cBmksm`"p!A]XIq8=6Q?i15O(KNq:8F2\<=rMC?9Vh]"?oVmT%,DB]kk%Z+SP4h9A>W/Jl%0IU/HQ
%lFHiIaV,Q.PkS3RecfnWa/&1oA)dO?%MluR*FqAq:V+PqAk/>NUU9^\O?SV-HYp3/bfEIMKXi_Ipi[d-$`>0&9i'bX\(?`,=r14c
%"$(c"etrpqCFA"4J_::qrH:.#&S_CF^o3+Ed?!k"h:E[s6sHesKa)86<ls@0`Zu&M:@&p\Z6#WKO#;ul^!gG$0G2>/()Z%'jg+#)
%O]cmQEF#R/h8@[1p<qKH/Ro&fb5G;2kec>.^;uhl#eBB-p(U#f3jfbG_md0JbKs`nREAQ*2."TKI^Bm$!-qrG`a-'erQ$D'#WY`R
%h0bYZEjK+V)(X@g;4=oS-OYJ6$NZb.p6-6KknNVf6X_('la]Em8lLf:"p,!s"WVPn-lNd`H_/[krI/k%ILoBh/U["^`sA1_V`V'\
%V;?aYn\_b?EIsQ</u2s49\Ce`2+RDS^6OE.rj^@ehf+4gb[5!(g4=ADhPX@;,8q!,V_%Ika3.dlbrTk`dF'>d)U_3=Z0Jpg5jLk"
%giV@"N"5U\Zed<b,>H-6,d\.@#cuJ740:2"$eV3kR20Ba-p.u;KI7pD)J<BEi9sl=WEdue!P+*V!-2MKj9EZoDU]an<!'H@q$b2L
%$D!S[`JVW.XK(l#W`.]HYT@^:Cdhm&W.uRi43/`\'7d'f\-!lLmcVIPQPlM`i6O-%$.J7ZI!2,EBJPPNOJ&pKd0'&qQ->9O0$#;N
%e.kQIUa(\lW^4"Mb4a48<"23a<XDn`d<7&W0Ib(pB!0d[T@?67(&&Y&:qVgA&+$"V5*OGfdhHL$]6s%V&:PHjJ2U[,pW^KuFaX/X
%Pqe"SWu2Q;B`tdLE"Wr=Kf-2+MoBcl2'H5u3l_Ona_Wqga)/akKV>Zp$fR]p@7OBOR>0%hGik0Xqbgf%YaR$.+b7cT+$.V"$<)r*
%&MU)'(uAP\)^9=&T-b74<,>praRG2!V<>d:bbGpNI=NeI$k5MIbMe$B,:;Q2^uBe2o2]Y4GET<l[Sg1X+Tkq9_lGUEaJY2IHu,4@
%Z><6oJ!^S*<0qHNdl@rbbX)$@)"[e:/YPR@Q0M7L@FF]H9.t&!/0m)I1B8Bse0FnX%-R\'_9DnoNqF!fF>WVJ*kpq+8GlE?T"Fb,
%4CNCW^_eq4Cr/kOEWY[f(e,J4@4Oq)BVM@MhID(#Mk+#$XM?hU4B`>tBYH/T_d63W<c5\OVO8JhQg3l-p2+JXlh!8-q=7kC-GbD?
%_GkQbWNI+i2*!,$CUP#5iXdX7Qo]?r>G6h2Lf8iNCg)G%pN1;PBa]WF@gJa%\6&>#Th<QM3_c6+>M3XCd*=l%eT@3GY+DLk*9.](
%+KpZQ*jhNM?P#9dO"rVMT>68O>FJ[/##cIH*kYe%1!VQarUoN\)ft8&^uB>\[1L.76g'J1#n3Y^<FMHj97(XH?M;B5[p@9:A4^RP
%48(Ap&(Yh\mOIp3G'nM58Z&=\&_4/HXfAe`pm$R-,18OMF/.-*_AJ]TGLkX1YVi6C0IXg&pq46`Ht78J^6=t<5M$(TJ)O$A5D+[U
%Mt3^b]N[umm\--S)@t#nBm,NS4c\WWJJ!f9(7ZYr`3CH%?;S5f">Lq:_pV^SacCOVAIfuIM'/!7R[2H:h.K_2FP]l@K0mEh'q,Oo
%+BSi'N?EG`p`s%\&trgZU%hDMeOXaUKA<.9`'S-"VXhe.1@<*Ae\]EBHc'BnSFq';kf:Y.=pui/7(Di%T<5:`co[re1XK)t;?:0t
%.#T?R?c7@Nfhk1W'k3GV+F1j+*NnFAI?EWdlqsTEfeJjp;dD7XgJE>]X8j<ZouCOD1'n(kG7Mjk9oj`38)M.<r!reZ5t8MA)KMG_
%.DceV$87't$<!<k0QAnb69q00?TB,%`F;QW0!&<Q[93=WKJ4,oRUU\3/lf!5r5$4*#`+pGmNCI<l+eF]dg&TG8TK^E$FrIaW]]:+
%0bPmnXsF2QAPJ/T;@))$$D?Un5k['i'-K3NFc(#-_hp9mDokBhe"RsAi`g&d*q0okGabqPU1g=\YH8A'jrij#=JhNnY9N]`jN)JM
%ht><b+/C8lU=hk3)mt1aANcp5^9H$bWp.M=PFOF!en"BrX>g?(N6BBJM:E\ZXeI,=R.@3E'Y]Pa/n%#DSjq&.TK\Z+aS]rI;R<`R
%;,\T*B:6'C9%]S:FC>K$d$I;C$J[(%$s"Vs('oSp)XLjJ.bl$^=BmaU!bAW>><]r5SKl(EOkbM!LE&;^5:@>Q1r(%U/2T:4%s.`\
%NdYUs<G?>+1&t,i@YC+iRIO,7V`YJ,[_aDn'q/P5TMp$1PfVNl4upE)$;**AUHW&VVKZs5_5E7!Y5gB8TaHVh!\B(]-Dn;AHAaO<
%bt<nPq)TM>=d;;/eKMVM3ne^YA@4`'%rQ`,;*E$Wq"6&ZX"6bp$,-S6FJKk^eQ7+fUFVV#XjYpSh5+J\ZT_'=KiB[DIRXUa'>n<1
%=I_*Qg-c/L'b8YgK_8GZ)UlQ7[D8UQ8UD6'QQVfn,'al=<G]jcYgs]!a:ZHZP-E56Vg'R[65]:sl3Iqh(PUtN_:$,.iF?+#c123l
%9kLe-/7#s.JJ*Daoaa=U1EGmkejV]Z5a8&?1m\iLJ!04g,n<KjKq<?@o6MPWq=W#'B^4V0^N-[Yj'*iuTF9Q9"<dPZiWMdX%iuS*
%$I_sn$7:Mb3BfGqO<*TW4D^mk<=?VFT&!4dYLO)`>$+#:%?dCb7V^UhWood^j7J.]J]H%'oeX4\%9NX=bo5U^aM$=hOHQR3X1Ssd
%*/,7VgT`W!80QsqOo^)uX!16<qnbp\%8A#3(AUcq%r/a_o4+Zu5@!!L^;1+>1.@(_QfF:rUMN-`Bu&3u?+t.L]+2E0'MPF-2X*f?
%!Fe(Q/Yp]9E0R?2H]g[lWRXH#o1[T/LjU?"2be$i))FRi[CW9i!j[ks+hi_)PeSS(=TF+oaMIW3jfpKD(U`\0%"E.UqT<.$hMlq,
%@YJ:!`,URUfBq1=oXo[!f)PTg!q8,t2[WRAL+<SgGr#d0/"!:lJa/EL-;\*n<2@[]g8,N1f?@sF82<tKc:cbIK&W+c929Nk;>=Q9
%$s[tVfr:HteM>dP9.61,i+uSq>lnAG[=,'KqR(9i\2K=Qf?LFNDu/<GMCJH,a^MG`C10F9$=%IYjSO;+E5>L"^T<H4n$O;t$BlaQ
%nZB^P6K(5MLDL;ZiU\R\Nae2>Yq%,'`SUl[e/?M1=AoN9AaC!Ql_@bZiX6e(8R_QN5o=P(_-5rH+Cem<+cYp+JI4V0a&gq86#F/!
%$J)(+*EKNj9V]P,:XpI<L2CJ#2$cm]WoPp6J;$@rVrTa@V4A(Sa6)>L!NNZXiPt1<a:4?PfW!oJ?e_F0ZF3\`.'jLS>Z>\@WZPJ=
%b4%j8<tnI`&b:L,,>-fY`^L^aH(i%$b&DJpY/"_g[E=TA2G"apVb'+RY$e.X.t6rSo;jSG9GqVo@8=\+Z,]$V92MTt;A]FWh.MUS
%Q'N_:bh#V^D89tCo,$+HXG#4pYu/&hQam<@h)3K"k!kcW3$&9[S,p2G0dgpfh;!Zeh$od5PapfV3,`_7i;$O=Z,/c@L"Nk7CM>*?
%#M-:C]"-iPR@(qhZ[Ck'BGdgi-ga(o#8PL9Bars'`jTZk*3XuP,N&mW*YON0#e"7Um-k]V<Ht%E+7t#Y,em]?-h&Ob\?PH5`5hBP
%He?c.]V%j>2a3us(C+`Z;7)-U!.L[7IF0Z#1tA(fN_r+(Q<GXZ40:VCSQ;1]3^ltKB#bPFYV^'&EkRjA%P8CaSA@0O7S[*o&sKS=
%aeY+*9Zo;_P_Abuf0nD!J6";V3W!-s27M\l["eg$*tOKm,#]7h+@rUV28'YiWO-Pt%ZtJIgE1X`BICI4o%1/)dYXGmVQCTJa?3SM
%osV!*)thJQX\9HOMP[Qp*`/4u^G+)6K4V;T_j%$/P/V<65BW'b(#[m-,`4&#,_f=0<m$.LRlVt_GZ@JP2d#K^?#aeN?(E7hFI8*U
%>c*W?0TN2qj*U:I.4rJSoVd)*)+dt5\%'X?e[0o^P1Qf#nmKW*4o*B8.`^,QPKYfI9iKk)l*lW`+T/LQ.h"3lj7d"79@GXaXak-p
%`Quc^,Bs3"fAC]gUB<P`%7+U<Qok]?(Ec4aI[/!(B@Nms?mDWX+HFU>%G>k/l055-fEt1A?/oVA,8.,h+/b(B]HmGPS6HqBeb@to
%bpu]LqS3IQ),I[PM?:,N.llaRF(D>uAhtu0&@^nC7ttF?1'"V:,m.j4?r%hHCL7d:@;bBJ]Sen!^'o/W^^gj"9<"oTO)@5Qn&dQ>
%IQS;[B$?,FLm,Tln1H7t/BSf*<9^./N9t_".qmlU_*eT[\o[\<;Ea!.6[<Pd$/ZV_^rL*iR-N!)Gbq8^%XfUrc5A-fV'(<+McTDN
%/btn<X1%kp"._kakM+"jlBI2_mR#ci9+\G+RiX@6%a)@>0'j3mfT<&4a1!.VQ5Fp8qCQEL?h?:dN<lu!CT8>e*-2s_XP&<_Y)iFh
%EN&i?0ce":Z*379-A2Dr_cigTFRuYlN"C+un7*EM;`O`W<\NA/mLrqlf_uoBe*!LoQZJaLDaS5CE(ElJj#sK;.X>3+.MOcD.j]fJ
%1sp$?i-]4d0/&FC'7E7r>*Laa=E>7A.H]0.#Ko(Y`'b<h;&\?m.d+Y8#7r6t<PZ0W$Rb4rWc,D6)0_Id5YBN<@S(g4[>].A.fsA\
%.&.JZn0t.WL8gak,"9j6"'`1eTM&u'<n>Bm@?.IO(A^'.D0=I/T<eKE75#FNZ#=t$<lRk+hi*>mFS5VeQ#ZD`#WL+%IVoZ9Xc"$9
%UXa;d:],=D/t*c"\@fgM7m+rJJu"\B+c*a_I^Uaq8NDgfDYq0m;SD8T5_28B8EF;;eSRV5F4B/S$II+c"8#G[C@s_#A@SCV+g)aK
%VF=kZ_QW,ijmc3Dkq)*5fm^c;2D8m]_Iga+Z]ubQ-U[Ye13f._IYnkI>2bG_6i#a)3m*@:Ia1^u_pd05Kba&sS7Qd/=#\%a>]X79
%ikfg-/f3)`l0"[#5OH0jSj%094rSq&J$=(tI;6np?Zd`=m-ctL!arq\?$%LGb?h>4o\"?>U!M;'mH:*'qrIR`QX0IcNgF#Y.^+ug
%<L9F6Vp)1oI5YASl*E6Rqt]F#O1T>"n'e+O6Iq%&bZb3`!2+\DX\<bA=s%>#bfcSY"IMT<"<'gaGHNKnM*_!T#b%4"FhILO22V"<
%Gc!&'=0H8sUPq:"$Y,ST1_n:@>aR-MjN=J=If?bHX6pqg)fL!?pLZ(\UDIcmZ)!o@7p.X3&>te80$)>%\F6rdg5r1h9.m=]%\_IZ
%pp%\\cfIN*H+8;f)'<FSm(dm"Ln>;o\'G:aQnI7Vb)."LpoX=iq_n9IST+$s`gNk0J-;Au@8VhHc:RPg[)V5/CM97@#,H..c`.I`
%m$U8=q.d!s&9^&'@c<Pk_UYBhb>L)IK<:<W@HODgDMEJS_]*!hU^`r-1>K&DGRTIqR,!E4%Ct`?lK`:t5QgY54K:A\-0LC?C1?X=
%n^S3:)\Q>f>r/N%Q!(.8/-0V8kd_KFKOD6c+^,trb"Q7u7.V-n02lYhT_X]I<uP]RrfksYd(:Bn6ArnEVjm=lTh%2oF+RW$^_;JN
%*(""Wa&a4k;/L`2'i!n)o7+E(lc(]Bk2CFKJQ#j*1ka;S&2GtYp7A4oZQLghHF.,j[LR_$,!pV7B3unFq5.nJT;@#1Q#^r<WV6"]
%&oaJ@L\A,BEsWi,InsD;3t';]g)&p*HD)ukR60!4T/Hg+hHjbGIq+a(lthIkIYu>hbCfonqBVK>T.5*T^7!+`LZEGqq6$dc=%S-c
%=3oTDHJh"b,[IO#gR2l1j06J4Kj4kU\Bl,Oec_XV'HOA#'S8mg'WE3a7`:ZBOj#nQi]9N7M2eSMj'Gi<_'4bn0JAq76tD5A`]G<t
%GOPIp;<K%S-XSJ1NAd9+<LtVX^$M.t<1Qpm!3ao:](*W7%=2eX.6NO2d5RPJao"R9#c3N2;%fN?q"EDU>"j/iD4W_WMY.Q%d01g!
%r"RpD`*H6EM5BB+_8#L!5Ap4CZ-:DILjh!eP\PjE&J-YsYKhaag^pG4<d^A),6tN0#nL<tGR]2`$_VDQfeT_bhRtVV4R#OgO^5f=
%(i<)N%@/_W9Os9km%:5.pn[GEqJ]U7E>%-n^Sll?`BAPGYs2uYhNr3<&+B7up7-^Q&8ic-E<lT)8f8C2OZt$<"Z*(kfO@9?>aE!4
%hMP5gI=/i/#u%n!C7]pWMl)'Jk"T>OJ3VBm6E$A%Ea;,f8Ag8bjtq!"e+/JJ'r<Q"AW=j+Fn`:.?;KBHNP>C.gk-^VgB!*BGZ'&n
%&:D:G%WPbjh\))@J2&a/22.qqOjbNN"O#RT>I$ME*U!j%0G4ae0XEOh)U\:oW$'EAmO+2X0'"*Om0VS1,-5s-AnUOF<QCJl<-Rim
%Z\]#5Nf@r7jmdq*4#&1r&Q-.<>i0n[#TlVgD]mTF$:k&\$h:\d\YB['m&k4n9dNN8j?_FI#_GO@q@X&9<;.RM.5%d`\hum;N)c<u
%Kt*.<-a",deKT(+=H>a3Ur&d7W,7d'n[41!_1`#FI*c>c-";oT.UE>r(;e[*XG6Ro#@*.YS.r0C\6>(EkliuTW](&Tc/<ZI"so3"
%gc*Q[_h1t^a4g9Y(5=Jmpg@^Xe6GBG^s[QI8(lqU88*OJ!$l;K6k:/L6eF^!kNj2M'"YpDP_bub.eG?u0:A-^W^42EGT?RX@c:MA
%#Ca%dPSDI^6L=:].T:s+W\OurPjPNmP8#O/.P)A"Ii9t>4ZuKZ*q,_r4p/XD6XjADTKBWSePnC"kSTW,LgePU)t6iBO2qW\BmF;W
%>UXL\bLE/3dFsOY<D1)A&g/9Iqj*]t)c8nrapsLB_fj)(V&1;L0:@6nF-MB\-4C+q1Y[pgMjA6T$._\Mm2JQP:@.C:&F$;:^"q2m
%P%D0D'%\AkeYr?!"gh*@`mRC+\`N21,*;0EQ)hs(f/Am=Ng_-5?)Z;C@r+W:V<!:eV5[k<E_=rSU$VkM5p3I'S2SM::eb)]CGRj[
%(bC`KgJtfuPSA_lG:b(MVg<Lq0d:l"!@];t1T:[U;be=_GMi6Aq&ri-a(O?<iAVOSp>fWnoEcgbZ(oYO$T/Qn(P0dn*!;!DBsQ%D
%HDl6mVIKt.9HWT,4UjXcG_RVS+.b6qBl4EHeRW1KJ6(5mY\da7M0qK\V`U&r3DeDpX=(s[<-VlJSC`p<D=:T'T:=J:*]qp6]_Fd5
%r1GCaVIShQis3<GY5YLb>W9Z;Q/O$*Jr1,[a'P5gXL$[28>ejS/4(2+;4)p^_@+stkIl!-!%Q2E4LZ06^dC"EGH@Te9udTC:=hdT
%cL(r(4F>j5Q5j)Oeub4kBc#TR2_<f*dE:K@Pd;a]7NXVe8F+.8VOu\f7fm`SLRoobBJMRr(=sS#o](3c50p6PQO8"Hi8.:<*i>J%
%)+dA9fc?sD4AC!S#t.dD.'7(0bXSqd@F?2X`TGD-p)\S]J9gafUeQ/4"lVR0p!Y?/.(J7F)VrAg%GY"Tbe$q/b(4iKN,gpj;jWM;
%4530s2EL/ne]Uedfj[cIT;U8aSl"^67c5IgNGUPN9P/Ff?tkpa6YVq_$o-89.e:G=4A:=riE:':M5-K\!qR_W+?`2fhUm3ZMo6HY
%iDF''a(ZZ!e<)BhE$m$[%/u%%SM=8$S6^^dT-$,g0^$<+HmmUU^<4\K],?WI4lQhZ[3`[8]1_J'kg8^!#O.c[HIEW7;GE+,hZ[tg
%>F]7,)>6BBgg7l:%9^meaMdfm_@;;VK"iecj<.M:M1rI>P.;85\A,[o$Rl%k.HRPZ!@Ku(3')__8&G&?iTudg:R/A[]=I^MK-(:^
%#U%`X2'"&D"QC!jdJ9L=4YG.-(L$1;.W__SkS6hAc4h>^H6KFN[u,esPdflf@CctGn71L.L*'rF3fDm2J^7mVb8o0Vo'^IT'O],%
%;O8j"/LrMk7CmLGTbA7^q!s:"`Z`)f"6bGoIFlL8=qEU?mJU9GaTYG@"rO;):O`ZS%2&`#Zc#7siU:NGRCi3?er#aDjf3"X-E1Jq
%Dh[;R$^#dPWGZBG2QHfh$lNO^][VU4L)7KZbZU5Z">N$T.KB8^k(WnhXQ[Q[TC]>UBJlpj2I_GK++kb_+Gn&sgPq^`X].KS)S&h"
%8<e]0X)q?TSSW_lWhj2t&HlW_9kF>1s)]:D?[15t*4k`\nQD&YYnIS<E[D%XE>Dh2jXb%K`I'=82I1'uL71\7$Pp#dHCBI#KCIn.
%C'(&<1NZW!cZflCOX8b>^g>ik;bNe_Wk<;M#R]E;@d>+h'0Fu:W]J"6QIZ6E52F7D'i7P3k@-esE5\t5$ehWo975\m5MFI'r$4Kt
%6Y">ZNF\.e#_Lr@=ef!%$'$9O4#d]_3[#]LYilCnJiL36an?^?UL-`1W.d)gK!#\)lm:Z1jp-ruC:H@\Mqj$&;u(:J!\a(-hO]OL
%CfN*"&N;qd!ut?J3UXZQHZmiB@Y-'dJL_4HYW,^#\6_ku=Z<gnL/SCal!ruMOoa"lA;"0%eW<9,^TSi`>-*lhC+H>,W*[)(A;+%^
%=KF&>gD7&;.8fOp([5+N&Ft`u[eR,_7GpdtkDa"%(MRD'W0bfJ3ri%&k:9Fs7M2bVW1gOg^]/[o";_m-[u);K)ehSZ$T@+V.n5X-
%=r-be"S4u#'p8!u/`q9$/p)=]FL.'Y$DuU,!!Ku$To(BemeGk$(.;31^O)YKT3c?un$l\Ea&n$_A$o$fj`g?JO$/8^q,p?.SVW4M
%p'+CtQ@Qdu(3H9t(8BG4#hX2j.sGC]n>8D5]5pf!MRPj]#kH12Sgp[L_Pq(s%i6Q<H@[[9/8E0!=^*X`=;M@SA_]H]QQY$0h'qQa
%=%Fg(op/*>!\Vaib$QCrAL6jl6B9DT/X3b__?dI.Rmgeje?/RSel/mBOk.&C#_a3b`Fa5T(epl"c`k]YU0?,!9P6dK(!tBuq4*=o
%;s:L$d*Nj@:aH6p^U=L<$Ut9ocBo(%RQ!AR)Rt8r%D>aHM8&F&-nQH.;H:mC`CCAClo<)dWnSiB8:#KOHGCjW"rD7CTih)6q&bBi
%b)@$J,`hpCW3RD?UHdPMVDU>IM'g-_c>cIeHhWR5i>&T-r$WUEe7$9O%tI;mMP29]`<4u8DKTdB0=9Pbo,4Z`'lt*up]7'fiC6\(
%O-Z[\75Y^%JH6955H)9>H9RGL+<HFK.G]RV?/R6L1o#(M)6+0*S#&G/M.llca3p6:K3#&]_OeN+@t9@jE6AJ8ijO5#7F,JTLBJf%
%JAl9C(Y\"/)!):[[Efn96!h6L<hZ\r_N/rK]3&#X&%E8-d_d0k@VeOk"tLZe/%%oXTZ.Zr;1mW1U=!,R6!hlT"bskd[%hLu`#C2A
%gZZXHU3<;5#MgIm5<D8+P(gnI^SEa+J?PV(FJ)iWBkG@fmm$Rl1g=nH?Z2Ls`LQ3;$WF:lrDbCZOsik$!JA4hVSd4cD#8d"T2XfY
%dGYGQfX_U,'BrIO+`!*9]QJCWp];@Pb>;5uI6NC>omu]7)<0ZaYPIJ=!$qt-?iTUpr0PFf9'"8<<cb00)fnmb(s<mg^=5K4i.C;U
%(.tq'QAU@CF3T$dTZH3VKZ10N,RgP4WNK;R5g5BSr;BC%ID^PMrUJG0V@sJRWA+cr_@&==HYX$),k^4MNf`_tSg%8<2'9EJ03FfH
%3GY:GbIU]RU'QC4"LL]33'XFmOULe6q`@N4(^Gj-q?U4LAi):UAoJfsWL-ObP.WAa<Rcr8\_ura4HsQrX!Ckf9Pl)?\-Rb8d[%K,
%[YS#$7Z2KD,&eJlO%su@i#BoaI58SGk#fi<]f^C$.n]X+S+Td(efS:-IEDE<EbLd+L)'9mXNMj-<ltu4+T*QYOf"YmZ<`fJ!K_0m
%KdaC!74m1Z:Lk\m.ba`.oebf*Si">bNAPSS::dT!Wt?[Loh);n>'4@la[^<Fm<U<O-/,fj[c4POrpVBBdIAWY1MN-"iukZ/h`)p%
%Z_R!$r4m];W#[I;^2`DVR0]Z^BTfeHGgL`KiOpZgiHI:(.htpi..FZYW4h=f]AI_WgZN%]XBI1+]V'cK?</G0_oh#UP3Nt`bTn8f
%QY,;&0f)V:2l4$.J>Q&<*[L>/qm9dOTd`+EK,+h,&<N>C93<-6CT`:Y(r;4u<6W"`R+I^L(,&RY@BaaGmpQf%"gWHQo?s2IMKpB4
%5^-O[6$umZ7H19.&tp$fGFDEC(S"3Be#%'@D8TnF>"n&>_Dl2?Yc=DF$59000XY*$AEjD;'ZHhc+`?m"X7Zj_i.S-laEAAO"CT@5
%7;9dj?$;?=XWp4EO@+dPn$lH09<.gMQnM10A*agYr)![PRm"?cH=<OW%CZFjN1^h\1_-*G&%5(HBH5^]QE\&BACMHZcY[gTVJk=,
%fPgMiL3Ql3gLAPEROYBi,qo0)a?$G6';O<HZ)S;3oFrL,'Wj^436T[4-)#YT]p/^u<"K-sgb)Ul9TTks?<&(t($nm=UT?46Z8$3r
%C$KAQb__Ec)uEkORq6]`m]+g@VWC<D:s!ZBADi>PP!nNNpiPgb=s44-#&B@d's*\Xd]sGM(Thi/XDd!;3+^@]O9Tsf]rZ@SF^_,G
%=a@&!ScTF\s+\hOK?i+]TgoJ59_9a60ahYE/3,Q;OS:fE3-i_"?O>OOl!En/UXR6FAX87/"UGR)<mG,?/FUE[4DBCDVL!![JV%'Y
%q@N:MILT#8n,_eqYpWCEOSlMV16)j5D45hUr/MZ9T?Du#C!giSh4!0?K\b4cc"O5`EWWDL_rOB'b@-P2C<STp_-h,o:gp_^idl!j
%aM'P,MI>gaBh7M=Drk4=fRiC9-&bDl(l7tSprTl<J9'WpB;B!U?&7)gIVC&N\G4\nTW'U`S0Fb_4+#BGht-*.*!`pZ]GBRL_+s,*
%lIe3k;N0@N>f>47:Qr^V+/?1!d0^6fH[hLKq9a_Hra?.Zn&t^?m^KYI)(2csqg>g'")I9?7Tr\?@B*8*.b.<Li`C?J^TG!rquHfn
%38Np)TTFWT[/<m$:I"'BFcF2M/EmHVa[CIeXL:W$ad,Tc/:NO[auG&h4=5c$A+1*\Yh-Q&n^,P,/&`<&,FR^Z$e_gqB"[/Ae&m-*
%2'Tf^l,JoTLo,K-Gk/-hksOCIpC]^Cr.C9OS<#S*iMLJMg#MDb1iN9P]'hgkGhePpiFf$^(5m9RW\$N(U#g9&eH&-:4J^bK8Ki:N
%7D("?Rr[#'-uoi^2GRr:1rf`_YK<Q[XslN8)-\()*#s*b>lJa2l%UI;65H]:L\bgs_PRM\q#V9G**dGRNTB:?Q&qW&s2hYcc?+Hk
%igJIb5Le5)KnlXnTJJ8e("PLWh&r*/TJP*(HZ<b-P@G'UC.Ia<*0()6N^JlX*B#l!]>3+:?W2o%/u^`(hU7,tJK,L$MH[Ld.j:uh
%;*([n/S]XuCS:pPQU/AAdDdosYBp%_8A%!hrqN=J&#0#c_?T'TZ4HVuGd_W4F=l$Nn(>P@9<CBNFdt1<l40k\"e76@?>S[_D<ej8
%Vp_.IU=0oZ*/*CGBpE!;-Iu$Q]<&.P>0eK`bSK]KJP#Dh4uTp4l#KTLO6"s=?JXp@lTU]3#Tp8R2N3"GG?Q#phgdM\l..o):"3g6
%HY8Sj2&oq:ifHS"bq0a1[1]12iMs-">.+nM)`>%hST#0f?hMEE[llkF0]ISg(#kO4!8OQedC!U?G_/OOPbqaZ<i$?$o18%;=_n>V
%L$Ug#qJJYiq$K%eO-uuWa2<h=o(\WqIu#gSEn+S@2_9:#@fk^VE8TUioQd#s"8G/_I%>#F2C9WDYTj'nGg!fT<Q8Q-`*#dG7P.38
%9u:F]/6)mTOH:oGX:Y"1GEmj\9\bn5j&XQ?U?POm=X4V3987C51C0ILPRq3/oI3fWa\":2<#el)D4*Ag5b*eL9?VHER_(NZ$0(tr
%`CQ`lB_"LjW2V\CFE&]U(&+<ZYmIHP+-Q3JG"(Ro<U%]fiub@6SPAPYl"^$og$ee#Eo8.%].HFmYC8."E!`G-VDR="aFg]]96NB<
%LQ++45B9l6(r;I[)\Y_+0NdZV0e@D<`sSGj>dQGP/CVP[FLj?#c'(K;JGtt!h"%Mr\E$b(E5CEi.)sA-^SE5<dF^Ni+%uOGoK\dm
%/RY6B2[s`^:_00E+F*4%[-$=JOggf(!MG]GWj7XR&6/e81'%hS4!A08X5-M((hSGW8Ko@W$q^('OgRa0=GGtmPO=tm,HTgMgfP>3
%Y7MQ3/r-'N-a8&cVC^+"]\]<^?V*T!buVqAOaEk10MX,l/<Zj/Oco+[;Ogn"11gs`b9'C*gq@s2/UTdi7aDn%7p2<c/+.;-ne?C>
%g4WT;T@!?cea!OC]?464PCS@i(dAE8H'kU\5Kb-rct=3:K6C#L,=2e+/1^D[AF(WJVK)2T]14>EZXNes9R1K!3_NVJFDn%2,=YAD
%m_PNj7-HY<?5RNdj>7N"7*H7=8AJ^7?In'OZ^%C:?r$=kJP")jMp<'%9?h8^.)=Jd&.<S^<Lu3uW35.5Y;Yc!;_)0?@%E_j7?0-Q
%Nb;pj=Mr5C2W%,L2S;]nbs1oEd,+o)b!Z<ikgLMsd-@>f"g-Qm&pWf4@!)iR"^]-/(/35#J'nk5GSJ.-Fq6b<mKlSsiuBD"OEm*O
%fdSOC&mu2HYRiq>H5o<4^#?A3<2;C4mKPZf?F63B-n2d#Hn4mI@@[ZqnJV+FRe.WI^F@tpK*=O,4*WScQcaB22Ntn]X.,;Op)2U!
%g%YnGbGp&5a\kqka,?>bJ14G/BUtRs9d1p[Ad@Y\ol.M\Q`gnfbF6cS5s?F^ZZ"=LcUPu(+9mH,68'[@QjP"#K!8OJS.RKp_"36`
%Bo@B3F3c0rekV']E&n$=]_F?DL7I)GNt%9tn:&.8$dZ#$rjgdeI2+C/FpQ5D/C]%jZ"o-V3+1*?msm@-C^+m9lt_@^q<89O>U.,%
%a=+'B\#E9RM3,Z\J8n7&%)LIa(S%_29IHbHNo!&EU\HeM_Sa]N+rN`SO93AZl1-i"%!Q\!i\bfZCH1Gg5B1j=-gk0"?Q@E,f0N5E
%dC5lEcM?U#6:*;QW(<9&_4k1\G<Dk(DW??_,L`/=biZ[e]WYq]heG:OnWch()eF%iG=H3>]rXDkKiS'$bK>SZ%5$+q@\lk^0qGth
%_RNI;("%Oe,194lAU'ekm\sb[i>OhtgRR@VXO`1'dZ+CN5"V+K"m19&9_OHo>>ZABOlHFT9B2<@lIhKZD499NI(=kbDOr0^@N_B/
%a!`$lihcNf.G!N`kHm9!KkXq7h?"rgJ4ngKkGa=T`u:*QDt>Ct_cVn=[)BIhp:L=74C@$5CD<#Y@!5$.%;(JoM^[^t'Hr/sllZ_,
%=,kS/h"g;fU0;5p+!BGHP9Yi%g#!oMSg#Fng7G#VXW<CJOh`QmfN@jTB!U.mhcrO`[Q)-#==.gG@2;bA+f"V8kc$LJqg#)mcT-4$
%,._qM<7M@"QuZ,iG0gRpkPE&o"rq'?`eX^7L_u_*YKB=c(0Xg"!CO4f7%HN\[R_@S_`\c8Hb71@4r/S)<;7jl@K*W3)?V<1NW,_@
%9W'0aWKVnf@'$:630(PXasZ=--t!/k1b5L@-5Eke:?F!UqNZNI')\C3A844Eo/)"c:4kMLis[IpTQabE>0d:?Fhe[Aa[-aMRA!Vh
%U5gLg!S)7=!\72XnoB;*Ta#,&3\ApJ8t)`^Au5PBhEL\aide[cSCC5@N<k:MH,o-VV3(*]UHl[\m-mlI.g;?N)?u+VQ5e<77B_#3
%Di%X"%Vo8[WDuG/(rp(^!N/#k?q/\s>6stJIqo>=;%a"`8C/t%87&#T./SeWO(o;!c-cDpEO]hEF\]FK:SWT+Jg`$VB^29LP:_0r
%]48*2)-/Hk&<<4t*s-J-BU=G`-\^cT(or%Jl<jkpPhJn95N%M03$e^!nP5R`@XR0-hY.uT_Qkf<"Y7)0@Fd*WC6&O+jcs\b7!kRL
%@'QOIP[>]o#HQl9D2Y4thp`Pl<s+jX+48M8R]?mO=]s+]WYs4b_&J"%+[<*6KVh#&'LQlYq;Fs[FJsYT:Bo6V/I<GE!98(,=hAFd
%;>p"D(jWO/!$II[b?#F!]O?Ol72sE%SC`Tbn#EZ$.nru`Q)WM;@MB6;mh;n-q:hE^ikUr28OB$mLrcV2)oErcYoY[(M2L2E#eu_D
%4DgU5)D&::7;H&"9pjY3;GqjB*9EX?is04uHp.:+V/Tg?(_C3-'_d9g9>gnlBa[4$CN'1^0<Z3+2;bjlFd'Ob?<@lpZXo,pgr&XC
%/e_9SHA`.KQ%Z,)=lX7JfO%/M`r+T9\h,H#AVgmLWm_Jd603_?4*l*,Vs2Yo<t0':==j$IR*2^FTb`04nar[-i,-F=b.qQQ<eNLj
%Jg_)W5Y3e3Gu1fYZ68;hGH!][nstPIMI;^H'0_Gsagsi,oWkT:)YI&*mH[D2!"P4XBju.j^ot4"a_55$WmE3=KH^KIOW45SW>fP,
%!m0@K?Y=E678M6k@]dT$Dj'Fja?s'8crukQAfTu(.HYTW-er'?.m^h!"5J>'cA*3#k.=SR^32+2A5KllaOsU<h?UV2SG-HgWA=A^
%di#FCead3$GBKQhP=C@/TU][VFikV:&n)D?!JKB#5D(Mio-PWLY_>GlSt!8=Tg,$^aL_bOjt+Xdk7*FY'_c"tZMW!:c"!9:CQGN.
%l"B^%msZ=?J7ubRI1XL12D4,GW.rFc"OE<-hCq\q.nXC3`=TYMrO%o@)ZX,#Q'5,jNpTfrLS:OGL08[j[@IbVdmI3)+.Q3oH00/P
%!nec5SD1%HdZ+]^;J'b3g#L:h,Qkn!Hi(tu@pf_&24LBTAj-;1Am:.q9a?7Nr,!\^J.MgqL8$4H]5JS:%63b)EGK6kF;N07gq"pJ
%R1-Bpj>ZM?-ukSYT*NZQEH_;`F'a"HYb-<n!&lM&qPint?DrQ_rql6C+-Z*LrQ"ops5gHaj72:C^\mf'595JCr9'^Po#lOYmH=NB
%lS$$Oo0<38Da4:$bIaDHqH$A>?iKfi?gn!bgFn'R5QCT70CSo65QCEV_1J0%)uf>^J,)n?iLg/7rrY*^1sH~>
%AI9_PrivateDataEnd
